<?php
/**
 * @file
 * Token related functions for Fundraiser.
 */

/**
 * Implements hook_token_info().
 */
function fundraiser_token_info() {
  // Add a donation type.
  $info['types']['donation'] = array(
    'name' => t('Current donation'),
    'description' => t('Tokens related to specific donations.'),
    'needs-data' => 'donation',
  );

  // Donation tokens by field.
  $info['tokens']['donation'] = _fundraiser_donation_token_info();

  // Donation basic data.
  $info['tokens']['donation']['did'] = array(
    'name' => t('Donation ID'),
    'description' => t('The unique ID of the donation.'),
  );
  $info['tokens']['donation']['node'] = array(
    'name' => t('Fundraiser Node'),
    'description' => t('The fundraiser node the donation came from.'),
    'type' => 'node',
  );
  $info['tokens']['donation']['user'] = array(
    'name' => t('Donating User'),
    'description' => t('The user account the donation came from.'),
    'type' => 'user',
  );

  // Modify given for payment fields.
  if (isset($info['tokens']['donation']['payment_fields'])) {
    // Payment token fields are generated by the gateway and are not
    // predictable.
    unset($info['tokens']['donation']['payment_fields']);
    unset($info['tokens']['donation']['other_amount']);
    // So we add the ones we know we want to support, they will be enpty if
    // the donation didn't set them.
    $info['tokens']['donation']['card_number'] = array(
      'name' => t('Last 4 of card number.'),
      'description' => t('The last four digits of the card number, available only if the user selected a credit card method supporting this token.'),
    );
    $info['tokens']['donation']['card_expiration_month'] = array(
      'name' => t('Card expiration month'),
      'description' => t('The expiration month of the card, available only if the user selected a credit card method supporting this token.'),
    );
    $info['tokens']['donation']['card_expiration_year'] = array(
      'name' => t('Card expiration year'),
      'description' => t('The expiration year of the card, available only if the user selected a credit card method supporting this token.'),
    );
    $info['tokens']['donation']['card_type'] = array(
      'name' => t('Card type'),
      'description' => t('The type of credit card, available only if the user selected a credit card method supporting this token.'),
    );
  }

  // The currency is a special case.
  $info['tokens']['donation']['currency:code'] = array(
    'name' => t('Currency code'),
    'description' => t('The currency code. For example, "USD".'),
  );
  $info['tokens']['donation']['currency:name'] = array(
    'name' => t('Currency name'),
    'description' => t('The full currency name. For example, "United States Dollar".'),
  );
  $info['tokens']['donation']['currency:symbol'] = array(
    'name' => t('Currency symbol'),
    'description' => t('The currency symbol. For example, "$".'),
  );

  return $info;
}

/**
 * Recursive to build up form info for tokens.
 */
function _fundraiser_donation_token_info($fields = NULL, $tokens = array()) {
  if ($fields == NULL) {
    $fields = _fundraiser_field_info();
  }
  $children = element_children($fields);
  foreach ($children as $child) {
    // TODO Adjust this tokening to account for the new changed in donation
    // fields.
    $disallowed = array('card_cvv', 'currency');
    if (isset($fields[$child]['#type']) && $fields[$child]['#type'] != 'fieldset' && !in_array($child, $disallowed)) {
      // Add children.
      $tokens[$child] = array(
        'name' => isset($fields[$child]['#title']) ? $fields[$child]['#title'] : $child,
        'description' => t('Donation field information.'),
      );
    }
    else {
      // Recurse for more.
      $tokens = _fundraiser_donation_token_info($fields[$child], $tokens);
    }
  }
  return $tokens;
}

/**
 * Implements hook_tokens().
 */
function fundraiser_tokens($type, $tokens, $data = array(), $options = array()) {
  $replacements = array();
  $sanitize = !empty($options['sanitize']);

  if ($type == 'donation' && !empty($data['donation'])) {
    $donation = $data['donation'];
    // All set fields.
    $data = is_array($donation->donation) ? $donation->donation : array();
    // User and etc types.
    $data['did'] = isset($donation->did) ? $donation->did : '';
    $data['node'] = isset($donation->node->nid) ? $donation->node->nid : '';
    $data['user'] = isset($donation->user->uid) ? $donation->user->uid : '';
    // Specific changes for payment fields.
    if (isset($data['payment_fields'])) {
      // Payment token fields are generated by the gateway and are not
      // predictable across all nodes.
      // Since the nodes are individually configurable. We wouldn't be able to
      // predict all element.
      unset($data['payment_fields']);
      $data['card_number'] = isset($donation->donation['payment_fields']['credit']['card_number']) ?
        substr($donation->donation['payment_fields']['credit']['card_number'], -4) : '';
      $data['card_expiration_month'] = isset($donation->donation['payment_fields']['credit']['card_expiration_month']) ?
        $donation->donation['payment_fields']['credit']['card_expiration_month'] : '';
      $data['card_expiration_year'] = isset($donation->donation['payment_fields']['credit']['card_expiration_year']) ?
        $donation->donation['payment_fields']['credit']['card_expiration_year'] : '';
      $data['card_type'] = isset($donation->donation['payment_fields']['credit']['card_type']) ?
        $donation->donation['payment_fields']['credit']['card_type'] : '';
    }

    if (is_array($data['currency'])) {
      foreach ($data['currency'] as $key => $value) {
        $data['currency:' . $key] = $value;
      }
    }

    // Replace the given tokens.
    foreach ($tokens as $key => $token) {
      if (isset($data[$key])) {
        $replacements[$token] = $sanitize ? check_plain($data[$key]) : $data[$key];
      }
    }

    // If we have a donation object add the node and user tokens as well.
    if (!empty($donation)) {
      if ($node_tokens = token_find_with_prefix($tokens, 'node')) {
        $replacements += token_generate('node', $node_tokens, array('node' => $donation->node), $options);
      }
      if ($user_tokens = token_find_with_prefix($tokens, 'user')) {
        $replacements += token_generate('user', $user_tokens, array('user' => $donation->user), $options);
      }
    }

    // Make more user-friendly label for payment method token.
    if (isset($data['payment_method']) && isset($donation->node)) {
      // Get node gateways and loop through them.
      foreach ($donation->node->gateways as $gateway) {
        // If donation's payment method matches gateway, use label for
        // gateway token.
        if (array_key_exists('method', $gateway) && array_key_exists('label', $gateway) && $data['payment_method'] == $gateway['method'] && $gateway['label']) {
          $replacements['[donation:payment_method]'] = $gateway['label'];
        }
      }
    }

  }

  return $replacements;
}
