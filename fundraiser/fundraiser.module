<?php

/**
 * @file
 * Provides behaviors to handle donation form creation and donation submission.
 */

require_once 'includes/fundraiser.crud.inc';
require_once 'includes/fundraiser.donation.inc';
require_once 'includes/fundraiser.donation_form.inc';
require_once 'includes/fundraiser.fields.inc';
require_once 'includes/fundraiser.form.inc';
require_once 'includes/fundraiser.gateway.inc';
require_once 'includes/fundraiser.node.inc';
require_once 'includes/fundraiser.node_clone.inc';
require_once 'includes/fundraiser.refund.inc';
require_once 'includes/fundraiser.springboard_admin.inc';
require_once 'includes/fundraiser.theme.inc';
require_once 'includes/fundraiser.token.inc';
require_once 'includes/fundraiser.webform.inc';

/**
 * Implements hook_boost_is_cacheable().
 *
 * If Boost is enabled, make sure donation form nodes aren't cached.
 */
function fundraiser_boost_is_cacheable($parts) {
  $args = $parts['args'];
  if ($args[0] == 'node' && isset($args[1]) && is_numeric($args[1]) && !isset($args[2])) {
    // It's a node, but is it a donation node?
    $node = node_load($args[1]);
    if (fundraiser_is_donation_type($node)) {
      // Don't cache donation forms.
      $parts['is_cacheable'] = FALSE;
    }
  }
  return $parts;
}

/**
 * Implements hook_cron().
 *
 * Needed for gateway test mode status check.
 */
function fundraiser_cron() {
  if (module_exists("rules")) {
    $rule = rules_config_load('rules_gateway_test_mode_alert');
    if (!empty($rule->active) && in_array('fundraiser_gateway_test_mode_detected', $rule->events())) {
      fundraiser_gateway_status_check();
    }
  }
}

/**
 * Implements hook_menu().
 */
function fundraiser_menu() {
  $items = array();

  // Admin paths.
  $items['admin/config/system/fundraiser'] = array(
    'title' => 'Fundraiser',
    'description' => 'Configurations for the Fundraiser system.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fundraiser_admin_settings'),
    'access arguments' => array('administer fundraiser'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'fundraiser.admin.inc',
  );
  $items['admin/config/system/fundraiser/settings'] = array(
    'title' => 'Fundraiser',
    'description' => 'Configurations for the Fundraiser system.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fundraiser_admin_settings'),
    'access arguments' => array('administer fundraiser'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'fundraiser.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function fundraiser_permission() {
  return array(
    'administer fundraiser' => array(
      'title' => t('Administer fundraiser'),
      'description' => t('Perform administration tasks for fundraiser.'),
    ),
    'refund donations' => array(
      'title' => t('Refund donations'),
      'description' => t('Refund donations for fundraiser.'),
    ),
    'create donation form' => array(
      'title' => t('Create donation form'),
      'description' => t('Create donation forms.'),
    ),
    'edit own donation form' => array(
      'title' => t('Edit own donation form'),
      'description' => t('Edit own donation forms.'),
    ),
    'edit any donation form' => array(
      'title' => t('Edit any donation form'),
      'description' => t('Edit any donation forms.'),
    ),
    'delete own donation form' => array(
      'title' => t('Delete own donation form'),
      'description' => t('Delete own donation forms.'),
    ),
    'delete any donation form' => array(
      'title' => t('Delete any donation form'),
      'description' => t('Delete any donation forms.'),
    ),
    'clone donation form' => array(
      'title' => t('Clone donation form'),
      'description' => t('Clone donation forms.'),
    ),
    'use gateway switcher' => array(
      'title' => t('Use the bulk gateway switcher'),
      'description' => t('Allows users to change donation form gateway configurations in bulk.'),
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function fundraiser_views_api() {
  return array(
    'api' => 2,
  );
}

/**
 * Generic helper functions. These may need to go into a diff. module.
 */

/**
 * Get the relevant currency data array from a donation enabled node.
 *
 * @param object $node
 *   The donation enabled node.
 *
 * @return array
 *   The currency data as an associative array. Includes keys such as 'name',
 *   'code', 'symbol', and others provided by Drupal Commerce.
 */
function fundraiser_get_currency_from_node($node) {
  try {
    // See if we have the currency field on the node.
    // If we don't then entity_metadata_wrapper will throw an exception.
    $wrapper = entity_metadata_wrapper('node', $node);
    $currency_code = $wrapper->field_fundraiser_currency->value();

    $currency = commerce_currency_load($currency_code);
    // If that currency doesn't exist, use the site default.
    if (!is_array($currency)) {
      $currency = commerce_currency_load();
    }
  }
  catch (Exception $e) {
    // Load the default currency as set by Commerce.
    $currency = commerce_currency_load();
  }

  return $currency;
}

/**
 * Log that a donation has processed and some other details for Log Analysis.
 *
 * @param object $donation
 *   The donation object.
 * @param array $log
 *   Additional log details, should include start/end times, and the type of
 *   transaction: charge, refund.
 */
function fundraiser_log_donation_processing($donation, $log = array()) {
  // Calculate the execution time.
  $exec_time = round($log['end'] - $log['start'], 4);

  // Setup the gateway details, the gateway name and config (rule name) are
  // contained in the id.
  list($gateway, $gateway_config) = explode('|', $donation->gateway['id']);

  $pieces = array(
    'datetime',
    'category',
    'unique_transaction_id',
    'client_identifier',
    'payment_gateway',
    'payment_gateway_config',
    'transaction_type',
    'transaction_total_exec_time',
    'donation_value',
    'donation_currency',
    'country',
    'origin_ip',
    'success',
    'reference_charge',
  );

  $message = '|%' . implode('|%', $pieces);

  $variables = array(
    '%datetime' => date('c', $log['start']),
    '%category' => 'INFO',
    '%unique_transaction_id' => $donation->did,
    '%client_identifier' => $donation->uid,
    '%payment_gateway' => $gateway,
    '%payment_gateway_config' => $gateway_config,
    '%transaction_type' => $log['transaction_type'],
    '%transaction_total_exec_time' => $exec_time,
    '%donation_value' => !empty($donation->donation['amount']) ? $donation->donation['amount'] : '0.00',
    '%donation_currency' => !empty($donation->donation['currency']['code']) ? $donation->donation['currency']['code'] : 'N/A',
    '%country' => !empty($donation->donation['country']) ? $donation->donation['country'] : 'N/A',
    '%origin_ip' => ip_address(),
    '%success' => isset($donation->result['success']) ? (int) $donation->result['success'] : 0,
    '%reference_charge' => isset($donation->reference_charge) ? (int) $donation->reference_charge : 0,
  );

  watchdog('fundraiser_donation_tracker', $message, $variables, WATCHDOG_INFO);
}

/**
 * Implements hook_fundraiser_node_expire_node_view_alter().
 */
function fundraiser_fundraiser_node_expire_node_view_alter(&$node) {
  $node->content['webform']['#access'] = FALSE;
}
