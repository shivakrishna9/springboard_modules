<?php
/**
 * @file
 * Provides behaviors to handle donation form creation and donation submission.
 */

require_once dirname(__FILE__) . '/includes/Donation.inc';
require_once dirname(__FILE__) . '/includes/Fundraiser.inc';
require_once dirname(__FILE__) . '/includes/Refund.inc';
require_once dirname(__FILE__) . '/includes/fundraiser.actions.inc';
require_once dirname(__FILE__) . '/includes/fundraiser.deprecated.inc';
require_once dirname(__FILE__) . '/includes/fundraiser.donation.inc';
require_once dirname(__FILE__) . '/includes/fundraiser.fields.inc';
require_once dirname(__FILE__) . '/includes/fundraiser.refund.inc';
require_once dirname(__FILE__) . '/includes/fundraiser.springboard.inc';
require_once dirname(__FILE__) . '/includes/fundraiser.theme.inc';
require_once dirname(__FILE__) . '/includes/fundraiser.tokens.inc';
require_once dirname(__FILE__) . '/includes/fundraiser.utility.inc';
require_once dirname(__FILE__) . '/includes/node/fundraiser.node.inc';
require_once dirname(__FILE__) . '/includes/node/fundraiser.node_type.inc';
require_once dirname(__FILE__) . '/includes/node/fundraiser.node_clone.inc';

/**
 * Implements hook_entity_info().
 */
function fundraiser_entity_info() {
  $info['fundraiser'] = array(
    'label' => t('Fundraiser'),
    'base table' => 'fundraiser',
    'entity keys' => array(
      'id' => 'nid',
    ),
    'static cache' => FALSE,
    'bundles' => array(
      'fundraiser' => array(
        'label' => 'Fundraiser',
      ),
    ),
    'entity class' => 'Fundraiser',
    'controller class' => 'FundraiserController',
  );
  $info['donation'] = array(
    'label' => t('Donation'),
    'base table' => 'fundraiser_donation',
    'entity keys' => array(
      'id' => 'nid',
    ),
    'static cache' => FALSE,
    'bundles' => array(
      'donation' => array(
        'label' => 'Donation',
      ),
    ),
    'entity class' => 'Donation',
    'controller class' => 'DonationController',
  );
  $info['refund'] = array(
    'label' => t('Refund'),
    'base table' => 'fundraiser_refund',
    'entity keys' => array(
      'id' => 'nid',
    ),
    'static cache' => FALSE,
    'bundles' => array(
      'refund' => array(
        'label' => 'Refund',
      ),
    ),
    'entity class' => 'Refund',
    'controller class' => 'RefundController',
  );

  return $info;
}

/**
 * Implements hook_permission().
 */
function fundraiser_permission() {
  return array(
    'administer fundraiser' => array(
      'title' => t('Administer fundraiser'),
      'description' => t('Perform administration tasks for fundraiser.'),
    ),
    'refund donations' => array(
      'title' => t('Refund donations'),
      'description' => t('Refund donations for fundraiser.'),
    ),
    'create donation form' => array(
      'title' => t('Create donation form'),
      'description' => t('Create donation forms.'),
    ),
    'edit own donation form' => array(
      'title' => t('Edit own donation form'),
      'description' => t('Edit own donation forms.'),
    ),
    'edit any donation form' => array(
      'title' => t('Edit any donation form'),
      'description' => t('Edit any donation forms.'),
    ),
    'delete own donation form' => array(
      'title' => t('Delete own donation form'),
      'description' => t('Delete own donation forms.'),
    ),
    'delete any donation form' => array(
      'title' => t('Delete any donation form'),
      'description' => t('Delete any donation forms.'),
    ),
    'clone donation form' => array(
      'title' => t('Clone donation form'),
      'description' => t('Clone donation forms.'),
    ),
    'use gateway switcher' => array(
      'title' => t('Use the bulk gateway switcher'),
      'description' => t('Allows users to change donation form gateway configurations in bulk.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function fundraiser_menu() {
  // Admin paths.
  $items['admin/config/system/fundraiser'] = array(
    'title' => 'Fundraiser',
    'description' => 'Configurations for the Fundraiser system.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fundraiser_admin_settings'),
    'access arguments' => array('administer fundraiser'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/fundraiser.admin.inc',
  );
  $items['admin/config/system/fundraiser/settings'] = array(
    'title' => 'Fundraiser',
    'description' => 'Configurations for the Fundraiser system.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fundraiser_admin_settings'),
    'access arguments' => array('administer fundraiser'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'includes/fundraiser.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_boost_is_cacheable().
 *
 * If Boost is enabled, make sure donation form nodes aren't cached.
 */
function fundraiser_boost_is_cacheable($parts) {
  $args = $parts['args'];
  if ($args[0] == 'node' && isset($args[1]) && is_numeric($args[1]) && !isset($args[2])) {
    // It's a node, but is it a donation node?
    $node = node_load($args[1]);
    if (fundraiser_is_donation_type($node)) {
      // Don't cache donation forms
      $parts['is_cacheable'] = FALSE;
    }
  }
  return $parts;
}

/**
 * Implements hook_views_api().
 */
function fundraiser_views_api() {
  return array(
    'api' => 2,
  );
}

/**
 * DB Function, Check if the given order was made on a payment gateway that supports refunds
 */
function _fundraiser_get_donation_gateway($did) {
  // First check the donation table. It trumps the fundraiser table in case the FR has changed since.
  $found_gateway = db_query('SELECT d.gateway FROM {fundraiser_donation} d ' .
    'WHERE d.did = :did', array(':did' => $did))->fetchField();
  // Now ask if any other module wants to override this result.
  drupal_alter('fundraiser_get_donation_gateway', $found_gateway);
  // Now translate that into something we can use by getting the rest of the dateway info.
  if (isset($found_gateway)) {
    return _fundraiser_gateway_info($found_gateway);
  }
  // If nothing has been found, return nothing.
  return array();
}

/**
 * CRUD style DB function for fundraiser_tracking.
 */
function _fundraiser_create_tracking($tracking) {
  $tracking = (array) $tracking;
  $tracking_data = FALSE;
  if (isset($tracking['nid'])) {
    $tracking_data = _fundraiser_get_tracking_by_nid($tracking['nid']);
  }
  if (!$tracking_data) {
    $record = array(
      'pageviews' => 1,
      'conversions' => 0,
      'local_failures' => 0,
      'gateway_failures' => 0,
      'latest_load_time' => 0,
    );
    $tracking = array_merge($record, $tracking);
    drupal_write_record('fundraiser_tracking', $tracking);
  }
  else {
    _fundraiser_update_tracking($tracking);
  }
}

/**
 * CRUD style DB function for fundraiser_tracking.
 */
function _fundraiser_get_tracking_by_nid($nid) {
  return db_query('SELECT * FROM {fundraiser_tracking} WHERE nid = :nid', array(':nid' => $nid))->fetchObject();
}

/**
 * CRUD style DB function for fundraiser_tracking.
 */
function _fundraiser_update_tracking($tracking) {
  /**
   * Code commented out on 2/18/2016 by pcave for performance reasons.
   * When a donation form encounters significant traffic, updating a single row
   * in this table over and over during a request can cause lock contentions.
   * This eventually cascades to other database operations thus slowing down
   * the entire response.
   *
   * $tracking = (array) $tracking;
   * $tracking_data = FALSE;
   * if (isset($tracking['nid'])) {
   *   $tracking_data = _fundraiser_get_tracking_by_nid($tracking['nid']);
   * }
   * if (!$tracking_data) {
   *   _fundraiser_create_tracking($tracking);
   * }
   * else {
   *   $tracking = array_merge((array) $tracking_data, $tracking);
   *   drupal_write_record('fundraiser_tracking', $tracking, 'nid');
   * }
   */
}

/**
 * CRUD style DB function for fundraiser_tracking.
 */
function _fundraiser_delete_tracking($nid) {
  /**
   * Code commented out on 2/18/2016 by pcave for performance reasons.
   * When a donation form encounters significant traffic, updating a single row
   * in this table over and over during a request can cause lock contentions.
   * This eventually cascades to other database operations thus slowing down
   * the entire response.
   *
   * db_delete('fundraiser_tracking')->condition('nid', $nid)->execute();
   */
}

/**
 * DB function for updating the stats in fundraiser_tracking.
 */
function _fundraiser_update_tracking_value($nid, $field) {
   /**
   * Code commented out on 2/18/2016 by pcave for performance reasons.
   * When a donation form encounters significant traffic, updating a single row
   * in this table over and over during a request can cause lock contentions.
   * This eventually cascades to other database operations thus slowing down
   * the entire response.
   *
   * $tracking = _fundraiser_get_tracking_by_nid($nid);
   * // No tracking data? Create one.
   * if (!$tracking) {
   *   $tracking = new stdClass();
   *   $tracking->nid = $nid;
   *   _fundraiser_create_tracking($tracking);
   *   $tracking = _fundraiser_get_tracking_by_nid($nid);
   * }
   * // Check to make sure we weren't handed a non-existing track.
   * if (isset($tracking->$field)) {
   *   $tracking->$field++;
   *   _fundraiser_update_tracking($tracking);
   * }
   */
  }

/**
 * Implements hook_webform_token_selector_blacklist_alter().
 *
 * Filter out credit card webform components.
 * Note: this replaces _fundraiser_field_blacklist().
 */
function fundraiser_webform_token_selector_blacklist_alter(&$tokens) {
  // These fields may or may not even have a value depending on the user's selected form of submission.
  // So this may not be a viable solution anymore.
  $fundraiser_blacklist = array(
    'card_number',
    'card_cvv',
    'recurs_monthly',
    'card_expiration_month',
    'card_expiration_year',
  );
  $tokens = array_merge($fundraiser_blacklist, $tokens);
}

/**
 * Implements hook_cron().
 *
 * Needed for gateway test mode status check.
 */
function fundraiser_cron() {
  if (module_exists("rules")) {
    $rule = rules_config_load('rules_gateway_test_mode_alert');
    if (!empty($rule->active) && in_array('fundraiser_gateway_test_mode_detected', $rule->events())) {
      fundraiser_gateway_status_check();
    }
  }
}

/**
 * Test to see if a published donation form's gateway is non-live.
 *
 * Send alert to admin if so.
 */
function fundraiser_gateway_status_check() {
  $bad_gateways = array();
  $gateways = _fundraiser_gateway_info();
  // Grab all fundraiser nodes along with publication status.
  $fundraisers = db_query('SELECT f.nid, f.gateways, n.status FROM {fundraiser} f INNER JOIN {node} n on n.nid = f.nid');

  foreach ($fundraisers as $fundraiser) {
    $fundraiser->gateways = unserialize($fundraiser->gateways);
    foreach($fundraiser->gateways as $type => $gateway) {
      $global_status = FALSE;
      if (!empty($gateway['id']) && $gateway['status'] == 1) {
        //grab the rules_config settings
        $fundraiser->gateways[$type]['gateway_details'] = isset($gateways[$gateway['id']]['gateway_details']) ? $gateways[$gateway['id']]['gateway_details'] : FALSE;
        //detect disabled or unconfigured gateways
        if ($fundraiser->gateways[$type]['gateway_details'] === FALSE) {
          $global_status = array('disabled');
        }
        else if (empty($fundraiser->gateways[$type]['gateway_details']['settings'])) {
          $global_status = array('unconfigured');
        }

        if (empty($global_status)) {
          $status = module_invoke_all("fundraiser_gateway_status_cron_check", $fundraiser->gateways[$type]['gateway_details']);
          if (!empty($status)) {
            $global_status = $status;
          }
        }
        //set up the token values for the alert
        if ($fundraiser->status == 1 &&  !empty($global_status[0]) && $global_status[0] != 'live') {
          $bad_gateways[$gateway['id']]['status'] = $global_status[0];
          $bad_gateways[$gateway['id']]['urls'][] = url('node/' . $fundraiser->nid, array('absolute' => TRUE));
          $bad_gateways[$gateway['id']]['type'] = $type;
        }
      }
    }
  }
  //build the info
  foreach ($bad_gateways as $id => $gateway) {
    //prepare the node urls for tokens
    $nodes = implode("\n\r", $gateway['urls']);
    //get the edit link for token
    $pos = strpos($id, '|');
    if ($pos !== FALSE) {
      $name = substr($id, $pos + 1);
      $edit_link = url('admin/commerce/config/payment-methods/manage/' . $name, array('absolute' => TRUE));
    }
    else {
      //this may never happen. but  you never know.
      $edit_link = t('(There was a problem determining the correct link. See below for additional info.)');
    }
    _fundraiser_gateway_status_alert($nodes, $gateway['type'], $id, $gateway['status'], $edit_link);
  }
}

function _fundraiser_gateway_status_alert($nodes, $method_type, $gateway_id, $status, $edit_link) {
  if (module_exists("rules")) {
    rules_invoke_event("fundraiser_gateway_test_mode_detected", $nodes, $method_type, $gateway_id, $status, $edit_link);
    watchdog('fundraiser', 'A test mode gateway configuration has been detected on a live donation form. Gateway: %gateway. Type: %type, Donation forms: %nodes', array('%gateway' => $gateway_id, '%type' => $method_type, '%nodes' => $nodes), WATCHDOG_EMERGENCY);

  }
}

/**
 * Log that a donation has processed and some other details for Log Analysis.
 *
 * @param object $donation
 *   The donation object.
 * @param array $log
 *   Additional log details, should include start/end times, and the type of transaction: charge, refund.
 */
function fundraiser_log_donation_processing($donation, $log = array()) {
  // Calculate the execution time.
  $exec_time = round($log['end'] - $log['start'], 4);

  // Setup the gateway details, the gateway name and config (rule name) are contained in the id.
  list($gateway, $gateway_config) = explode('|', $donation->gateway['id']);

  $pieces = array(
    'datetime',
    'category',
    'unique_transaction_id',
    'client_identifier',
    'payment_gateway',
    'payment_gateway_config',
    'transaction_type',
    'transaction_total_exec_time',
    'donation_value',
    'donation_currency',
    'country',
    'origin_ip',
    'success',
    'reference_charge',
  );

  $message = '|%' . implode('|%', $pieces);

  $variables = array(
    '%datetime' => date('c', $log['start']),
    '%category' => 'INFO',
    '%unique_transaction_id' => $donation->did,
    '%client_identifier' => $donation->uid,
    '%payment_gateway' => $gateway,
    '%payment_gateway_config' => $gateway_config,
    '%transaction_type' => $log['transaction_type'],
    '%transaction_total_exec_time' => $exec_time,
    '%donation_value' => !empty($donation->donation['amount']) ? $donation->donation['amount'] : '0.00',
    '%donation_currency' => !empty($donation->donation['currency']['code']) ? $donation->donation['currency']['code'] : 'N/A',
    '%country' => !empty($donation->donation['country']) ? $donation->donation['country'] : 'N/A',
    '%origin_ip' => ip_address(),
    '%success' => isset($donation->result['success']) ? (int) $donation->result['success'] : 0,
    '%reference_charge' => isset($donation->reference_charge) ? (int) $donation->reference_charge : 0,
  );

  watchdog('fundraiser_donation_tracker', $message, $variables, WATCHDOG_INFO);
}

/**
 * Clean up the input for an amount field.
 *
 * @param string $amount
 *   The amount entered from the submission.
 *
 * @return string
 *   The input amount stripped of any values other than a decimal point.
 */
function _fundraiser_amount_value_sanitize($amount) {
  return preg_replace('/[^\d\.]/i', '', $amount);
}

/**
 * Implements hook_springboard_node_expire_expiration_message().
 */
function fundraiser_springboard_node_expire_node_view_alter(&$node) {
  $node->content['webform']['#access'] = FALSE;
}

/**
 * Returns a form for updating billing information.
 *
 * @param array $form
 *   The form.
 * @param array &$form_state
 *   The form state.
 * @param array $data
 *   An array of data values:
 *   - "update billing": (boolean|optional) TRUE if you want this module to
 *   handle the validation and updating of billing information. If FALSE, the
 *   module calling this function is expected to handle the billing updating
 *   information itself.
 *   - "update cardonfile": (boolean|optional) TRUE if you would like to
 *   automatically add the necessary validation and submission handlers for
 *   updating a cardonfile card.
 *   - "card": (object|optional) The card object used to update the cardonfile
 *   card record. Useful if you want to override the card that will be updated
 *   as determined by $form_state['card'].
 *   - "calling module": (string|optional) The name of the module calling this
 *   function. Required if you would like to use the more granular preprocess,
 *   alter, and postprocess hooks called by this function.
 *   - "donation": (object|required) The donation object.
 *   - "payment fields": (array|optional) A form render array which will replace
 *   the "payment fields".
 *
 * @return array
 *   The form element.
 */
function fundraiser_update_billing_form($form, &$form_state, $data) {
  // Merge defaults with $data.
  $defaults = array(
    'update billing' => TRUE,
    'update cardonfile' => TRUE,
    'calling module' => 'fundraiser',
    'donation' => NULL,
    'card' => NULL,
  );
  $data = array_replace_recursive($defaults, $data);

  // Allow other modules to stop the process if something doesn't meet one of
  // their conditions. If return value is empty, we assume we can continue.
  // Otherwise we expect a form render array to return to the calling method.
  $functions = array(
    'fundraiser_update_billing_form_preprocess',
  );
  // If the 'calling module' array element is set, also provide a more granular
  // hook for modules to hook into. This granular hook name will be
  // `fundraiser_update_billing_form__{calling module}__preprocess`.
  if (isset($data['calling module']) && !empty($data['calling module'])) {
    $functions[] = sprintf('fundraiser_update_billing_form__%s__preprocess', $data['calling module']);
  }
  foreach ($functions as $function) {
    $continue = module_invoke_all($function, $form, $form_state, $data);
    if (!empty($continue)) {
      return $continue;
    }
  }

  $fundraiser_path = drupal_get_path('module', 'fundraiser');
  $form['#attached']['js'] = array(
    $fundraiser_path . '/js/jquery.alphanumeric.min.js',
    $fundraiser_path . '/js/jquery.validate.min.js',
    $fundraiser_path . '/js/donation_validation.js',
  );

  // Add the validation configuration settings array.
  $form_validation_js = _fundraiser_donation_form_js_validation_config($data['donation']->node);
  if (!empty($form_validation_js)) {
    $form['#attached']['js'][] = array(
      'data' => array('fundraiser' => array('js_validation_settings' => $form_validation_js)),
      'type' => 'setting',
    );
  }

  $form['#attributes']['class'][] = 'fundraiser-donation-form';
  $form['uid'] = array(
    '#type' => 'hidden',
    '#value' => $data['donation']->uid,
  );

  $field_info = _fundraiser_field_info();
  // The parts we need to allow for updating: donor info, billing and credit
  // card.
  $form['billing_information'] = array(
    '#type' => 'fieldset',
    '#title' => t('Billing Address'),
    '#attributes' => array('id' => 'billing-address'),
  );
  $billing_fields = array_merge($field_info['donor_information'], $field_info['billing_information']);
  foreach (element_children($billing_fields) as $field_key) {
    $field = $billing_fields[$field_key];
    $form['billing_information'][$field_key] = _fundraiser_create_field_from_info($field_key, $field, $data['donation']->donation);
  }

  // CC info.
  $form['payment_method'] = array(
    '#type' => 'hidden',
    '#value' => $data['donation']->donation['payment_method'],
  );
  $form['payment_fields'] = array(
    '#type' => 'fieldset',
    '#title' => 'Payment Information',
    '#attributes' => array('id' => 'credit-card-info'),
    '#tree' => TRUE,
  );
  $form['payment_fields'][$data['donation']->donation['payment_method']] = array(
    '#type' => 'fieldset',
    '#attributes' => array('id' => 'credit-card-info'),
  );

  // Pull the gateway form from the donation gateway.
  // Once set a gateway CANNOT be changed on a donation series.
  // Check against the gateway config for a specific form to go with this
  // payment gateway.
  if (isset($data['donation']->gateway['form callback'])) {
    $form_func = $data['donation']->gateway['form callback'];
    if (function_exists($form_func)) {
      $form['payment_fields'][$data['donation']->donation['payment_method']] += $form_func($data['donation']->donation['payment_method']);
    }
  }

  $form_state['op'] = 'update';

  $form['actions']['submit']['#type'] = 'submit';
  $form['actions']['submit']['#value'] = t('Save changes');
  $form['#validate'] = array();

  $form['#donation'] = $data['donation'];

  // Make the card number and cvv optional by default.
  $form['#attached']['js'][3]['data']['fundraiser']['js_validation_settings']['card_cvv']->required = FALSE;
  $form['#attached']['js'][3]['data']['fundraiser']['js_validation_settings']['card_number']->required = FALSE;

  if (!empty($data['card'])) {
    $form_state['card'] = $data['card'];
  }

  // If the "update cardonfile" element is non-empty, add the cardonfile
  // validation and submission handlers.
  if ($data['update cardonfile']) {
    $use_cardonfile = FALSE;
    if (!empty($data['card'])) {
      $use_cardonfile = TRUE;
    }
    elseif (($card = _fundraiser_donation_cardonfile_card($data['donation'])) !== FALSE) {
      $form_state['card'] = $data['card'] = $card;
      $use_cardonfile = TRUE;
    }

    if ($use_cardonfile) {
      // Using this instead of form_load_include because if this function isn't
      // called from a form constructor (fundraiser_sustainers), the include
      // isn't included.
      $form_state['build_info']['files']["commerce_cardonfile:includes/commerce_cardonfile.pages.inc"] = array(
        'type' => 'inc',
        'module' => 'commerce_cardonfile',
        'name' => 'includes/commerce_cardonfile.pages',
      );
      $form['#validate'][] = '_fundraiser_update_billing_form_commerce_cardonfile_card_form_alter_validate';
      $form['#validate'][] = 'commerce_cardonfile_card_form_validate';
      $form['actions']['submit']['#submit'][] = '_fundraiser_update_billing_form_commerce_cardonfile_card_form_submit';
    }
    elseif (empty($cardonfile)) {
      if (!function_exists('_fundraiser_commerce_credit_card_pane_values')) {
        module_load_include('module', 'fundraiser_commerce');
      }

      $stored_card = _fundraiser_commerce_credit_card_pane_values($data['donation']);

      if (empty($stored_card)) {
        drupal_set_message(t("A request to access a cardonfile card was made but either no matching card was available, or the card's gateway does not support the cardonfile module."), 'warning', FALSE);
      }
      else {
        $data['payment_fields']['credit']['expiration_date']['card_expiration_month']['#default_value'] = $stored_card['credit_card']['exp_month'];
        $data['payment_fields']['credit']['expiration_date']['card_expiration_year']['#default_value'] = $stored_card['credit_card']['exp_year'];
      }
    }
  }

  // Set any payment information from the $data variable.
  if (isset($data['payment_fields'])) {
    $form['payment_fields'] = array_replace_recursive($form['payment_fields'], $data['payment_fields']);
  }

  if (empty($form_state['donation'])) {
    $form_state['donation'] = $data['donation'];
  }

  // Allow other modules to make any further alterations to this form before we
  // finish with our own stuff.
  $functions = array(
    'fundraiser_update_billing_form',
  );
  if (!empty($data['calling module'])) {
    $functions[] = sprintf('fundraiser_update_billing_form__%s_', $data['calling module']);
  }
  foreach ($functions as $function) {
    drupal_alter($function, $form, $form_state, $data);
  }

  // If the "update billing" element is non-empty, add validation and submission
  // handlers that will validate and update the billing information. This
  // defaults to TRUE and is only FALSE if the calling module will handle this
  // itself.
  if ($data['update billing']) {
    $form['#validate'][] = 'fundraiser_update_billing_form_validate';
    $form['actions']['submit']['#submit'][] = 'fundraiser_update_billing_form_submit';
  }

  $form['#calling_module'] = empty($data['calling module']) ? 'fundraiser' : $data['calling module'];
  fundraiser_display_form_fields(empty($data['calling module']) ? 'fundraiser' : $data['calling module'], $form, $form_state);

  // And finally, call a post process hook for any modules that want to alter
  // the final output of the form, knowing we won't alter anything they do from
  // here on out.
  $functions = array(
    'fundraiser_update_billing_form_postprocess',
    sprintf('fundraiser_update_billing_form__%s__postprocess', $data['calling module']),
  );
  foreach ($functions as $function) {
    if (count(module_implements($function))) {
      $form = module_invoke_all($function, $form, $form_state, $data);
    }
  }

  return $form;
}

/**
 * Validation handler for commerce_cardonfile handling.
 *
 * Sets some array elements so the cardonfile module can correctly validate and
 * submit.
 *
 * @see fundraiser_quick_donate_form_commerce_cardonfile_card_form_alter
 */
function _fundraiser_update_billing_form_commerce_cardonfile_card_form_alter_validate(&$form, &$form_state) {
  $input = $form_state['input'];
  $values = &$form_state['values'];

  $card = $form_state['card'];
  // Ensure card number and cvv are set if expiration is changed.
  if ($card->card_exp_month != $values['payment_fields']['credit']['expiration_date']['card_expiration_month'] || $card->card_exp_year != $values['payment_fields']['credit']['expiration_date']['card_expiration_year']) {
    if (empty($values['payment_fields']['credit']['card_number'])) {
      form_set_error('payment_fields][credit][card_number', t('Please verify your card number to change the expiration date.'));
    }
    if (empty($values['payment_fields']['credit']['card_cvv'])) {
      form_set_error('payment_fields][credit][card_cvv', t('Please verify your card CVV to change the expiration date.'));
    }
  }

  $values['credit_card']['owner'] = $input['first_name'] . ' ' . $input['last_name'];
  $values['credit_card']['exp_month'] = $values['payment_fields']['credit']['card_expiration_month'] = $values['payment_fields']['credit']['expiration_date']['card_expiration_month'] = sprintf('%02d', $input['payment_fields']['credit']['expiration_date']['card_expiration_month']);
  $values['credit_card']['exp_year'] = $values['payment_fields']['credit']['expiration_date']['card_expiration_year'] = $values['payment_fields']['credit']['card_expiration_year'] = $input['payment_fields']['credit']['expiration_date']['card_expiration_year'];

  $form['credit_card']['number']['#default_value'] = $form_state['card']->card_number;
  if (!empty($values['payment_fields']['credit']['card_number'])) {
    $_SESSION['card_number'] = $values['credit_card']['number'] = $values['payment_fields']['credit']['card_number'];
  }
  else {
    $_SESSION['card_number'] = $values['credit_card']['number'] = $values['payment_fields']['credit']['card_number'] = $form_state['card']->card_number;
  }

  $form['credit_card']['code'] = $values['payment_fields']['credit']['card_cvv'];
  $values['credit_card']['cardonfile_instance_default'] = $form_state['card']->instance_default;
}

/**
 * Submit callback for fundraiser_update_billing_form().
 *
 * Copy of commerce_cardonfile_card_form_submit() from commerce_cardonfile.pages
 * .inc, needed to support some functionality for the billing update form.
 *
 * @see commerce_cardonfile_card_form_submit()
 */
function _fundraiser_update_billing_form_commerce_cardonfile_card_form_submit($form, &$form_state) {
  $op = $form_state['op'];
  $card = $form_state['card'];
  $values = $form_state['values'];

  $card->card_name = $form_state['values']['credit_card']['owner'];
  $card->card_exp_month = $form_state['values']['credit_card']['exp_month'];
  $card->card_exp_year = $form_state['values']['credit_card']['exp_year'];
  if ($op == 'create') {
    $card->card_number = substr($form_state['values']['credit_card']['number'], -4);
    $card->card_type = $form_state['values']['credit_card']['type'];
  }
  $card->instance_default = $form_state['values']['credit_card']['cardonfile_instance_default'];

  // Invoke the payment method's card create/update callback.
  $payment_method = commerce_payment_method_instance_load($card->instance_id);
  $callback = $payment_method['cardonfile'][$op . ' callback'];
  $success = FALSE;

  // If updating and CC number is empty, mark $success as TRUE since the
  // callback function shouldn't be called.
  if ($op == 'update' && (empty($values['credit_card']['number']) || $values['credit_card']['number'] == $card->card_number)) {
    $success = TRUE;
  }

  if (function_exists($callback) && !$success) {
    $callback_return = $callback($form, $form_state, $payment_method, $card);
    if ($callback_return) {
      if ($op == 'create') {
        $card_save = $callback_return;
        $confirm_message = t('A new card has been added.');
      }
      else {
        // Re-set the card type if the number changed.
        $card->card_type = commerce_payment_validate_credit_card_type($values['credit_card']['number'], array_keys(commerce_payment_credit_card_types()));

        $card_save = $card;
        $confirm_message = t('The card has been updated.');
      }

      commerce_cardonfile_save($card_save);
      drupal_set_message($confirm_message);
      $form_state['values']['cardonfile']['old_card'] = clone $card;
      $form_state['values']['cardonfile']['card'] = $card_save;
      $success = TRUE;
    }
  }

  if (!$success) {
    if ($op == 'create') {
      drupal_set_message(t('We encountered an error attempting to save your card data. Please try again and contact us if this error persists.'), 'error');
    }
    else {
      drupal_set_message(t('We encountered an error attempting to update your card data. Please try again and contact us if this error persists.'), 'error');
    }
  }
  $form_state['redirect'] = 'user/' . $card->uid . '/cards';
}

/**
 * Afterbuild for the billing form.
 */
function fundraiser_update_billing_form_after_build($form, &$form_state) {
  return fundraiser_donation_form_after_build($form, $form_state);
}

/**
 * Form validation handler for billing address update form.
 */
function fundraiser_update_billing_form_validate($form, &$form_state) {
  $submission_fields = $form_state['values'];
  $errors = fundraiser_validate_form_fields($form, $form_state, $submission_fields);

  if (form_get_errors() || $errors) {
    drupal_set_message(t('Unable to update credit card information.'));
  }
}

/**
 * Form submit handler for billing address update form.
 */
function fundraiser_update_billing_form_submit($form, &$form_state) {
  $donation = $form['#donation'];
  $submission_fields = $form_state['values'];
  $donation->donation = array_merge($donation->donation, $submission_fields);
  $donation->update_billing = TRUE;
  $donation->update_payment = TRUE;
  fundraiser_donation_update($donation);
}
