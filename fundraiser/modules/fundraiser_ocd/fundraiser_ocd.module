<?php
/**
 * @file
 * Module file for fundraiser_ocd.
 */

define('FUNDRAISER_OCD_DEFAULT_FORM_PREFIX', 'fundraiser_ocd_default_form_');

require_once 'includes/fundraiser_ocd.fundraiser.inc';
require_once 'includes/fundraiser_ocd.node_form.inc';
require_once 'includes/fundraiser_ocd.springboard_hmac.inc';

/**
 * Implements hook_menu().
 */
function fundraiser_ocd_menu() {
  $items = array();

  $items['admin/springboard/options/fundraiser/fundraiser_ocd'] = array(
    'title' => 'One-Click Donate Settings',
    'description' => 'Settings for one-click donations.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fundraiser_ocd_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer ocd configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/fundraiser_ocd.admin.inc',
  );

  $items['admin/springboard/options/fundraiser/fundraiser_ocd/autocomplete'] = array(
    'title' => 'Autocomplete for One-Click Donation forms',
    'page callback' => 'fundraiser_ocd_admin_settings_autocomplete_callback',
    'access arguments' => array('use autocomplete'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/fundraiser_ocd.admin.inc',
  );

  $items['admin/springboard/options/fundraiser/fundraiser_ocd/card_ids_by_uid'] = array(
    'title' => 'Autocomplete for fetching card ids associated with a user',
    'page callback' => '_fundraiser_ocd_admin_get_card_ids_by_uid',
    'access arguments' => array('use autocomplete'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/fundraiser_ocd.admin.inc',
  );

  // HMAC token generator page.
  $items['admin/config/system/fundraiser/ocd/token-generator'] = array(
    'title' => 'One-Click Donate Token Generator',
    'description' => 'Generate one-click donate HMAC tokens for testing or use',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fundraiser_ocd_token_generator'),
    'access arguments' => array('administer fundraiser ocd'),
    'file' => 'includes/fundraiser_ocd.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_springboard_admin_admin_menu_items_alter().
 */
function fundraiser_ocd_springboard_admin_admin_menu_items_alter(&$items) {
  // Settings > Settings > Sustainer Upsell.
  $items['admin/springboard/settings']['_children']['admin/springboard/settings/config']['_children']['admin/springboard/options/fundraiser/fundraiser_ocd'] = array(
    'link_path' => 'admin/springboard/options/fundraiser/fundraiser_ocd',
    'link_title' => 'One-Click Donate Settings',
    'menu_name' => 'springboard_admin_menu',
    'expanded' => 0,
    'customized' => 1,
    'weight' => 0,
  );
}

/**
 * Implements hook_FORM_ID_alter().
 *
 * Used to add a one-click donation related message.
 */
function fundraiser_ocd_form_user_login_alter(&$form, &$form_state) {
  drupal_session_start();
  $destination = drupal_get_destination();
  if (isset($_SESSION['ocd']) && $_SESSION['ocd'] && !empty($destination)) {
    $destination = $destination['destination'];
    $form['#prefix'] = t("Please login to verify your identity. Or if you'd prefer, you may !proceed.", array(
      '!proceed' => l(t('proceed to the full donation form'), $destination),
    ));
  }
}

/**
 * Implements hook_node_load().
 */
function fundraiser_ocd_node_load($nodes, $types) {
  $fundraiser_types = fundraiser_get_donation_types();
  $fundraiser_types = array_filter($fundraiser_types);
  $fundraiser_types = array_keys($fundraiser_types);
  if (!array_intersect($fundraiser_types, $types)) {
    return;
  }

  foreach ($nodes as $nid => $node) {
    _fundraiser_ocd_attach_ocd_fields($nodes[$nid]);
  }
}

/**
 * Implements hook_node_prepare().
 */
function fundraiser_ocd_node_prepare($node) {
  if (!fundraiser_is_donation_type($node->type)) {
    return;
  }

  _fundraiser_ocd_attach_ocd_fields($node);
}

/**
 * Helper function to attach one-click donation settings to a node.
 *
 * @param object $node
 *   The node object.
 *
 * @return object
 *   The modified node object.
 */
function _fundraiser_ocd_attach_ocd_fields(&$node) {
  // Return early if node already has one-click information.
  if (isset($node->ocd)) {
    return array();
  }

  if (!isset($node->nid) || empty($results = db_query('SELECT ocd_optin_message_new_user, ocd_help_message_new_user_format, ocd_help_message_new_user, ocd_optin_message_existing_user, ocd_help_message_existing_user_format, ocd_help_message_existing_user, ocd_login_message, ocd_login_link_message FROM {fundraiser_ocd} WHERE fundraiser_nid = :nid', array(
    ':nid' => $node->nid,
  ))->fetchAssoc())) {
    // Set default values.
    $results = array(
      'ocd_optin_message_new_user' => variable_get('fundraiser_ocd_default_optin_message_new_user', 'Save this @type for future use?'),
      'ocd_help_message_new_user_format' => 'filtered_html',
      'ocd_help_message_new_user' => variable_get('fundraiser_ocd_default_help_message_new_user', 'Save your @type details and donate faster next time. We may email you from time to time with one-click donate opportunities. You can update your @type details or cancel your enrollment at any time.'),
      'ocd_optin_message_existing_user' => variable_get('fundraiser_ocd_default_optin_message_existing_user', 'Update your saved @type?'),
      'ocd_help_message_existing_user_format' => 'filtered_html',
      'ocd_help_message_existing_user' => variable_get('fundraiser_ocd_default_help_message_existing_user', 'Check this box if you want to make this new @type your default for future donations.'),
      'ocd_login_message' => variable_get('fundraiser_ocd_default_login_message', t('Already have a saved @type?')),
      'ocd_login_link_message' => variable_get('fundraiser_ocd_default_login_link_message', t('Click here to login')),
      'ocd' => FALSE,
    );
  }
  else {
    $results['ocd'] = TRUE;
  }

  foreach ($results as $key => $result) {
    $node->{$key} = $result;
  }

  return $node;
}

/**
 * Implements hook_node_insert().
 */
function fundraiser_ocd_node_insert($node) {
  if (!empty($node->ocd)) {
    $fields = array(
      'fundraiser_nid' => $node->nid,
      'ocd_optin_message_new_user' => $node->ocd_optin_message_new_user,
      'ocd_help_message_new_user' => !is_array($node->ocd_help_message_new_user) ? $node->ocd_help_message_new_user : $node->ocd_help_message_new_user['value'],
      'ocd_help_message_new_user_format' => isset($node->ocd_help_message_new_user_format) ? $node->ocd_help_message_new_user_format : $node->ocd_help_message_new_user['format'],
      'ocd_optin_message_existing_user' => $node->ocd_optin_message_existing_user,
      'ocd_help_message_existing_user' => !is_array($node->ocd_help_message_existing_user) ? $node->ocd_help_message_existing_user : $node->ocd_help_message_existing_user['value'],
      'ocd_help_message_existing_user_format' => isset($node->ocd_help_message_existing_user_format) ? $node->ocd_help_message_existing_user_format : $node->ocd_help_message_existing_user['format'],
      'ocd_login_message' => $node->ocd_login_message,
      'ocd_login_link_message' => $node->ocd_login_link_message,
    );

    db_merge('fundraiser_ocd')
      ->key(array('fundraiser_nid' => $fields['fundraiser_nid']))
      ->fields($fields)
      ->execute();
  }
}

/**
 * Implements hook_node_delete().
 */
function fundraiser_ocd_node_delete($node) {
  if (!empty($node->ocd)) {
    db_delete('fundraiser_ocd')
      ->condition('fundraiser_nid', $node->nid)
      ->execute();
  }
}

/**
 * Implements hook_payment_method_fields_alter().
 */
function fundraiser_ocd_payment_method_fields_alter(&$element, &$payment_method, &$context) {
  if (array_key_exists('bank_name', $element)) {
    $keys = array(
      'bank_name' => array(),
      'routing_number' => array(),
      'account_number' => array(),
      'confirm_account_number' => array(),
      'account_type' => array(),
    );
  }
  else {
    $keys = array(
      'card_number' => array(),
      'expiration_date' => array(
        'card_expiration_year' => array(),
      ),
      'card_cvv' => array(),
      'card_type' => array(),
    );
  }

  // The way this is set up in fundraiser_commerce, it assumes that all payment
  // fields will be required. We need to change that by copying the #states
  // value in the parent element to each applicable child element, then unset
  // the #states element in the parent.
  _fundraiser_ocd_payment_method_fields_alter_states($element['#states'], $keys, $element);

  $element['ocd'] = array(
    '#type' => 'hidden',
    '#value' => FALSE,
    '#states' => array(
      'visible' => $element['#states']['visible'],
    ),
  );
  unset($element['ocd']['#states']['required']);
  unset($element['#states']['required']);
}

/**
 * Helper function to update the #states property based on provided keys.
 *
 * @param array $states
 *   The original #states value to copy to the each key in $keys.
 * @param array $keys
 *   A multi-dimensional array specifying the keys of the element children to
 *   copy the states for.
 * @param array $element
 *   The form element array.
 */
function _fundraiser_ocd_payment_method_fields_alter_states($states, $keys, &$element) {
  foreach ($keys as $key => $value) {
    if (count($value)) {
      _fundraiser_ocd_payment_method_fields_alter_states($states, $value, $element[$key]);
    }
    else {
      $element[$key]['#states'] = $states;
    }
  }
}

/**
 * Implements hook_webform_user_save_profile_map_alter().
 */
function fundraiser_ocd_webform_user_save_profile_map_alter(&$account, $form, $form_state) {
  if (empty($form['#node']->type) || !fundraiser_is_donation_type($form['#node']->type)) {
    return;
  }

  $values = $form_state['values']['submitted_tree']['payment_information'];
  if (isset($form['#node']->ocd) && $form['#node']->ocd && $values['payment_fields'][$values['payment_method']]['ocd']) {
    $account->field_ocd_opt_in = array(
      LANGUAGE_NONE => array(
        0 => array(
          'value' => date("Y-m-d H:i:s"),
          'timezone' => drupal_get_user_timezone(),
          'timezone_db' => 'UTC',
          'date_type' => 'datetime',
        ),
      ),
    );
    // If there was an opt-out date previously, reset it now.
    $account->field_ocd_opt_out = array(
      LANGUAGE_NONE => array(
        0 => NULL,
      ),
    );
  }
}

/**
 * Implements hook_webform_user_profile_fields_alter().
 *
 * Used to remove the user profile field for one-click donations from webform
 * components, which is a date field. Replaced with a flag in
 * fundraiser_ocd_fundraiser_field_info_alter().
 */
function fundraiser_ocd_webform_user_profile_fields_alter(&$fields, $node) {
  $fields = array_filter($fields, function($value) {
    return ($value['name'] != 'field_ocd_opt_in' && $value['name'] != 'field_ocd_opt_out');
  });
}

/**
 * Implements hook_fundraiser_field_info().
 *
 * Used to add a webform component for one-click donations.
 */
function fundraiser_ocd_fundraiser_field_info_alter(&$fields) {
  $fields['ocd_opt_in'] = array(
    '#type' => 'hidden',
    '#name' => 'sbp_ocd_opt_in',
    '#title' => 'One-Click Donate Opt-in',
  );
  $fields['ocd_opt_out'] = array(
    '#type' => 'hidden',
    '#name' => 'sbp_ocd_opt_out',
    '#title' => 'One-Click Donate Opt-out',
  );
  return $fields;
}

/**
 * Implements hook_fundraiser_commerce_cardonfile_update_billing_cardid_alter().
 */
function fundraiser_ocd_fundraiser_commerce_cardonfile_update_billing_card_alter(&$card) {
  // Ensure we use the correct card_id for one-click donation records.
  $ocd = _fundraiser_ocd_get_payment_info_for_card_id($card->card_id, FALSE);
  if (!empty($ocd)) {
    $card = commerce_cardonfile_load($ocd['card_id']);
  }
}

/**
 * Implements hook_fundraiser_update_billing_form_alter().
 *
 * Updates the billing update form on cardonfile card edit pages to redirect
 * back to the cards overview page.
 */
function fundraiser_ocd_fundraiser_update_billing_form_postprocess($form, $form_state) {
  $form['actions']['submit']['#submit'][] = '_fundraiser_ocd_check_ocd_default';
  return $form;
}

/**
 * Submit handler to check if the one-click donate card needs to be updated.
 */
function _fundraiser_ocd_check_ocd_default($form, $form_state) {
  $values = $form_state['values'];
  $donation = $form_state['donation'];

  if (empty($values['cardonfile'])) {
    return;
  }

  $old_card = $values['cardonfile']['old_card'];
  $card = $form_state['card'];
  if (!empty($values['cardonfile']['card'])) {
    $card = $values['cardonfile']['card'];
  }

  // If the card number is the same, don't do anything.
  if ($old_card->card_number == $card->card_number) {
    return;
  }

  $cardonfile_fields = array(
    'card_number' => substr($values['credit_card']['number'], -4),
    'card_exp_month' => $values['credit_card']['exp_month'],
    'card_exp_year' => $values['credit_card']['exp_year'],
  ) + array('instance_id' => $donation->gateway['id'], 'uid' => $donation->uid);

  $new_card = _fundraiser_commerce_cardonfile_match($cardonfile_fields, TRUE);

  if (empty($new_card)) {
    return;
  }

  // If the card number has changed, we need to check if the card was QD enabled
  // and if so, set the new card to QD enabled and disable the old one.
  $ocd = db_query('SELECT * FROM {fundraiser_ocd_cardonfile} WHERE card_id = :card_id AND uid = :uid AND status = 1', array(
    ':card_id' => $card->card_id,
    ':uid' => $values['uid'],
  ))->fetch();

  if (empty($ocd)) {
    return;
  }

  db_update('fundraiser_ocd_cardonfile')
    ->fields(array(
      'status' => 0,
    ))
    ->condition('card_id', $card->card_id, '=')
    ->execute();
  db_merge('fundraiser_ocd_cardonfile')
    ->key(array('card_id' => $new_card->card_id))
    ->fields(array(
      'status' => 1,
      'uid' => $donation->uid,
      'optin_date' => $ocd->optin_date,
      'did' => $ocd->did,
      'ms' => $ocd->ms,
      'cid' => $ocd->cid,
      'nid' => $ocd->nid,
      'gateway' => $donation->gateway['id'],
    ))
    ->condition('card_id', $new_card->card_id, '=')
    ->execute();

  $user = user_load($donation->uid);
  module_invoke_all('fundraiser_ocd_optin_update', $user, $donation, $old_card, $new_card);
}

/**
 * Implements hook_fundraiser_update_billing_form_alter().
 *
 * Updates the billing update form on cardonfile card edit pages to redirect
 * back to the cards overview page.
 */
function fundraiser_ocd_fundraiser_update_billing_form__fundraiser_commerce_cardonfile__alter(&$form, $form_state) {
  $card = $form_state['card'];
  // If the gateway isn't configured for cardonfile, skip the one-click donate
  // feature.
  if (!empty($form['#donation']->gateway['gateway_details']['settings']['cardonfile'])) {
    $gateway_type = $form['#donation']->data['payment_method'];
    $enabled = db_query('SELECT card_id FROM {fundraiser_ocd_cardonfile} WHERE card_id = :card_id AND status = 1', array(
      ':card_id' => $card->card_id,
    ))->fetchField();

    $form['payment_fields'][$gateway_type]['ocd'] = array(
      '#type' => 'checkbox',
      '#title' => '&nbsp;' . t('Use this card for One-Click Donate'),
      '#default_value' => !!$enabled,
    );
  }

  $form['actions']['submit']['#submit'][] = '_fundraiser_ocd_set_new_ocd_cof';
}

/**
 * Submission handler to update {fundraiser_ocd_cardonfile}.
 *
 * Updated when user selects "Make this my default One-Click Donate card" on the
 * user's stored cards page.
 *
 * @see fundraiser_ocd_fundraiser_update_billing_form__fundraiser_ocd__alter()
 * @see fundraiser_update_billing_form()
 */
function _fundraiser_ocd_set_new_ocd_cof(&$form, &$form_state) {
  // If the gateway isn't set up to use cardonfile, return early.
  if (empty($form['#donation']->gateway['gateway_details']['cardonfile']) && empty($form['#donation']->gateway['gateway_details']['settings']['cardonfile'])) {
    return;
  }

  $values = $form_state['values'];
  $input = $form_state['input'];
  $card = $form_state['card'];
  if (!empty($values['cardonfile']['card'])) {
    $card = $values['cardonfile']['card'];
  }
  $donation = $form_state['donation'];

  // If the card number is different, don't do anything, and let the other
  // submission handler handle this.
  if (empty($values['cardonfile']['old_card']) || $values['cardonfile']['old_card']->card_number != $card->card_number) {
    return;
  }

  // Check if the expiration date changed. If it has and this is a recurring
  // series, we need to add the submission handler from the
  // fundraiser_sustainers module to the submission handler array.
  if (module_exists('fundraiser_sustainers') && property_exists($donation, 'recurring')) {
    $exp_month_match = $form['payment_fields']['credit']['expiration_date']['card_expiration_month']['#default_value'] == $form_state['input']['payment_fields']['credit']['expiration_date']['card_expiration_month'];
    $exp_year_match = $form['payment_fields']['credit']['expiration_date']['card_expiration_year']['#default_value'] == $form_state['input']['payment_fields']['credit']['expiration_date']['card_expiration_year'];
    if (!$exp_month_match || !$exp_year_match) {
      $form_state['values']['master_did'] = $donation->recurring->master_did;
      fundraiser_sustainers_update_billing_form_submit($form, $form_state);
    }
  }

  $payment_fields = $values['payment_fields'];
  $payment_method = $values['payment_method'];

  $disabling_ocd = !empty($form['payment_fields']['credit']['ocd']['#default_value']) && empty($values['payment_fields']['credit']['ocd']);
  $enabling_ocd = empty($form['payment_fields']['credit']['ocd']['#default_value']) && !empty($values['payment_fields']['credit']['ocd']);

  // If ocd is not true the user may be opting this card out.
  if ($disabling_ocd) {
    fundraiser_ocd_opt_out_card($values['uid'], $donation, $card->card_id);
    db_query('UPDATE {fundraiser_ocd_cardonfile} SET status = 0 WHERE card_id = :card_id', array(
      ':card_id' => $card->card_id,
    ));
    return;
  }
  elseif ($enabling_ocd) {
    $user = user_load($values['uid']);
    $did = NULL;

    // Check if the card has a corresponding record in
    // {fundraiser_ocd_cardonfile}, if it does just update that one.
    // Otherwise we'll need to create one.
    $results = db_query('SELECT card_id, did FROM {fundraiser_ocd_cardonfile} WHERE card_id = :card_id ORDER BY optin_date LIMIT 1', array(
      ':card_id' => $form_state['card']->card_id,
    ))->fetchAllKeyed();
    $did = reset($results);

    if (empty($results)) {
      // Need a node id, query the table for any pre-existing ones the user has
      // opted into.
      $nid = db_query('SELECT nid FROM {fundraiser_ocd_cardonfile} WHERE uid = :uid LIMIT 1', array(
        ':uid' => $values['uid'],
      ))->fetchField();

      // If the user isn't currently opted into any one-click donation forms,
      // select one from {fundraiser_ocd}.
      if (empty($nid)) {
        $nid = db_query('SELECT fundraiser_nid FROM {fundraiser_ocd} LIMIT 1')->fetchField();
      }

      // If no one-click donation forms exist, we'll need to exit prematurely.
      if (empty($nid)) {
        return;
      }

      // Select a donation ID to use based on the donation form ID we just
      // selected.
      $did = db_query('SELECT did FROM fundraiser_donation WHERE nid = :nid AND uid = :uid LIMIT 1', array(
        ':nid' => $nid,
        ':uid' => $values['uid'],
      ))->fetchField();

      // Set all existing cards to status=0.
      db_query('UPDATE {fundraiser_ocd_cardonfile} SET status = 0 WHERE uid = :uid', array(
        ':uid' => $values['uid'],
      ));

      // Add the opted in card.
      db_insert('fundraiser_ocd_cardonfile')
        ->fields(array(
          'uid' => $values['uid'],
          'status' => 1,
          'card_id' => $form_state['card']->card_id,
          'optin_date' => time(),
          'ms' => 'default_ms',
          'cid' => NULL,
          'nid' => $nid,
          'did' => $did,
          'gateway' => $form_state['card']->instance_id,
        ))
        ->execute();
    }
    else {
      db_query('UPDATE {fundraiser_ocd_cardonfile} SET status = 1, optin_date = :time WHERE card_id = :card_id', array(
        ':time' => time(),
        ':card_id' => $form_state['card']->card_id,
      ));
    }

    if (!empty($did)) {
      $donation = fundraiser_donation_get_donation($did);
      module_invoke_all('fundraiser_ocd_update_card', $user, $donation, $card);
    }
  }
}

/**
 * Returns a user's one-click donate card or FALSE if they have none.
 *
 * @param int $uid
 *   The id of the user whose one-click donate card you want to retreive.
 */
function fundraiser_ocd_get_default_card($uid) {
  return db_query('SELECT card_id FROM {fundraiser_ocd_cardonfile} WHERE status = 1 and uid = :uid', array(':uid' => $uid))->fetchField();
}

/**
 * Helper function to invoke a hook when a card is opted out of OCD.
 *
 * Whenever a card is taken out of QD eligility, either by explicit opting out
 * or by deletion, check if it was the QD default and if so make opt-out-related
 * updates.
 *
 * @param int $uid
 *   The user's uid.
 * @param object|int $card
 *   The card object or the card's id.
 *
 * @throws \Exception
 */
function fundraiser_ocd_opt_out_card($uid, $donation, $card) {
  // See if the user currently has a default card.
  $default_card = fundraiser_ocd_get_default_card($uid);
  if (is_numeric($card)) {
    $card = commerce_cardonfile_load($card);
  }
  $card_id = $card->card_id;

  if ($default_card && $default_card == $card_id) {
    // Update the user, setting the opt-out date.
    $account = user_load($uid);
    $account->field_ocd_opt_out = array(
      LANGUAGE_NONE => array(
        0 => array(
          'value' => date("Y-m-d H:i:s"),
          'timezone' => drupal_get_user_timezone(),
          'timezone_db' => 'UTC',
          'date_type' => 'datetime',
        ),
      ),
    );

    user_save($account);
    // Invoke one-click donate opt-out hook.
    module_invoke_all('fundraiser_ocd_optout', $account, $donation, $card);
  }
}

/**
 * Implements hook_entity_presave().
 *
 * If the 'card_number' session is set, we'll know that the card number is being
 * updated, and to update the cardonfile entity before it's saved.
 *
 * This function is needed because the cardonfile module doesn't tell us when
 * it's updating a card, or what the new card values are.
 */
function fundraiser_ocd_entity_presave($entity, $type) {
  $args = arg();
  if ($type == 'commerce_cardonfile' && isset($args[2]) && $args[2] == 'cards' && isset($_SESSION['card_number']) && strlen($_SESSION['card_number']) > 4) {
    $entity->card_number = substr($_SESSION['card_number'], -4);
    unset($_SESSION['card_number']);
  }
}

/**
 * Implements hook_entity_delete().
 */
function fundraiser_ocd_entity_delete($entity, $type) {
  if ($type == 'commerce_cardonfile') {
    $donation = fundraiser_donation_get_donations_by_uid($entity->uid, 1, 'DESC', NULL, $entity->card_id);
    fundraiser_ocd_opt_out_card($entity->uid, $donation, $entity);
    db_delete('fundraiser_ocd_cardonfile')->condition('card_id', $entity->card_id)->execute();
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Remove the One-Click Donate Opt In and Opt Out fields from appearing on the user
 * edit form.
 */
function fundraiser_ocd_form_user_profile_form_alter(&$form, $form_state) {
  unset($form['field_ocd_opt_in']);
  unset($form['field_ocd_opt_out']);
}

/**
 * Implements hook_webform_user_send_mail_alter().
 */
function fundraiser_ocd_webform_user_send_mail_alter(&$options) {
  if (empty($options['parameters'])) {
    return;
  }
  $params = $options['parameters'];

  // If the account password is already set, we can return early.
  if (!empty($params['account']->pass)) {
    return;
  }

  // Since this is coming from the webform_user module, and if this is a
  // One-Click Donation, set the email to send regardless of what the node's
  // settings are.
  if (isset($params['form_state']['values']['submitted_tree']['payment_information'])) {
    $payment_info = $params['form_state']['values']['submitted_tree']['payment_information'];
    if (isset($payment_info['payment_method']) && isset($payment_info['payment_fields'][$payment_info['payment_method']])) {
      $payment_method = $payment_info['payment_fields'][$payment_info['payment_method']];
      if (!empty($payment_method['ocd'])) {
        $options['send'] = TRUE;
      }
    }
  }
}

/**
 * Helper function to return the QD record for the specified card id.
 *
 * @param int $card_id
 *   The card ID.
 *
 * @return array
 *   The QD field record.
 */
function _fundraiser_ocd_get_payment_info_for_card_id($card_id, $status = TRUE) {
  $query = db_select('fundraiser_ocd_cardonfile', 'focdc')
    ->fields('focdc')
    ->condition('card_id', $card_id, '=');
  if ($status) {
    $query->condition('status', TRUE, '=');
  }
  return $query->execute()->fetchAssoc();
}

/**
 * Implements hook_fundraiser_commerce_cardonfile_used_by().
 *
 * Used to inform fundraiser_commerce_cardonfile if the card is used for
 * One-Click Donations.
 */
function fundraiser_ocd_fundraiser_commerce_cardonfile_used_by($card_id) {
  $result = _fundraiser_ocd_get_payment_info_for_card_id($card_id);
  if (empty($result)) {
    return;
  }
  return t('One-Click Donate');
}

/**
 * Implements hook_user_view_alter().
 *
 * Re-weight the profile fields so they appear in the correct order.
 */
function fundraiser_ocd_user_view_alter(&$build) {
  $ordered_fields = array(
    'first_name',
    'last_name',
    'address',
    'address_line_2',
    'city',
    'state',
    'country',
  );
  foreach ($ordered_fields as $weight => $field) {
    $build['sbp_' . $field]['#weight'] = $weight;
  }
  $build['summary']['#weight'] = $weight++;
}

/**
 * Implements hook_field_extra_fields_display_alter().
 *
 * Moves the summary field for the user profile so that it appears below every-
 * thing else.
 */
function fundraiser_ocd_field_extra_fields_display_alter(&$displays, $context) {
  if (!empty($displays['summary'])) {
    $displays['summary']['weight'] = 8;
  }
}
