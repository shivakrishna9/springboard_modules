<?php
/**
 * @file
 * Allows users to check an opt-in checkbox during donation submission to allow
 * their donation to be displayed publicly in a recent donations view block that
 * is automatically appended to the donation form.
 *
 * This also adds a setting to the node->edit->display settings vertical tab
 * which enables or disables this module on a node-specific basis and allows a
 * a minimum donation amount to be set before a donation will be displayed within
 * the recent donations block.
 */

define('FUNDRAISER_RECENT_DONORS_OPT_IN_FORM_KEY', 'recent_donors_list_optin');

/**
 * Implements hook_form_alter().
 *
 * Insert setting to toggle whether donors can opt-in to having their
 * donation displayed in the block of recent donors.
 *
 * Also adds the opt-in checkbox to donation forms where it has been enabled.
 */
function fundraiser_recent_donors_form_alter(&$form, &$form_state, $form_id) {
  if (!isset($form['#node']->type) || !fundraiser_is_donation_type($form['#node']->type)) {
    return;
  }

  $opt_in_enabled = FALSE;
  if (isset($form['#node']->nid)) {
    $opt_in_enabled = _fundraiser_recent_donors_opt_in_enabled($form['#node']->nid);
  }

  // Add the recent donors settings if this is a node edit form and not a ticketed event:
  $is_ticket_type = FALSE;
  if (function_exists('fundraiser_tickets_is_ticket_type') && fundraiser_tickets_is_ticket_type($form['#node']->type)) {
    $is_ticket_type = TRUE; 
  }
  if (strpos($form_id, '_node_form') !== FALSE && !$is_ticket_type) { 
    $form['springboard_display']['recent_donors_list'] = array(
      '#type' => 'fieldset',
      '#title' => t('Recent Donors List'),
      '#description' => t('Choose whether donors can opt-in to having their name display on this donation form.'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );

    // Display a helpful message about form layouts being required at the content type level if it is not enabled there:
    $form_layouts_is_enabled = variable_get('form_layouts_' . $form['#node']->type, 0);
    if (!$form_layouts_is_enabled && !$opt_in_enabled) {
      $type_settings_path = 'admin/structure/types/manage/' . str_replace('_', '-', $form['#node']->type);
      $type_name = node_type_get_name($form['#node']->type);
      $form['springboard_display']['recent_donors_list']['#description'] =
        t('The Recent Donors List requires Form Layouts to be enabled on the') . ' ' . $type_name . ' ' . t('content type settings form.');
      return;
    }

    $form['springboard_display']['recent_donors_list']['allow_recent_donations_opt_in'] = array(
      '#type' => 'checkbox',
      '#title' => t('Allow donors to opt-in and show the recent, opt-in donors list.'),
      '#default_value' => $opt_in_enabled,
      '#weight' => -4,
    );
    $show_greater_than = 0;
    if (isset($form['#node']->nid)) {
      $show_greater_than = _fundraiser_recent_donors_get_min_opt_in_donation_amount($form['#node']->nid);
    }

    // The currency for the "Only show donations greater than" is whatever the node's default currency setting is:
    $form['springboard_display']['recent_donors_list']['show_recent_donation_greater_than'] = array(
      '#type' => 'textfield',
      '#title' => t('Only show donations greater than'),
      '#default_value' => $show_greater_than,
      '#weight' => -3,
      '#states' => array(
        'disabled' => array(
          ':input[name="allow_recent_donations_opt_in"]' => array('checked' => FALSE),
        ),
        'enabled' => array(
          ':input[name="allow_recent_donations_opt_in"]' => array('checked' => TRUE),
        ),
      ),
    );

    // Adjust this field's HTML so prefic/suffix symbols are inline; add the symbols:
    $form['#attached']['js'][] =  drupal_get_path('module', 'fundraiser_recent_donors') . '/js/fundraiser_recent_donors.js';
    $form['#attached']['css'][] =  drupal_get_path('module', 'fundraiser_recent_donors') . '/css/fundraiser_recent_donors.css';
    $currency = fundraiser_get_currency_from_node($form['#node']);
    if ($currency['symbol_placement'] == 'before') { 
      $currency_symbol = '<span class="recent-donors-currency-symbol-before">' . $currency['symbol'] . '</span>';
      $form['springboard_display']['recent_donors_list']['show_recent_donation_greater_than']['#prefix'] = $currency_symbol;
    }
    else {
      $currency_symbol = '<span class="recent-donors-currency-symbol-after">' . $currency['symbol'] . '</span>';
      $form['springboard_display']['recent_donors_list']['show_recent_donation_greater_than']['#suffix'] = $currency_symbol;
    }
 
    $form['#validate'][] = '_fundraiser_recent_donors_node_edit_validate';
    $form['#submit'][] = '_fundraiser_recent_donors_node_edit_submit';
    return;
  } // End node edit form changes.

  // Add the submit function for the opt-in checkbox if the opt-in feature is enabled for this node:
  if ($opt_in_enabled && strpos($form_id, 'webform_client_form_') !== FALSE) {
    $form['#submit'][] = '_fundraiser_recent_donors_donation_form_submit';
  }

  // Insert the recent donations block directly into the form if a one-column layout is in use,
  // as the one-column layout does not use a template:
  $arg2 = arg(2);
  if (empty($arg2) && (!isset($form['#node']->form_layouts) || $form['#node']->form_layouts == 'one_column')) {
    $form['recent_donations_block'] = array(
      '#type' => 'fieldset',
      '#description' => _fundraiser_recent_donors_render_donation_block(),
      '#weight' => 99999,
    );
  }
}

/**
 * Form submission for the donation form's op-in checkbox:
 */
function _fundraiser_recent_donors_donation_form_submit($form, &$form_state) {
  if (!isset($form['#node']->nid) || !isset($form_state['input']['submitted'])) {
    return;
  }

  // Determine if the donor checked the opt-in box by flattening the webform component values to account
  // for placement in or outside of fieldset:
  $flattened_values = _fundraiser_webform_submission_flatten($form['#node']->nid, $form_state['input']['submitted']);
  if (!isset($flattened_values[FUNDRAISER_RECENT_DONORS_OPT_IN_FORM_KEY])) { 
    return;
  }

  // Get the donation ID:
  $did_query = db_query("SELECT did FROM {fundraiser_donation} WHERE sid = :sid AND nid = :nid",
    array(
      ':sid' => $form_state['values']['details']['sid'],
      ':nid' => $form_state['values']['details']['nid'],
    )
  );
  foreach ($did_query as $did_data) {
    _fundraiser_recent_donors_insert_donor_optin(
      $form_state['values']['details']['sid'],
      $form_state['values']['details']['nid'],
      $did_data->did
    );
    return;
  }
}

/**
 * Implements hook_commerce_paypal_ipn_process().
 * 
 * Track opt-in being checked on successful PayPal payment.
 */
function fundraiser_recent_donors_commerce_paypal_ipn_process($order, $payment_method, $ipn) {
  if ($ipn['payment_status'] == 'Completed') {
    $donation = fundraiser_donation_get_donation($order->order_id);

    // Track this donation's opt-in if the opt-in box was checked:
    if (isset($donation->submission_data[FUNDRAISER_RECENT_DONORS_OPT_IN_FORM_KEY])
      && !empty($donation->submission_data[FUNDRAISER_RECENT_DONORS_OPT_IN_FORM_KEY])) {
      _fundraiser_recent_donors_insert_donor_optin(
        $donation->sid,
        $donation->nid,
        $donation->did
      );      
    }
  }
}

/**
 * Form validation for the "Recent Donors List" node edit form fields:
 */
function _fundraiser_recent_donors_node_edit_validate($form, &$form_state) {
  $form_layouts_is_enabled = variable_get('form_layouts_' . $form['#node']->type, 0);
  $recent_donors_is_enabled = $form_state['values']['allow_recent_donations_opt_in'];
  if (!$form_layouts_is_enabled && $form_state['values']['allow_recent_donations_opt_in']) {
    $type_settings_path = 'admin/structure/types/manage/' . str_replace('_', '-', $form['#node']->type);
    $type_name = node_type_get_name($form['#node']->type);
    form_set_error('allow_recent_donations_opt_in',
      t('The Recent Donors List requires Form Layouts') . ' ' .
      l('to be enabled', $type_settings_path) . ' ' . t('on the ' . $type_name . ' content type settings form.'));
  }
  if (isset($form_state['values']['show_recent_donation_greater_than'])) {
    $min_amount = $form_state['values']['show_recent_donation_greater_than'];
    if (!is_numeric($min_amount) || $min_amount < 0) {
      form_set_error('show_recent_donation_greater_than',
        t('Please enter a valid number in the "Only show donations greater than" field.'));
    }
  }
}

/**
 * Form submission for the "Recent Donors List" node edit form fields.
 *
 * For new donation forms:
 * - This saves node-specific opt-in data using a placeholder nid of 0
 *
 * For existing donation forms:
 * - This updates node-specific opt-in data.
 * - This adds the Opt-In checkbox to the donation form if it does not exist.
 */
function _fundraiser_recent_donors_node_edit_submit($form, &$form_state) {
  $node = $form['#node'];
  if (!isset($form_state['values']['allow_recent_donations_opt_in'])) {
    return;
  }

  $min_optin_amount = 0;
  $is_enabled = $form_state['values']['allow_recent_donations_opt_in'];
  if (isset($form_state['values']['show_recent_donation_greater_than'])) {
    $min_optin_amount = $form_state['values']['show_recent_donation_greater_than'];
  }

  if (isset($node->nid)) {
    // Update the opt-in settings for this node:
    _fundraiser_recent_donors_set_node_opt_in_data($node->nid, $is_enabled, $min_optin_amount);
  } 
}

/**
 * Implements hook_node_insert().
 * 
 * When a donation form node is cloned by the node_clone module, also copy its opt-in settings.
 *
 * Those settings are:
 * - Is opt-in enabled for this node
 * - What is the opt-in minimum value for a donation to be displayed.
 */
function fundraiser_recent_donors_node_insert($node) {
  if (!fundraiser_is_donation_type($node->type)) {
    return;
  }

  // For new donation forms, save opt-in settings and create the opt-in checkbox if needed:
  if (isset($node->allow_recent_donations_opt_in) && isset($node->show_recent_donation_greater_than)) {
    _fundraiser_recent_donors_set_node_opt_in_data(
      $node->nid,
      $node->allow_recent_donations_opt_in,
      $node->show_recent_donation_greater_than);

    if ($node->allow_recent_donations_opt_in) {
      // Get this node's webform components for the opt-in checkbox component's insertion:
      $node = node_load($node->nid, $node->vid, TRUE);
      _fundraiser_recent_donors_add_opt_in_webform_component($node);
    }
  }

  // Support for node cloning:
  if (isset($node->clone_from_original_nid)) {
    _fundraiser_recent_donors_clone_node_optin_data($node->clone_from_original_nid, $node->nid);
  }
}

/**
 * Implements hook_node_update().
 */
function fundraiser_recent_donors_node_update($node) {
  // Add or remove the opt-in component as needed:
  if (_fundraiser_recent_donors_opt_in_enabled($node->nid)) {
    _fundraiser_recent_donors_add_opt_in_webform_component($node);
  }
  else {
    _fundraiser_recent_donors_remove_opt_in_webform_component($node);
  }
}

/**
 * Implements hook_webform_submission_delete().
 *
 * Removes a fundraiser_donor_opt_in record on submission deletion.
 */
function fundraiser_recent_donors_webform_submission_delete($node, $submission) {
  $webform_types = webform_variable_get('webform_node_types');
  if (!in_array($node->type, $webform_types)) {
    return;
  }
  db_query("DELETE FROM {fundraiser_donor_opt_in} WHERE sid = :sid AND nid = :nid",
    array(
      ':sid' => $submission->sid,
      ':nid' => $node->nid,
    )
  );
}

/**
 * Implements hook_node_delete().
 *
 * Removes all related fundraiser_donor_opt_in and fundraiser_donation_opt_in_block
 * records upon donation webform deletion.
 */
function fundraiser_recent_donors_node_delete($node) {
  $webform_types = webform_variable_get('webform_node_types');
  if (!in_array($node->type, $webform_types)) {
    return;
  }
  db_query("DELETE FROM {fundraiser_donor_opt_in} WHERE nid = :nid",
    array(':nid' => $node->nid));
  db_query("DELETE FROM {fundraiser_donation_opt_in_block} WHERE nid = :nid",
    array(':nid' => $node->nid));
}

/**
 * These functions implement hook_proprocess_HOOK() to include the
 * recent donors block's HTML as a variable within these templates:
 */
function fundraiser_recent_donors_preprocess_two_column_donation(&$vars) {
  $vars['recent_opt_in_donations'] = _fundraiser_recent_donors_render_donation_block();
}
function fundraiser_recent_donors_preprocess_two_column_hybrid_donation(&$vars) {
  $vars['recent_opt_in_donations'] = _fundraiser_recent_donors_render_donation_block();
}
function fundraiser_recent_donors_preprocess_two_column_left_right(&$vars) {
  $vars['recent_opt_in_donations'] = _fundraiser_recent_donors_render_donation_block();
}

// Views integration:

/**
 * Implements hook_views_api().
 *
 * This allows views listing opt-in donations.
 */
function fundraiser_recent_donors_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'fundraiser_recent_donors') . '/includes',
  );
}

/**
 * Implements hook_views_query_alter().
 *
 * Enforce the minimum donation amount specific to the current node
 * on which the recent opt-in donations view is displayed.
 */
function fundraiser_recent_donors_views_query_alter(&$view, &$query) {
  if ($view->name != 'recent_opt_in_donations' || !isset($view->args[0])) {
    return;
  }
  
  $minimum_value = 0;
  $min_amount = 0;
  $node = node_load($view->args[0]);
  if (!$node) {
    return;
  }

  $currency = fundraiser_get_currency_from_node($node);
  $min_amount = _fundraiser_recent_donors_get_min_opt_in_donation_amount($node->nid);
  $minimum_value = commerce_currency_decimal_to_amount($min_amount, $currency['code']);

  $join = new views_join();
  $join->table = 'field_data_commerce_order_total';
  $join->field = 'entity_id';
  $join->left_table = 'fundraiser_donor_opt_in';
  $join->left_field = 'did';
  $join->type = 'left';
  $query->add_relationship('field_data_commerce_order_total', $join, 'fundraiser_donor_opt_in');
  $query->add_where(1, 'field_data_commerce_order_total.commerce_order_total_amount', $minimum_value, '>');
}


// Helper functions:

/**
 * Duplicates the node-specific, opt-in settings for a given node.
 * This is used during node cloning.
 *
 * @param $original_nid
 *   The node ID of the original donation form.
 * @param $new_nid
 *   The node ID of the newly cloned donation form.
 */
function _fundraiser_recent_donors_clone_node_optin_data($original_nid, $new_nid) {
  // Fetch the original node's opt-in data:
  $opt_in_query = db_query("SELECT min_donation_amount, visibility " .
    "FROM {fundraiser_donation_opt_in_block} " .
    "WHERE nid = :nid",
    array(':nid' => $original_nid));
  foreach ($opt_in_query as $data) {
    // Duplicate the original node's opt-in data for the newly cloned node:
    db_query("INSERT INTO {fundraiser_donation_opt_in_block} " .
      "(nid, min_donation_amount, visibility) VALUES (:nid, :min_donation_amount, :visibility)",
      array(
        ':nid' => $new_nid,
        ':min_donation_amount' => $data->min_donation_amount,
        ':visibility' => $data->visibility,
      ));
    break; // There shouldn't be more than one record per node, but just in case.
  }
}

/**
 * Checks whether a given form has recent donation opt-in enabled:
 *
 * @param $nid
 *   Node ID of the donation form in question.
 */
function _fundraiser_recent_donors_opt_in_enabled($nid) {
  $opt_in_query = db_query("SELECT visibility FROM {fundraiser_donation_opt_in_block} WHERE nid = :nid",
    array(':nid' => $nid));
  foreach ($opt_in_query as $result) {
    return (!$result->visibility ? FALSE : TRUE);
  }
  return FALSE;
}

/**
 * Returns the minimum opt-in donation amount for results to be displayed
 * in the associated view.
 *
 * @param $nid
 *   The node ID of the donation form from which opt-in donations will be displayed.
 */
function _fundraiser_recent_donors_get_min_opt_in_donation_amount($nid) {
  $min_donation_amount = 0;
  $min_donation_query = db_query("SELECT min_donation_amount min FROM {fundraiser_donation_opt_in_block} " .
    "WHERE nid = :nid", array(':nid' => $nid));
  foreach ($min_donation_query as $result) {
    $min_donation_amount = $result->min;
  }
  return $min_donation_amount;
}

/**
 * Displays the rendered HTML of the recent op-in donations block.
 */
function _fundraiser_recent_donors_render_donation_block() {
  // Display nothing if the opt-in feature is not enabled for the current node:
  $arg1 = arg(1);
  if (!is_numeric($arg1) || !_fundraiser_recent_donors_opt_in_enabled($arg1)) {
    return '';
  }

  $block = block_load('views', 'recent_opt_in_donations-block');
  $block_data = _block_get_renderable_array(_block_render_blocks(array($block)));
  $block_html = drupal_render($block_data);
  return $block_html;
}

/**
 * Saves node-specific opt-in data:
 *
 * @param $nid
 *   The node ID of the donation form that is saving opt-in data.
 * @param $is_enabled
 *   Is opt-in enabled?
 * @param $min_optin_amount
 *   Minimum amount needed for a donation to display.
 */
function _fundraiser_recent_donors_set_node_opt_in_data($nid, $is_enabled, $min_optin_amount) {
  $exists_query = db_query("SELECT * FROM {fundraiser_donation_opt_in_block} WHERE nid = :nid",
    array(':nid' => $nid));
  foreach ($exists_query as $exists) {
    db_query("UPDATE fundraiser_donation_opt_in_block " .
      "SET visibility = :visibility, min_donation_amount = :min_donation_amount " .
      "WHERE nid = :nid",
      array(
        ':nid' => $nid,
        ':min_donation_amount' => $min_optin_amount,
        ':visibility' => $is_enabled,
      ) 
    );      
    return;
  } 
  db_query("INSERT INTO {fundraiser_donation_opt_in_block} (nid, min_donation_amount, visibility) " .
    "VALUES (:nid, :min_donation_amount, :visibility)",
    array(
      ':nid' => $nid,
      ':min_donation_amount' => $min_optin_amount,
      ':visibility' => $is_enabled,
    ) 
  );
}

/**
 * Saves opt-in data for a single donation.
 *
 * @param $sid 
 *   The webform submission's ID
 * @param $nid
 *   The donation form's node ID
 * @param $did
 *   The donation ID (also the order ID)
 * @param $donation_timestamp
 *   Timestamp of when the donation was made.
 */
function _fundraiser_recent_donors_insert_donor_optin($sid, $nid, $did, $donation_timestamp = FALSE) {
  $donation_timestamp = !$donation_timestamp ? time() : $donation_timestamp;

  $exists = db_query("SELECT did FROM {fundraiser_donor_opt_in} WHERE did = :did", array(':did' => $did))
   ->fetchField();

  if (!$exists) {
    db_query("INSERT INTO {fundraiser_donor_opt_in} VALUES (:sid, :nid, :did, :created)", 
      array(
        ':sid' => $sid,
        ':nid' => $nid,
        ':did' => $did,
        ':created' => $donation_timestamp,
      )
    );
  }
}

/**
 * Inserts the opt-in checkbox onto the donation webform if it
 * does not already exist.  It will be placed at the bottom of the
 * Payment Information fieldset if available; otherwise, it will be placed
 * after the final webform component.
 *
 * This returns the new checkbox's cid if successful; otherwise, FALSE.
 *
 * @params $node
 *   The node object for the webform on which the opt-in checkbox will be added.
 */
function _fundraiser_recent_donors_add_opt_in_webform_component($node) {
  // Do nothing if the opt-in checkbox's form_key already exists on the form:
  $highest_component_weight = 0;
  if (isset($node->webform['components']) && !empty($node->webform['components'])) {
    foreach ($node->webform['components'] as $component) {
      // Find the Payment Information pid if it exists so the opt-in checkbox can be placed within it:
      if (!isset($target_fieldset_parent_id)
        && $component['form_key'] == 'payment_method' && !empty($component['pid'])) {
        $target_fieldset_parent_id = $component['pid'];
      }
      // Ensure this component sits below any others by find the highest component
      if ($component['weight'] > $highest_component_weight) {
        $highest_component_weight = $component['weight'];
      }
      if ($component['form_key'] == FUNDRAISER_RECENT_DONORS_OPT_IN_FORM_KEY) {
        return FALSE;
      }
    }
  }

  if (!isset($target_fieldset_parent_id)) {
    $target_fieldset_parent_id = 0;
  }
  if (!isset($highest_component_weight)) {
    $highest_component_weight = 9998;
  }

  $component = array(
    'nid' => $node->nid,
    'form_key' => FUNDRAISER_RECENT_DONORS_OPT_IN_FORM_KEY,
    'pid' => $target_fieldset_parent_id,
    'name' => t('Opt in') . ' ',
    'type' => 'select',
    'extra' => array(
      'items' => FUNDRAISER_RECENT_DONORS_OPT_IN_FORM_KEY . '|' .
        t('You may show my name and donation amount in a list of recent donors.'),
      'multiple' => 1,
      'title_display' => 'none',
    ),
    'weight' => $highest_component_weight + 1, 
  ); 

  return webform_component_insert($component);
}

/**
 * Deletes the opt-in checkbox from the donation webform if it exists.
 *
 * @params $node
 *   The node object for the webform on which the opt-in checkbox will be added.
 */
function _fundraiser_recent_donors_remove_opt_in_webform_component($node) {
  if (!isset($node->webform['components']) || !is_array($node->webform['components'])) {
    return;
  }
  foreach ($node->webform['components'] as $cid => $component) {
    if ($component['form_key'] == FUNDRAISER_RECENT_DONORS_OPT_IN_FORM_KEY) {
      webform_component_delete($node, $component);
      return;
    }
  } 
}
