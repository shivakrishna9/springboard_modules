<?php
/**
 * @file
 * Implements Sage Payment payment services for use in Drupal Commerce.
 */

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_sage_payments_commerce_payment_method_info() {
  $payment_methods = array();
  $payment_methods['commerce_sage_payments_cc'] = array(
    'base' => 'commerce_sage_payments_cc',
    'title' => t('Sage Payment - Credit Card'),
    'short_title' => t('Sage Payment CC'),
    'display_title' => t('Credit card'),
    'description' => t('Integrates Sage Payment for credit card transactions.'),
    'cardonfile' => array(
      'charge callback' => 'commerce_sage_payments_cc_vault_cardonfile_charge',
      'update callback' => 'commerce_sage_payments_cc_vault_cardonfile_update',
      'delete callback' => 'commerce_sage_payments_cc_vault_cardonfile_delete',
    ),
  );
  $payment_methods['commerce_sage_payments_eft'] = array(
    'base' => 'commerce_sage_payments_eft',
    'title' => t('Sage Payment - ETF (ACH)'),
    'short_title' => t('Sage Payment EFT'),
    'display_title' => t('EFT'),
    'description' => t('Integrates Sage Payment for EFT transactions.'),
    'cardonfile' => array(
      'charge callback' => 'commerce_sage_payments_eft_vault_cardonfile_charge',
      'update callback' => 'commerce_sage_payments_eft_vault_cardonfile_update',
      'delete callback' => 'commerce_sage_payments_eft_vault_cardonfile_delete',
    ),
  );
  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 *
 * Note use of commerce_sage_payments_cc as base.
 */
function commerce_sage_payments_cc_settings_form($settings = array()) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  // Merge default settings into the stored settings array.
  $form = array();
  $form['commerce_sage_payments_settings_merchant_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant ID'),
    '#default_value' => isset($settings['commerce_sage_payments_settings_merchant_id']) ? $settings['commerce_sage_payments_settings_merchant_id'] : '',
  );
  $form['commerce_sage_payments_settings_merchant_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant Key'),
    '#default_value' => isset($settings['commerce_sage_payments_settings_merchant_key']) ? $settings['commerce_sage_payments_settings_merchant_key'] : '',
  );

  $form['commerce_sage_payments_settings_application_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Application ID'),
    '#default_value' => isset($settings['commerce_sage_payments_settings_application_id']) ? $settings['commerce_sage_payments_settings_application_id'] : '',
  );

  $form['commerce_sage_payments_settings_originator_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Originator ID'),
    '#default_value' => isset($settings['commerce_sage_payments_settings_originator_id']) ? $settings['commerce_sage_payments_settings_originator_id'] : '',
  );

  $form['transaction_type'] = array(
    '#type' => 'radios',
    '#title' => t('Default credit card transaction type'),
    '#description' => t('The default will be used to process transactions during checkout.'),
    '#default_value' => isset($settings['transaction_type']) ? $settings['transaction_type'] : COMMERCE_CREDIT_AUTH_CAPTURE,
    '#options' => array(
      COMMERCE_CREDIT_AUTH_CAPTURE => t('Authorization and capture'),
      COMMERCE_CREDIT_AUTH_ONLY => t('Authorization only (requires manual or automated capture after checkout)'),
    ),
  );

  if (module_exists('commerce_cardonfile')) {
    $form['cardonfile'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable Card on File functionality with this payment method using the Sage Payments Vault.'),
      '#description' => t('You must have the Vault functionality enabled by Sage Payments to using the Vault feature. Please consult your Sage Payments Representative concerning the requirements and details of this process.'),
      '#default_value' => isset($settings['cardonfile']) ? $settings['cardonfile'] : 0,
    );

  }
  else {
    $form['cardonfile'] = array(
      '#type' => 'markup',
      '#markup' => t('To enable Card on File funcitionality download and install the Card on File module.'),
    );
  }

  $form['verbose_gateway'] = array(
    '#type' => 'checkbox',
    '#title' => t('Verbose gateway errors.'),
    '#description' => t('If checked, specific error messages from the Sage Payments gateway will be displayed to the user.'),
    '#default_value' => isset($settings['verbose_gateway']) ? $settings['verbose_gateway'] : FALSE,
  );

  $form['log'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Log the following messages for debugging'),
    '#options' => array(
      'request' => t('API request messages'),
      'response' => t('API response messages'),
    ),
    '#default_value' => isset($settings['log']) ? $settings['log'] : array('request' => '0', 'response' => '0'),
  );
  return $form;
}


/**
 * Payment method callback: checkout form.
 */
function commerce_sage_payments_cc_submit_form($payment_method = NULL, $pane_values = NULL, $checkout_pane = NULL, $order = NULL) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  $fields = array(
    'code' => '',
  );
  return commerce_payment_credit_card_form($fields);
}

/**
 * Payment method callback: checkout form validation.
 */
function commerce_sage_payments_cc_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  // If the customer specified a card on file, skip the normal validation.
  if (module_exists('commerce_cardonfile') && !empty($payment_method['settings']['cardonfile']) &&
    !empty($pane_values['cardonfile']) && $pane_values['cardonfile'] !== 'new') {
    return;
  }

  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  // Validate the credit card fields.
  $settings = array(
    'form_parents' => array_merge($form_parents, array('credit_card')),
  );

  if (!commerce_payment_credit_card_validate($pane_values['credit_card'], $settings)) {
    return FALSE;
  }
}

/**
 * Payment method callback: checkout form submission.
 */
function commerce_sage_payments_cc_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  // If the customer specified payment using a card on file, attempt that now
  // and simply return the result.
  if (module_exists('commerce_cardonfile') && $payment_method['settings']['cardonfile'] &&
    !empty($pane_values['cardonfile']) && $pane_values['cardonfile'] !== 'new') {
    return commerce_sage_payments_cc_vault_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge);
  }

  // Determine the credit card type if possible for use in later code.
  if (!empty($pane_values['credit_card']['number'])) {
    module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
    $card_type = commerce_payment_validate_credit_card_type($pane_values['credit_card']['number'], array_keys(commerce_payment_credit_card_types()));
  }

  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Set this conditionally.
  $transaction_type = !empty($payment_method['settings']['transaction_type']) ? $payment_method['settings']['transaction_type'] : COMMERCE_CREDIT_AUTH_CAPTURE;

  $request_parameters = array (
    'T_AMT'        => commerce_currency_amount_to_decimal($charge['amount'], $charge['currency_code']),
    'C_CARDNUMBER' => $pane_values['credit_card']['number'],
    'C_EXP'        => str_pad($pane_values['credit_card']['exp_month'], 2, 0, STR_PAD_LEFT) . substr($pane_values['credit_card']['exp_year'], 2, 2),
  );

  if (isset($pane_values['credit_card']['code'])) {
    $parameters['C_CCV'] = $pane_values['credit_card']['code'];
  }

  // Build a description for the order.
  $description = array();

  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    if (in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
      $description[] = round($line_item_wrapper->quantity->value(), 2) . 'x ' . $line_item_wrapper->line_item_label->value();
    }
  }

  // Add additional transaction information to the request array.
  $request_parameters += array(
    // Order Information.
    'T_ORDERNUM' => $order->order_number,
    'T_CUSTOMER_NUMBER' => $order->uid,
  );

  // Prepare the billing address for use in the request.
  if ($order_wrapper->commerce_customer_billing->value()) {
    $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();

    if (empty($billing_address['first_name'])) {
      $name_parts = explode(' ', $billing_address['name_line']);
      $billing_address['first_name'] = array_shift($name_parts);
      $billing_address['last_name'] = implode(' ', $name_parts);
    }

    $request_parameters['C_EMAIL']   = $order_wrapper->mail->value();
    $request_parameters['C_NAME']    = substr($billing_address['first_name'], 0, 50) . " " . substr($billing_address['last_name'], 0, 50);
    $request_parameters['C_ADDRESS'] = substr($billing_address['thoroughfare'], 0, 60);
    $request_parameters['C_CITY']    = substr($billing_address['locality'], 0, 40);
    $request_parameters['C_STATE']   = substr($billing_address['administrative_area'], 0, 40);
    $request_parameters['C_ZIP']     = substr($billing_address['postal_code'], 0, 20);
    $request_parameters['C_COUNTRY'] = $billing_address['country'];
  }
  else {
    $billing_address = array();
  }

  // Config stored in a var because it's used again later.
  $sage_payments_config = _commerce_sage_payments_get_sage_payments_config($payment_method);
  $request_parameters += $sage_payments_config;

  // Prepare a transaction object to log the API response.
  $transaction                = commerce_payment_transaction_new('commerce_sage_payments_cc', $order->order_id);
  $transaction->instance_id   = $payment_method['instance_id'];
  $transaction->amount        = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  // Save the transaction information to get transaction id.
  commerce_payment_transaction_save($transaction);

  // @todo Figure out if there is anywhere in Sage Payments to store a transaction id
  //$request_parameters['T_ORDERNUM'] = substr($transaction->transaction_id, 0, 20);

  // This method can alter the $request_parameters, so we run it before logging
  // the payment request.
  $transaction_response = _commerce_sage_payments_request_sale($payment_method, $request_parameters);

  // Log the request if specified.
  if ($payment_method['settings']['log']['request'] === 'request') {
    // Mask secure data.
    $log_request_parameters = $request_parameters;
    $log_request_parameters['M_KEY'] = str_repeat('X', strlen($log_request_parameters['M_KEY']));
    if (!empty($log_request_parameters['C_CARDNUMBER'])) {
      $log_request_parameters['C_CARDNUMBER'] = str_repeat('X', strlen($log_request_parameters['C_CARDNUMBER']) - 4) . substr($log_request_parameters['C_CARDNUMBER'], -4);
    }
    if (!empty($log_request_parameters['C_CCV'])) {
      $log_request_parameters['C_CCV'] = str_repeat('X', strlen($log_request_parameters['CCV']));
    }
    watchdog('commerce_sage_payments', 'Sage Payments request: !param', array('!param' => '<pre>' . check_plain(print_r($log_request_parameters, TRUE)) . '</pre>'), WATCHDOG_DEBUG);
  }

  // Log the response if specified.
  if ($payment_method['settings']['log']['response'] === 'response') {
    watchdog('commerce_sage_payments', 'Sage Payments Sale response: !param', array('!param' => '<pre>' . check_plain(print_r($transaction_response, TRUE)) . '</pre>', WATCHDOG_DEBUG));
  }

  // If we didn't get an approval response code...
  if ($transaction_response['APPROVAL_INDICATOR'] != 'A') {
    // Create a failed transaction with the error message.
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
  }
  else {
    // Set the transaction status based on the type of transaction this was.
    switch ($transaction_type) {
      case COMMERCE_CREDIT_AUTH_ONLY:
        $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
        break;

      case COMMERCE_CREDIT_AUTH_CAPTURE:
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        break;

      case COMMERCE_CREDIT_CAPTURE_ONLY:
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        break;
    }
  }

  // Store the type of transaction in the remote status.
  $transaction->remote_status = $transaction_type;

  // Store the remote id.
  $transaction->remote_id = $transaction_response['REFERENCE'];

  _commerce_sage_payments_build_transaction_message($transaction, $transaction_response);

  // Save the transaction information.
  commerce_payment_transaction_save($transaction);

  // If the payment failed, display an error and rebuild the form.
  if ($transaction_response['APPROVAL_INDICATOR'] != 'A') {
    drupal_set_message(t('We received an error processing your card. Please enter your information again or try a different card.'), 'error');

    if ($payment_method['settings']['verbose_gateway']) {
      drupal_set_message(check_plain(print_r($transaction_response, TRUE)), 'error');
    }

    return FALSE;
  }

  // If Card on File is enabled, see if we have a credit card saved.
  // If not, get a new token.
  if (module_exists('commerce_cardonfile') && !empty($payment_method['settings']['cardonfile']) &&
    !empty($pane_values['credit_card']['cardonfile_store']) && $pane_values['credit_card']['cardonfile_store']) {

    // Build a payment details array for the credit card.
    $payment_details = array(
      'CARDNUMBER'      => $pane_values['credit_card']['number'],
      'EXPIRATION_DATE' => str_pad($pane_values['credit_card']['exp_month'], 2, 0, STR_PAD_LEFT) . substr($pane_values['credit_card']['exp_year'], 2, 2),
    );

    // Save the credit card in the Vault.
    $vault_response = commerce_sage_payments_vault_request_insert($payment_method, $payment_details);

    if (trim($vault_response['SUCCESS']) == 'true') {
      $guid = trim($vault_response['GUID']);

      // Store the token with cardonfile.
      $card_data = commerce_cardonfile_new();
      $card_data->uid = $order->uid;
      $card_data->payment_method = $payment_method['method_id'];
      $card_data->instance_id = $payment_method['instance_id'];
      $card_data->remote_id = $guid;
      $card_data->card_type = !empty($card_type) ? $card_type : 'card';
      $card_data->card_name = !empty($billing_address['name_line']) ? $billing_address['name_line'] : '';
      $card_data->card_number = substr($pane_values['credit_card']['number'], -4);
      $card_data->card_exp_month = $pane_values['credit_card']['exp_month'];
      $card_data->card_exp_year = $pane_values['credit_card']['exp_year'];
      $card_data->status = 1;

      // Save and log the creation of the new card on file.
      commerce_cardonfile_save($card_data);
      watchdog('commerce_sage_payments', 'GUID @guid registered and saved to user @uid.', array('@guid' => $guid, '@uid' => $order->uid));
    }
    else {
      // @todo Errored. What should we do here?
    }
  } // End if cardonfile.
}

/**
 * Imitates the checkout form submit callback for the CC Vault payment method.
 */
function commerce_sage_payments_cc_vault_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  // First attempt to load the card on file.
  $card_data = commerce_cardonfile_load($pane_values['cardonfile']);

  // Fail now if it is no longer available or the card is inactive.
  if (empty($card_data) || $card_data->status == 0) {
    drupal_set_message(t('The requested card on file is no longer valid.'), 'error');
    return FALSE;
  }

  return commerce_sage_payments_cc_vault_cardonfile_charge($payment_method, $card_data, $order, $charge);
}

/**
 * Card on file callback: background charge payment.
 *
 * @param object $payment_method
 *   The payment method instance definition array.
 * @param object $card_data
 *   The stored credit card data array to be processed
 * @param object $order
 *   The order object that is being processed
 * @param array $charge
 *   The price array for the charge amount with keys of 'amount' and 'currency'
 *   If null the total value of the order is used.
 *
 * @return bool|NULL
 *   FALSE if the transaction was not successfull
 */
function commerce_sage_payments_cc_vault_cardonfile_charge($payment_method, $card_data, $order, $charge = NULL) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $txn_type = COMMERCE_CREDIT_AUTH_CAPTURE;

  // Format order total for transaction.
  if (!isset($charge)) {
    $charge = commerce_line_items_total($order_wrapper->commerce_line_items);
  }

  $request_parameters = array (
    'GUID'              => $card_data->remote_id,
    'T_CUSTOMER_NUMBER' => $order->uid,
    'T_ORDERNUM'        => $order->order_number,
    'T_AMT'             => commerce_currency_amount_to_decimal($charge['amount'], $charge['currency_code']),
  );

  // Prepare the billing address for use in the request.
  if ($order_wrapper->commerce_customer_billing->value()) {
    $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();

    if (empty($billing_address['first_name'])) {
      $name_parts = explode(' ', $billing_address['name_line']);
      $billing_address['first_name'] = array_shift($name_parts);
      $billing_address['last_name']  = implode(' ', $name_parts);
    }

    $request_parameters['C_EMAIL']   = $order_wrapper->mail->value();
    $request_parameters['C_NAME']    = substr($billing_address['first_name'], 0, 50) . " " . substr($billing_address['last_name'], 0, 50);
    $request_parameters['C_ADDRESS'] = substr($billing_address['thoroughfare'], 0, 60);
    $request_parameters['C_CITY']    = substr($billing_address['locality'], 0, 40);
    $request_parameters['C_STATE']   = substr($billing_address['administrative_area'], 0, 40);
    $request_parameters['C_ZIP']     = substr($billing_address['postal_code'], 0, 20);
    $request_parameters['C_COUNTRY'] = $billing_address['country'];
  }

  // Config stored in a var because it's used again later.
  $sage_payments_config = _commerce_sage_payments_get_sage_payments_config($payment_method);
  $request_parameters += $sage_payments_config;

  // Prepare a transaction object to log the API response.
  $transaction                = commerce_payment_transaction_new('commerce_sage_payments_cc', $order->order_id);
  $transaction->instance_id   = $payment_method['instance_id'];
  $transaction->amount        = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  // Save the transaction information to get transaction id.
  commerce_payment_transaction_save($transaction);
  $request_data['id'] = substr($transaction->transaction_id, 0, 20);

  // Log the request if specified.
  if ($payment_method['settings']['log']['request'] === 'request') {
    watchdog('commerce_sage_payments', 'Sage Payments Vault sale request: !param', array('!param' => '<pre>' . check_plain(print_r($request_data, TRUE)) . '</pre>'), WATCHDOG_DEBUG);
  }

  $transaction_response = _commerce_sage_payments_vault_request_sale($payment_method, $request_parameters);

  // Log the response if specified.
  if ($payment_method['settings']['log']['response'] === 'response') {
    watchdog('commerce_sage_payments', 'Sage Payments Vault sale response: !param', array('!param' => '<pre>' . check_plain(print_r($transaction_response, TRUE)) . '</pre>', WATCHDOG_DEBUG));
  }

  // If we didn't get an approval response code...
  if ($transaction_response['APPROVAL_INDICATOR'] != 'A') {
    // Create a failed transaction with the error message.
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
  }
  else {
    // Set the transaction status based on the type of transaction this was.
    switch ($txn_type) {
      case COMMERCE_CREDIT_AUTH_ONLY:
        $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
        break;

      case COMMERCE_CREDIT_AUTH_CAPTURE:
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        break;

      case COMMERCE_CREDIT_CAPTURE_ONLY:
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        break;
    }
  }

  // Store the type of transaction in the remote status.
  $transaction->remote_status = COMMERCE_CREDIT_AUTH_CAPTURE;

  // Store the remote id.
  $transaction->remote_id = !empty($transaction_response['REFERENCE']) ? $transaction_response['REFERENCE'] : '';

  _commerce_sage_payments_build_transaction_message($transaction, $transaction_response);

  // Save the transaction information.
  commerce_payment_transaction_save($transaction);

  // If the payment failed, display an error and rebuild the form.
  if ($transaction_response['APPROVAL_INDICATOR'] != 'A') {
    drupal_set_message(t('We received an error processing your card on file. Please enter your information again or try a different card.'), 'error');

    if ($payment_method['settings']['verbose_gateway']) {
      drupal_set_message(check_plain(print_r($transaction_response, TRUE)), 'error');
    }

    return FALSE;
  }

}



/**
 * Card on file callback: updates the credit card expiry.
 */
function commerce_sage_payments_cc_vault_cardonfile_update($form, &$form_state, $payment_method, $card_data) {

    $request_parameters = array (
      'GUID' => $card_data->remote_id,
      'EXPIRATION_DATE' => str_pad($card_data->card_exp_month, 2, 0, STR_PAD_LEFT) . substr($card_data->card_exp_year, 2, 2),
    );
    $request_parameters += _commerce_sage_payments_get_sage_payments_config($payment_method);
    $response = commerce_sage_payments_vault_request_update_expiration($payment_method, $request_parameters);

  return $response;
}

/**
 * Card on file callback: deletes the associated customer payment profile.
 */
function commerce_sage_payments_cc_vault_cardonfile_delete($form, &$form_state, $payment_method, $card_data) {
  $request_parameters = array (
    'GUID' => $card_data->remote_id
  );
  $request_parameters += _commerce_sage_payments_get_sage_payments_config($payment_method);
  $response = commerce_sage_payments_vault_request_delete($payment_method, $request_parameters);
  return $response;
}

/**
 * EFT
 */

 /**
 * Payment method callback: settings form.
 *
 * Note use of commerce_sage_payments_eft as base.
 */
function commerce_sage_payments_eft_settings_form($settings = array()) {
  // Merge default settings into the stored settings array.
  $form = commerce_sage_payments_cc_settings_form($settings);
  // Transaction type applies only to credit card, not EFT.
  if (isset($form['transaction_type'])) {
    unset($form['transaction_type']);
  }
  return $form;
}


/**
 * Payment method callback: checkout form.
 */
function commerce_sage_payments_eft_submit_form($payment_method = NULL, $pane_values = NULL, $checkout_pane = NULL, $order = NULL) {
  $form = array();
  $form['bank_account']['bank_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Bank Name'),
    '#required' => TRUE,
  );
  $form['bank_account']['routing_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Routing Number'),
    '#required' => TRUE,
  );
  $form['bank_account']['account_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Account Number'),
    '#required' => TRUE,
  );
  $form['bank_account']['confirm_account_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Confirm Account Number'),
    '#required' => TRUE,
  );
  $form['bank_account']['account_type'] = array(
    '#type' => 'select',
    '#title' => t('Account Type'),
    '#options' => array(
      'DDA' => 'Checking',
      'SAV' => 'Savings',
    ),
    '#required' => TRUE,
  );

  return $form;
}

/**
 * Payment method callback: checkout form validation.
 */
function commerce_sage_payments_eft_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  // If the customer specified a card on file, skip the normal validation.
  if (module_exists('commerce_cardonfile') && !empty($payment_method['settings']['cardonfile']) &&
    !empty($pane_values['cardonfile']) && $pane_values['cardonfile'] !== 'new') {
    return;
  }

  $prefix = implode('][', $form_parents) . '][';
  // Validate the account number fields
  if (!ctype_digit($pane_values['bank_account']['routing_number']) || strlen($pane_values['bank_account']['routing_number']) > 9) {
    form_set_error($prefix . 'routing_number', t('The routing number should be a 9 digit numeric value.'));
  }

  if (!ctype_digit($pane_values['bank_account']['account_number'])) {
    form_set_error($prefix . 'account_number', t('The account number should only contain numeric values.'));
  }

  if ($pane_values['bank_account']['account_number'] != $pane_values['bank_account']['confirm_account_number']) {
    form_set_error($prefix . 'account_number', t('The account numbers do not match.'));
    form_set_error($prefix . 'confirm_account_number');
  }
}

/**
 * Payment method callback: checkout form submission.
 */
function commerce_sage_payments_eft_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  // If the customer specified payment using a card on file, attempt that now
  // and simply return the result.
  if (module_exists('commerce_cardonfile') && $payment_method['settings']['cardonfile'] &&
   !empty($pane_values['cardonfile']) && $pane_values['cardonfile'] !== 'new') {
    return commerce_sage_payments_eft_vault_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge);
  }

  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  $request_parameters = array (
    'T_AMT' => commerce_currency_amount_to_decimal($charge['amount'], $charge['currency_code']),
    'C_ACCT' => $pane_values['bank_account']['account_number'],
    'C_RTE' => $pane_values['bank_account']['routing_number'],
    'C_ACCT_TYPE' => $pane_values['bank_account']['account_type'],
  );

  // Build a description for the order.
  $description = array();

  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    if (in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
      $description[] = round($line_item_wrapper->quantity->value(), 2) . 'x ' . $line_item_wrapper->line_item_label->value();
    }
  }

  // Add additional transaction information to the request array.
  $request_parameters += array(
    // Order Information.
    'T_ORDERNUM' => $order->order_number,
    'T_CUSTOMER_NUMBER' => $order->uid,
  );

  // Prepare the billing address for use in the request.
  if ($order_wrapper->commerce_customer_billing->value()) {
    $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();

    if (empty($billing_address['first_name'])) {
      $name_parts = explode(' ', $billing_address['name_line']);
      $billing_address['first_name'] = array_shift($name_parts);
      $billing_address['last_name'] = implode(' ', $name_parts);
    }

    $request_parameters['C_EMAIL']   = $order_wrapper->mail->value();
    $request_parameters['C_FIRST_NAME'] = substr($billing_address['first_name'], 0, 50);
    $request_parameters['C_LAST_NAME']  = substr($billing_address['last_name'], 0, 50);
    $request_parameters['C_ADDRESS'] = substr($billing_address['thoroughfare'], 0, 60);
    $request_parameters['C_CITY']    = substr($billing_address['locality'], 0, 40);
    $request_parameters['C_STATE']   = substr($billing_address['administrative_area'], 0, 40);
    $request_parameters['C_ZIP']     = substr($billing_address['postal_code'], 0, 20);
    $request_parameters['C_COUNTRY'] = $billing_address['country'];
  }
  else {
    $billing_address = array();
  }

  // Config stored in a var because it's used again later.
  $sage_payments_config = _commerce_sage_payments_get_sage_payments_config($payment_method);
  $request_parameters += $sage_payments_config;

  // Prepare a transaction object to log the API response.
  $transaction                = commerce_payment_transaction_new('commerce_sage_payments_eft', $order->order_id);
  $transaction->instance_id   = $payment_method['instance_id'];
  $transaction->amount        = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];

  // Save the transaction information to get transaction id.
  commerce_payment_transaction_save($transaction);

  // This method can alter the $request_parameters, so we run it before logging
  // the payment request.
  $transaction_response = _commerce_sage_payments_request_sale($payment_method, $request_parameters);

  // Log the request if specified.
  if ($payment_method['settings']['log']['request'] === 'request') {
    // Mask secure data.
    $log_request_parameters = $request_parameters;
    $log_request_parameters['M_KEY'] = str_repeat('X', strlen($log_request_parameters['M_KEY']));
    if (!empty($log_request_parameters['C_ACCT'])) {
      $log_request_parameters['C_ACCT'] = str_repeat('X', strlen($log_request_parameters['C_ACCT']) - 4) . substr($log_request_parameters['C_ACCT'], -4);
    }
    if (!empty($log_request_parameters['C_RTE'])) {
      $log_request_parameters['C_RTE'] = str_repeat('X', strlen($log_request_parameters['C_RTE']) - 4) . substr($log_request_parameters['C_RTE'], -4);
    }
    watchdog('commerce_sage_payments', 'Sage Payments request: !param', array('!param' => '<pre>' . check_plain(print_r($log_request_parameters, TRUE)) . '</pre>'), WATCHDOG_DEBUG);
  }

  // Log the response if specified.
  if ($payment_method['settings']['log']['response'] === 'response') {
    watchdog('commerce_sage_payments', 'Sage Payments Sale response: !param', array('!param' => '<pre>' . check_plain(print_r($transaction_response, TRUE)) . '</pre>', WATCHDOG_DEBUG));
  }

  // If we didn't get an approval response code...
  if ($transaction_response['APPROVAL_INDICATOR'] != 'A') {
    // Create a failed transaction with the error message.
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
  }
  else {
    $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  }

  // Store the type of transaction in the remote status.
  $transaction->remote_status = COMMERCE_CREDIT_AUTH_CAPTURE;

  // Store the remote id.
  $transaction->remote_id = $transaction_response['REFERENCE'];

  _commerce_sage_payments_build_transaction_message($transaction, $transaction_response);

  // Save the transaction information.
  commerce_payment_transaction_save($transaction);

  // If the payment failed, display an error and rebuild the form.
  if ($transaction_response['APPROVAL_INDICATOR'] != 'A') {
    drupal_set_message(t('We received an error processing your account. Please enter your information again.'), 'error');

    if ($payment_method['settings']['verbose_gateway']) {
      drupal_set_message(check_plain(print_r($transaction_response, TRUE)), 'error');
    }

    return FALSE;
  }

  // If Card on File is enabled, see if we have a credit card saved.
  // If not, get a new token.
  if (module_exists('commerce_cardonfile') && !empty($payment_method['settings']['cardonfile']) &&
    !empty($pane_values['bank_account']['cardonfile_store']) && $pane_values['bank_account']['cardonfile_store']) {

    // Build a payment details array for the bank account.
    $payment_details = array(
      'ROUTING_NUMBER' => $pane_values['bank_account']['routing_number'],
      'ACCOUNT_NUMBER' => $pane_values['bank_account']['account_number'],
      'C_ACCT_TYPE' => $pane_values['bank_account']['account_type'],
    );

    // Save the credit card in the Vault.
    $vault_response = commerce_sage_payments_vault_request_insert($payment_method, $payment_details);

    if (trim($vault_response['SUCCESS']) == 'true') {
      $guid = trim($vault_response['GUID']);

      // Store the token with cardonfile.
      $card_data = commerce_cardonfile_new();
      $card_data->uid = $order->uid;
      $card_data->payment_method = $payment_method['method_id'];
      $card_data->instance_id = $payment_method['instance_id'];
      $card_data->remote_id = $guid;
      $card_data->card_type = $pane_values['bank_account']['account_type'];
      $card_data->card_name = !empty($billing_address['name_line']) ? $billing_address['name_line'] : '';
      $card_data->card_number = substr($pane_values['bank_account']['account_number'], -3);
      $card_data->status = 1;

      // Save and log the creation of the new card on file.
      commerce_cardonfile_save($card_data);
      watchdog('commerce_sage_payments', 'GUID @guid registered and saved to user @uid.', array('@guid' => $guid, '@uid' => $order->uid));
    }
    else {
      // @todo Errored. What should we do here?
    }
  } // End if cardonfile.
}

/**
 * Imitates the checkout form submit callback for the CC Vault payment method.
 */
function commerce_sage_payments_eft_vault_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  // First attempt to load the card on file.
  $card_data = commerce_cardonfile_load($pane_values['cardonfile']);

  // Fail now if it is no longer available or the card is inactive.
  if (empty($card_data) || $card_data->status == 0) {
    drupal_set_message(t('The requested card on file is no longer valid.'), 'error');
    return FALSE;
  }

  return commerce_sage_payments_eft_vault_cardonfile_charge($payment_method, $card_data, $order, $charge);
}

/**
 * Card on file callback: background charge payment.
 *
 * @param object $payment_method
 *   The payment method instance definition array.
 * @param object $card_data
 *   The stored credit card data array to be processed
 * @param object $order
 *   The order object that is being processed
 * @param array $charge
 *   The price array for the charge amount with keys of 'amount' and 'currency'
 *   If null the total value of the order is used.
 *
 * @return bool|NULL
 *   FALSE if the transaction was not successfull
 */
function commerce_sage_payments_eft_vault_cardonfile_charge($payment_method, $card_data, $order, $charge = NULL) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Format order total for transaction.
  if (!isset($charge)) {
    $charge = commerce_line_items_total($order_wrapper->commerce_line_items);
  }

  $request_parameters = array (
    'GUID'              => $card_data->remote_id,
    'T_CUSTOMER_NUMBER' => $order->uid,
    'T_ORDERNUM'        => $order->order_id,
    'T_AMT'             => commerce_currency_amount_to_decimal($charge['amount'], $charge['currency_code']),
  );

  // Prepare the billing address for use in the request.
  if ($order_wrapper->commerce_customer_billing->value()) {
    $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();

    if (empty($billing_address['first_name'])) {
      $name_parts = explode(' ', $billing_address['name_line']);
      $billing_address['first_name'] = array_shift($name_parts);
      $billing_address['last_name']  = implode(' ', $name_parts);
    }

    $request_parameters['C_EMAIL']      = $order_wrapper->mail->value();
    $request_parameters['C_FIRST_NAME'] = substr($billing_address['first_name'], 0, 50);
    $request_parameters['C_LAST_NAME']  = substr($billing_address['last_name'], 0, 50);
    $request_parameters['C_ADDRESS']    = substr($billing_address['thoroughfare'], 0, 60);
    $request_parameters['C_CITY']       = substr($billing_address['locality'], 0, 40);
    $request_parameters['C_STATE']      = substr($billing_address['administrative_area'], 0, 40);
    $request_parameters['C_ZIP']        = substr($billing_address['postal_code'], 0, 20);
    $request_parameters['C_COUNTRY']    = $billing_address['country'];
  }

  // add the config settings
  $sage_payments_config = _commerce_sage_payments_get_sage_payments_config($payment_method);

  // Per support@Sage all fields must be present in vault virtual check request
  $request_parameters['C_ORIGINATOR_ID'] = !empty($payment_method['settings']['commerce_sage_payments_settings_originator_id']) ? $payment_method['settings']['commerce_sage_payments_settings_originator_id'] : '0000000000';
  $request_parameters['C_MIDDLE_INITIAL'] = '';
  $request_parameters['C_SUFFIX'] = '';
  $request_parameters['C_EMAIL'] = $order->mail;
  $request_parameters['T_SHIPPING'] = '';
  $request_parameters['T_TAX'] = '';
  $request_parameters['C_TELEPHONE'] = '';
  $request_parameters['C_FAX'] = '';
  $request_parameters['C_SHIP_NAME'] = '';
  $request_parameters['C_SHIP_ADDRESS'] = '';
  $request_parameters['C_SHIP_CITY'] = '';
  $request_parameters['C_SHIP_STATE'] = '';
  $request_parameters['C_SHIP_ZIP'] = '';
  $request_parameters['C_SHIP_COUNTRY'] = '';
  $request_parameters['C_SSN'] = '';
  $request_parameters['C_DL_STATE_CODE'] = '';
  $request_parameters['C_DL_NUMBER'] = '';
  $request_parameters['C_DOB'] = '';
  $request_parameters += $sage_payments_config;

  // Prepare a transaction object to log the API response.
  $transaction                = commerce_payment_transaction_new('commerce_sage_payments_eft', $order->order_id);
  $transaction->instance_id   = $payment_method['instance_id'];
  $transaction->amount        = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  // Save the transaction information to get transaction id.
  commerce_payment_transaction_save($transaction);

  // Log the request if specified.
  if ($payment_method['settings']['log']['request'] === 'request') {
    watchdog('commerce_sage_payments', 'Sage Payments Vault sale request: !param', array('!param' => '<pre>' . check_plain(print_r($request_parameters, TRUE)) . '</pre>'), WATCHDOG_DEBUG);
  }

  $transaction_response = _commerce_sage_payments_vault_request_sale($payment_method, $request_parameters);

  // Log the response if specified.
  if ($payment_method['settings']['log']['response'] === 'response') {
    watchdog('commerce_sage_payments', 'Sage Payments Vault sale response: !param', array('!param' => '<pre>' . check_plain(print_r($transaction_response, TRUE)) . '</pre>', WATCHDOG_DEBUG));
  }

  // If we didn't get an approval response code...
  if ($transaction_response['APPROVAL_INDICATOR'] != 'A') {
    // Create a failed transaction with the error message.
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
  }
  else {
    $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  }

  // Store the type of transaction in the remote status.
  $transaction->remote_status = COMMERCE_CREDIT_AUTH_CAPTURE;

  $transaction->remote_id = !empty($transaction_response['REFERENCE']) ? $transaction_response['REFERENCE'] : '';

  _commerce_sage_payments_build_transaction_message($transaction, $transaction_response);

  // Save the transaction information.
  commerce_payment_transaction_save($transaction);

  // If the payment failed, display an error and rebuild the form.
  if ($transaction_response['APPROVAL_INDICATOR'] != 'A') {
    drupal_set_message(t('We received an error processing your card on file. Please enter your information again or try a different card.'), 'error');

    if ($payment_method['settings']['verbose_gateway']) {
      drupal_set_message(check_plain(print_r($transaction_response, TRUE)), 'error');
    }

    return FALSE;
  }
}

/**
 * Card on file callback: updates the credit card expiry.
 */
function commerce_sage_payments_eft_vault_cardonfile_update($form, &$form_state, $payment_method, $card_data) {
  $token = NULL;
  if (
    ($form_state['values']['bank_account']['account_number'] != $form['bank_account']['account_number']['#default_value']) ||
    ($form_state['values']['bank_account']['routing_number'] != $form['bank_account']['routing_number']['#default_value'])
  ) {
    $payment_details = array(
      'ROUTING_NUMBER' => $form_state['values']['bank_account']['routing_number'],
      'ACCOUNT_NUMBER' =>$form_state['values']['bank_account']['account_number'],
      'C_ACCT_TYPE' => $form_state['values']['bank_account']['account_type'],
    );

    $response = commerce_sage_payments_vault_request_insert($payment_method, $payment_details);
    if (trim($response['SUCCESS']) == 'true') {
      $token = trim($response['GUID']);
    }
  }

  return !empty($token);
}

/**
 * Card on file callback: deletes the associated customer payment profile.
 */
function commerce_sage_payments_eft_vault_cardonfile_delete($form, &$form_state, $payment_method, $card_data) {
  $request_parameters = array (
    'GUID' => $card_data->remote_id
  );

  $request_parameters += _commerce_sage_payments_get_sage_payments_config($payment_method);
  $response = commerce_sage_payments_vault_request_delete($payment_method, $request_parameters);
  return $response;
}

/**
 * End EFT
 */

/**
 * Sends a sale request to Sage Payments.
 *
 * @param array $gateway
 *   The payment method.
 *
 * @param array $request_parameters
 *   Data to pass to the API call.
 *
 * @return object $transaction_response
 *   The parsed transaction info.
 */
function _commerce_sage_payments_request_sale($gateway, &$request_parameters) {
  // Bankcard and CC requests use the same client
  $sage_client = _commerce_sage_payments_get_sage_payments_client();

  $request_parameters = array_merge($request_parameters, _commerce_sage_payments_get_sage_payments_config($gateway));

  // Determine the correct request type to use.
  switch ($gateway['method_id']) {
    case 'commerce_sage_payments_cc':
      if (!empty($gateway['settings']['transaction_type'])) {
        switch ($gateway['settings']['transaction_type']) {
          case COMMERCE_CREDIT_AUTH_CAPTURE:
            $type = 'BANKCARD_SALE';
            break;

          case COMMERCE_CREDIT_AUTH_ONLY:
            $type = 'BANKCARD_AUTHONLY';
            break;
        }
      }
      else {
        $type = 'BANKCARD_SALE';
      }
      break;

    case 'commerce_sage_payments_eft':
      $type = 'VIRTUAL_CHECK_WEB_SALE';
      break;
  }

  $context = array(
    'payment_method' => $gateway,
    'type' => $type,
  );

  drupal_alter('sage_payment_request_sale', $request_parameters, $context);

  $response = $sage_client->{$type}($request_parameters);

  if (is_object($response)) {
    $response_array = _commerce_sage_payments_response_to_array($response->{$type . 'Result'}->any);
    $transaction_response = $response_array['NewDataSet']['Table1'];
  }

  return $transaction_response;
}

/**
 * Sage Payment Credit request function wrapper.
 *
 * @param array $gateway
 *   The payment method.
 *
 * @param array $request_parameters
 *   Data to pass to the API call.
 *
 * @return object $transaction_response
 *   The parsed transaction info.
 */
function _commerce_sage_payments_request_credit($gateway, $request_parameters) {
  $sage_client = _commerce_sage_payments_get_sage_payments_client();
  $request_parameters = array_merge($request_parameters, _commerce_sage_payments_get_sage_payments_config($gateway));

  // Determine the correct request type to use
  switch($gateway['method_id']) {
    case 'commerce_sage_payments_cc' :
      $type = 'BANKCARD_CREDIT';
      break;
    case 'commerce_sage_payments_eft' :
      $type = 'VIRTUAL_CHECK_CREDIT_BY_REFERENCE';
      break;
  }

  $response = $sage_client->{$type}($request_parameters);

  if (is_object($response)) {
    $response_array = _commerce_sage_payments_response_to_array($response->{$type . 'Result'}->any);
    $transaction_response = $response_array['NewDataSet']['Table1'];
  }

  return $transaction_response;
}

/**
 * Sends a request to Sage Payments to save a credit card in the Vault.
 *
 * @param array $gateway
 *   The payment method.
 *
 * @param array $data
 *   Data to pass to the API call.
 *
 * @return
 *   The response object with 'SUCCESS' (boolean), 'GUID' (string), and 'MESSAGE' (string) attributes
 */
function commerce_sage_payments_vault_request_insert($gateway, $request_parameters) {
  $vault_client = _commerce_sage_payments_get_sage_payments_vault_management_client();
  $request_parameters += _commerce_sage_payments_get_sage_payments_config($gateway);

  // Determine the correct request type to use
  switch($gateway['method_id']) {
    case 'commerce_sage_payments_cc' :
      $type = 'INSERT_CREDIT_CARD_DATA';
      break;
    case 'commerce_sage_payments_eft' :
      $type = 'INSERT_VIRTUAL_CHECK_DATA';
      break;
  }

  $response = $vault_client->{$type}($request_parameters);
  if (is_object($response)) {
    $response_array = _commerce_sage_payments_response_to_array($response->{$type . 'Result'}->any);
    $transaction_response = $response_array['NewDataSet']['Table1'];
  }

  watchdog('commerce_sage_payments', 'Sage Payments Vault response: !param', array('!param' => '<pre>' . check_plain(print_r($transaction_response), TRUE) . '</pre>', WATCHDOG_DEBUG));

  return $transaction_response;
}

/**
 * Sends a request to Sage Payments to update the credit card expiration in the Vault.
 *
 * @param array $gateway
 *   The payment method.
 *
 * @param array $data
 *   Data to pass to the API call.
 *
 * @return
 *   (boolean) for whether the update was successful or not.
 */
function commerce_sage_payments_vault_request_update_expiration($gateway, $request_parameters) {
  $vault_client = _commerce_sage_payments_get_sage_payments_vault_management_client();
  $request_parameters += _commerce_sage_payments_get_sage_payments_config($gateway);
  $response = $vault_client->UPDATE_CREDIT_CARD_EXPIRATION_DATE($request_parameters);
   if (is_object($response) && is_object($response->UPDATE_CREDIT_CARD_EXPIRATION_DATEResult)){
    $response_parsed  = new SimpleXMLElement($response->UPDATE_CREDIT_CARD_EXPIRATION_DATEResult->any);
    $transaction_response = (object)(array) $response_parsed->NewDataSet->Table1;
    watchdog('commerce_sage_payments', 'Sage Payments Vault response: !param', array('!param' => '<pre>' . check_plain(print_r($transaction_response), TRUE) . '</pre>', WATCHDOG_DEBUG));
    return $transaction_response->SUCCESS == 'true';
  }
}

/**
 * Sends a request to Sage Payments to delete a credit card in the Vault.
 *
 * @param array $gateway
 *   The payment method.
 *
 * @param array $data
 *   Data to pass to the API call.
 *
 * @return
 *   The response (boolean).
 */
function commerce_sage_payments_vault_request_delete($gateway, $request_parameters) {
  $vault_client = _commerce_sage_payments_get_sage_payments_vault_management_client();
  $request_parameters += _commerce_sage_payments_get_sage_payments_config($gateway);
  $response = $vault_client->DELETE_DATA($request_parameters);
  if (is_object($response) && isset($response->DELETE_DATAResult)){
    $transaction_response = $response->DELETE_DATAResult;
  }

  watchdog('commerce_sage_payments', 'Sage Payments Vault response: !param', array('!param' => '<pre>' . check_plain(print_r($transaction_response), TRUE) . '</pre>', WATCHDOG_DEBUG));
  return $transaction_response;
}

/**
 * Sends a sale request to Sage Payments using a credit card stored in the Vault.
 *
 * @param array $gateway
 *   The payment method.
 *
 * @param array $request_parameters
 *   Data to pass to the API call.
 *
 * @return object $transaction_response
 *   The parsed transaction info.
 */
function _commerce_sage_payments_vault_request_sale($gateway, $request_parameters) {
  $request_parameters = array_merge($request_parameters, _commerce_sage_payments_get_sage_payments_config($gateway));

  // Determine the correct client and request type to use
  switch($gateway['method_id']) {
    case 'commerce_sage_payments_cc' :
      $sage_client = _commerce_sage_payments_get_sage_payments_vault_bankcard_client();
      $type = 'VAULT_BANKCARD_SALE';
      break;
    case 'commerce_sage_payments_eft' :
      $sage_client = _commerce_sage_payments_get_sage_payments_vault_virtual_check_client();
      $type = 'VIRTUAL_CHECK_WEB_SALE';
      break;
  }

  $context = array(
    'payment_method' => $gateway,
    'type' => $type,
  );

  drupal_alter('sage_payment_request_sale', $request_parameters, $context);

  $response = $sage_client->{$type}($request_parameters);

  if (is_object($response)) {
    $response_array = _commerce_sage_payments_response_to_array($response->{$type . 'Result'}->any);
    $transaction_response = $response_array['NewDataSet']['Table1'];
  }

  return $transaction_response;
}

/**
 * Convert XML of a response to a simple array
 */
function _commerce_sage_payments_response_to_array($xml) {
  $xml = new SimpleXMLElement($xml);
  return json_decode(json_encode((array) $xml), 1);
}

/**
 * Build the transaction message
 */
function _commerce_sage_payments_build_transaction_message($transaction, $transaction_response) {
  $transaction->message = "<b>Status:</b> @status<br />\n";
  $transaction->message_variables['@status'] = $transaction_response['APPROVAL_INDICATOR'] != 'A' ? t('REJECTED') : t('ACCEPTED');

  foreach ($transaction_response as $key => $value) {
    // Add the message
    $transaction->message .= '<b>' . $key . "</b>: @" . check_plain($key) . "<br />\n";

    // Add the variable, in some cases these values may be arrays
    $transaction->message_variables['@' . check_plain($key)] = !is_string($value) ? implode(', ', $value) : trim($value);
  }
}

/**
 * Load the SOAP client and WSDL definitions.
 */
function _commerce_sage_payments_get_sage_payments_client() {
 // $client = new SoapClient('https://gateway.sagepayments.net/web_services/wsvtextensions/transaction_processing.asmx?WSDL');
  $client = new SoapClient(drupal_get_path('module', 'commerce_sage_payments') . '/libraries/transaction_processing.wsdl.xml',
                           array('location' => 'https://gateway.sagepayments.net/web_services/wsvtextensions/transaction_processing.asmx',
                                 'uri'      => 'https://gateway.sagepayments.net/web_services/wsvtextensions/'
                                )
                          );
  return $client;
}

/**
 * Load the SOAP client and WSDL definitions for the Sage Payments Vault admin.
 */
function _commerce_sage_payments_get_sage_payments_vault_management_client() {
//  $client = new SoapClient('https://gateway.sagepayments.net/web_services/wsVault/wsVault.asmx?WSDL');
  $client = new SoapClient(drupal_get_path('module', 'commerce_sage_payments') . '/libraries/wsVault.wsdl.xml',
                           array('location' => 'https://gateway.sagepayments.net/web_services/wsVault/wsVault.asmx',
                                 'uri'      => 'https://gateway.sagepayments.net/web_services/wsVault/'
                                )
                          );
  return $client;
}

/**
 * Load the SOAP client and WSDL definitions for Sage Payments Vault transaction processing.
 */
function _commerce_sage_payments_get_sage_payments_vault_bankcard_client() {
  // $client = new SoapClient('https://gateway.sagepayments.net/web_services/wsVault/wsVaultBankcard.asmx?WSDL');
  $client = new SoapClient(drupal_get_path('module', 'commerce_sage_payments') . '/libraries/wsVaultBankcard.wsdl.xml',
                           array('location' => 'https://gateway.sagepayments.net/web_services/wsVault/wsVaultBankcard.asmx',
                                 'uri'      => 'https://gateway.sagepayments.net/web_services/wsVault/',
                                 // 'trace' => 1
                                )
                          );
  return $client;
}

/**
 * Load the SOAP client and WSDL definitions for Sage Payments Vault transaction processing.
 */
function _commerce_sage_payments_get_sage_payments_vault_virtual_check_client() {
  // $client = new SoapClient('https://gateway.sagepayments.net/web_services/wsVault/wsVaultBankcard.asmx?WSDL');
  $client = new SoapClient(drupal_get_path('module', 'commerce_sage_payments') . '/libraries/wsVaultVirtualCheck.xml',
                           array('location' => 'https://gateway.sagepayments.net/web_services/wsVault/wsVaultVirtualCheck.asmx',
                                 'uri'      => 'https://gateway.sagepayments.net/web_services/wsVault/',
                                 // 'trace' => 1,
                                )
                          );
  return $client;
}

/**
 * Return gateway configuration values from a given gateway.
 */
function _commerce_sage_payments_get_sage_payments_config($gateway) {
  // Configure with the gateway values for the .ini value, merge with the credit info.
  $auth_info = array(
    'M_ID'  => !empty($gateway['settings']['commerce_sage_payments_settings_merchant_id'])  ? $gateway['settings']['commerce_sage_payments_settings_merchant_id']  : '',
    'M_KEY' => !empty($gateway['settings']['commerce_sage_payments_settings_merchant_key']) ? $gateway['settings']['commerce_sage_payments_settings_merchant_key'] : '',
    'T_APPLICATION_ID' => !empty($gateway['settings']['commerce_sage_payments_settings_application_id']) ? $gateway['settings']['commerce_sage_payments_settings_application_id'] : '',
  );

  return $auth_info;
}
