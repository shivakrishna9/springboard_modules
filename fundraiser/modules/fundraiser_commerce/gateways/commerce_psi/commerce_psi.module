<?php
/**
 * @file
 * Implements Payment Solutions Inc payment services for use in Drupal Commerce.
 */

// PSI transaction mode definitions:
define('COMMERCE_PSI_MODE_LIVE', 'live');
define('COMMERCE_PSI_MODE_STAGING', 'staging');
define('COMMERCE_PSI_MODE_TEST', 'test');

/**
 * Send a request to the PSI API.
 *
 * @param array $payment_method
 *   Fully loaded commerce payment method.
 * @param array $nvp
 *   Array of values to send with the request.
 * @param string $type
 *   Type of request, can be check or credit, defaults to credit.
 * @param bool $vault
 *   TRUE to vault the payment method.
 * @param bool $vaulted
 *   TRUE if payment method already vaulted and to send Vaulted payment method.
 *
 * @return object|NULL
 *   The response object from PSI.
 */
function _commerce_psi_request($payment_method, $nvp, $type = 'credit', $vault = FALSE, $vaulted = FALSE) {
  $account_details = $payment_method['settings'];
  $account_details['account_password'] = _commerce_psi_decrypt($payment_method['settings']['account_password']);
  $account_details['title'] = $payment_method['title'];
  $client = new PsiClient($account_details);
  if (!empty($client)) {
    return $client->{$type . 'Request'}($nvp, $vault, $vaulted);
  }

  return NULL;
}

/**
 * Returns the default settings for a Payment Solutions Inc. payment method.
 *
 * @return array
 *   Default PSI settings.
 */
function _commerce_psi_default_settings() {
  return array(
    'txn_mode' => COMMERCE_PSI_MODE_TEST,
    'account_username' => '',
    'account_password' => '',
    'log' => array('request' => '0', 'response' => '0'),
    'custom_fields' => array(
      'pay_code' => '',
      'program_code' => '',
      'source_code' => '',
      'market_source' => '',
      'send_mail' => '',
    ),
    'cardonfile' => FALSE,
  );
}

/**
 * Returns the standard fields for a PSI payment configuration form.
 *
 * @param array $settings
 *   Payment method settings.
 *
 * @return array
 *   Drupal forms API array.
 */
function _commerce_psi_settings_form($settings) {
  $form = array();
  $form['txn_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Mode'),
    '#options' => array(
      COMMERCE_PSI_MODE_LIVE => 'Live',
      COMMERCE_PSI_MODE_STAGING => 'Staging',
      COMMERCE_PSI_MODE_TEST => 'Test',
    ),
    '#default_value' => $settings['txn_mode'],
    '#required' => TRUE,
  );
  $form['account_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#default_value' => $settings['account_username'],
    '#required' => TRUE,
  );
  $form['account_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#default_value' => _commerce_psi_decrypt($settings['account_password']),
    '#value_callback' => '_commerce_psi_encrypt_settings_password',
    '#required' => TRUE,
  );
  if (module_exists('commerce_cardonfile')) {
    $form['cardonfile'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable Card on File functionality with this payment method.'),
      '#default_value' => $settings['cardonfile'],
    );
  }
  $form['custom_fields'] = array(
    '#type' => 'fieldset',
    '#title' => t('Custom Fields'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['custom_fields']['pay_code'] = array(
    '#type' => 'textfield',
    '#title' => t('Pay Code'),
    '#description' => t('The unique id value identifying the pay code of the donation. Maximum length of 20.'),
    '#default_value' => $settings['custom_fields']['pay_code'],
  );
  $form['custom_fields']['program_code'] = array(
    '#type' => 'textfield',
    '#title' => t('Program Code'),
    '#description' => t('A unique value indicating the program code for the donation. Maximum length of 12.'),
    '#default_value' => $settings['custom_fields']['program_code'],
  );
  $form['custom_fields']['source_code'] = array(
    '#type' => 'textfield',
    '#title' => t('Source Code'),
    '#description' => t('The unique id value identifying the source of the donation. Maximum length of 12.'),
    '#default_value' => $settings['custom_fields']['source_code'],
  );
  $form['custom_fields']['market_source'] = array(
    '#type' => 'textfield',
    '#title' => t('Market Source'),
    '#description' => t('A value identifying an additional source of the donation. Maximum length of 100.'),
    '#default_value' => $settings['custom_fields']['market_source'],
  );
  $form['custom_fields']['send_mail'] = array(
    '#type' => 'textfield',
    '#title' => t('Send Mail'),
    '#description' => t('Boolean true/false value. If true indicates donor accepted to receive future emails.'),
    '#default_value' => $settings['custom_fields']['send_mail'],
  );
  $form['custom_fields']['tokens'] = array(
    '#type' => 'fieldset',
    '#title' => t('Tracking Replacement Tokens'),
    '#description' => t('The following tokens are available for any of the custom fields.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $token_set = array('user', 'commerce-order');
  if (module_exists('fundraiser')) {
    $token_set[] = 'node';
    $token_set[] = 'donation';
  }
  $form['custom_fields']['tokens']['token_help'] = array(
    '#type' => 'item',
    '#title' => t('Drupal tokens'),
    '#description' => theme('token_tree', array('token_types' => $token_set, 'recursion_limit' => 2, 'click_insert' => FALSE)),
  );
  $form['log'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Log the following messages for debugging'),
    '#options' => array(
      'request' => t('API request messages'),
      'response' => t('API response messages'),
    ),
    '#default_value' => $settings['log'],
  );
  return $form;
}

/**
 * Construct an array of values for the donor.
 *
 * @param object $order
 *   Commerce order.
 * @param array $payment_method
 *   Payment method.
 *
 * @return array
 *   An array ready to be submitted to the PSI API.
 */
function _commerce_psi_build_donor($order, $payment_method) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  // If there's no billing address return nothing
  if (!$order_wrapper->commerce_customer_billing->value()) {
    return NULL;
  }
  $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();
  $donor = array();

  if (empty($billing_address['first_name'])) {
    $name_parts = explode(' ', $billing_address['name_line']);
    $donor['FirstName'] = drupal_substr(array_shift($name_parts), 0, 30);
    $donor['LastName'] = drupal_substr(implode(' ', $name_parts), 0, 30);
  }
  else {
    $donor['FirstName'] = drupal_substr($billing_address['first_name'], 0, 30);
    $donor['LastName'] = drupal_substr($billing_address['last_name'], 0, 30);
  }

  $donor += array(
    // Customer Information
    'Email' => drupal_substr($order->mail, 0, 80),
    'DonorId' => drupal_substr($order->uid, 0, 20),
    // Customer Billing Address
    'Title' => !empty($billing_address['title']) ? drupal_substr($billing_address['title'], 0, 20) : '',
    'Address1' => drupal_substr($billing_address['thoroughfare'], 0, 50),
    'Address2' => drupal_substr($billing_address['premise'], 0, 50),
    'City' => drupal_substr($billing_address['locality'], 0, 30),
    'StateProvince' => drupal_substr($billing_address['administrative_area'], 0, 50),
    'PostalCode' => drupal_substr($billing_address['postal_code'], 0, 20),
    'Country' => drupal_substr($billing_address['country'], 0, 30),
    'Phone' => !empty($billing_address['phone']) ? drupal_substr($billing_address['phone'], 0, 20) : 'N/A',
    'SendEmail' => _commerce_psi_token_replace($payment_method['settings']['custom_fields']['send_mail'], $order),
  );

  return $donor;
}

/**
 * Replace tokens in the custom fields.
 *
 * @param string $value
 *   The text that needs token replacement.
 * @param object $order
 *   The order object needed to provide replacements.
 *
 * @return string
 *   The text with tokens replaced.
 */
function _commerce_psi_token_replace($value, $order) {
  $token_set = &drupal_static(__FUNCTION__ . $order->order_id, array());
  if (empty($token_set)) {
    $token_set['user'] = user_load($order->uid);
    $token_set['commerce-order'] = $order;
    if (module_exists('fundraiser')) {
      $donation = fundraiser_donation_get_donation($order->order_id);
      $token_set['node'] = $donation->node;
      $token_set['donation'] = $donation;
    }
  }
  return token_replace($value, $token_set, array('clear' => TRUE));
}

/**
 * Encrypt the password of the accounts
 */
function _commerce_psi_encrypt_settings_password($element, $input = FALSE, $form_state) {
  if (!empty($input)) {
    return _commerce_psi_encrypt($input);
  }

  return NULL;
}

/**
 * Helper function, wrapper for encrypt function.
 */
function _commerce_psi_encrypt($input) {
  return encrypt($input);
}

/**
 * Helper function, wrapper for decrypt function.
 */
function _commerce_psi_decrypt($input) {
  return decrypt($input);
}

/**
 * Send an upsell request to PSI.
 *
 * @param array $payment_method
 *   Payment method info.
 * @param array $upsell_info
 *   An associative array with the following items.
 *     float Amount
 *     string ClientTransactionId
 *     string PriorOneTimeTransactionId
 *     string Frequency
 *     string MarketSource
 *     string PayCode
 *     string ProcessDateTime
 *     string ProgramCode - Optional
 *     string sourceCode - Optional
 *
 * @return object|NULL
 *   The response object from PSI.
 */
function commerce_psi_send_upsell($payment_method, $upsell_data) {
  $account_details = $payment_method['settings'];
  $account_details['account_password'] = _commerce_psi_decrypt($payment_method['settings']['account_password']);
  $account_details['title'] = $payment_method['title'];
  $client = new PsiClient($account_details);

  commerce_psi_log_request($payment_method, $upsell_data);

  if (!empty($client)) {
    $response = $client->SendUpsell($upsell_data);
  }
  else {
    $response = NULL;
  }

  commerce_psi_log_response($payment_method, $response);

  return $response;
}

function commerce_psi_log_request($payment_method, $request) {
  // Log the request if specified.
  if ($payment_method['settings']['log']['request'] === 'request') {
    watchdog('commerce_psi', 'PSI request: !param', array('!param' => '<pre>' . check_plain(print_r($request, TRUE)) . '</pre>'), WATCHDOG_DEBUG);
  }
}

function commerce_psi_log_response($payment_method, $response) {
  // Log the response if specified.
  if ($payment_method['settings']['log']['response'] === 'response') {
    watchdog('commerce_psi', 'PSI response: !param', array('!param' => '<pre>' . check_plain(print_r($response, TRUE)) . '</pre>', WATCHDOG_DEBUG));
  }
}

function commerce_psi_get_market_source($payment_method, $order) {
  return drupal_substr(_commerce_psi_token_replace($payment_method['settings']['custom_fields']['market_source'], $order), 0, 100);
}

function commerce_psi_get_pay_code($payment_method, $order) {
  return drupal_substr(_commerce_psi_token_replace($payment_method['settings']['custom_fields']['pay_code'], $order), 0, 20);
}

function commerce_psi_get_program_code($payment_method, $order) {
  return drupal_substr(_commerce_psi_token_replace($payment_method['settings']['custom_fields']['program_code'], $order), 0, 12);
}

function commerce_psi_get_source_code($payment_method, $order) {
  return drupal_substr(_commerce_psi_token_replace($payment_method['settings']['custom_fields']['source_code'], $order), 0, 12);
}
