<?php

/**
 * Implements hook_fundraiser_gateway_info().
 *
 * This module exposes the payment gateways provided by this module and the commerce_payflow module
 */
function fundraiser_commerce_payflow_fundraiser_gateway_info() {
  // Load all the methods available.
  $methods = new stdClass();
  $methods->payment_methods = array();
  rules_invoke_all('commerce_payment_methods', $methods);
  $fundraiser_gateways = array();

  // Loop through the configured payment rules and look for payflow rules
  foreach ($methods->payment_methods as $id => $info) {
    $this_gateway = array();
    $method_instance = commerce_payment_method_instance_load($id);
    list($method_id, $rule_name) = explode('|', $method_instance['instance_id']);

    $payflow_types = array(
      'payflow_link',
      'paypal_ppa',
      'payflow_cc',
      'payflow_eft',
    );

    // Add gateway information for a commerce payflow rule
    if (!empty($method_id) && !empty($rule_name) && in_array($method_instance['method_id'], $payflow_types)) {
      // Include the commerce payment method functions file
      module_load_include('inc', 'fundraiser_commerce_payflow', 'includes/fundraiser_gateways/' . $method_instance['method_id']);

      // Add the standard info for a payflow gateway
      $this_gateway = _fundraiser_commerce_payflow_standard_gateway_settings($rule_name, $method_instance);

      // Add the specific gateway config for fundraiser
      $function = 'fundraiser_commerce_' . $method_instance['method_id'] . '_gateway_info';
      if (function_exists($function)) {
        $this_gateway += $function($method_instance);
      }

      // Add this to the main gateway
      $fundraiser_gateways[$this_gateway['id']] = $this_gateway;
    }
  }

  return $fundraiser_gateways;
}

/**
 * Assembles the standard gateway config for the payflow gateway settings
 */
function _fundraiser_commerce_payflow_standard_gateway_settings($rule_name, $method_instance) {
  $rule_config = rules_config_load($rule_name);
  return array(
    'id' => $method_instance['instance_id'],
    'module' => 'fundraiser_commerce_payflow',
    'module_name' => t('Fundraiser Commerce Payflow'),
    'title' => $rule_config->label,
    'description' => $method_instance['description'],
    'gateway_details' => $method_instance,
  );
}

/**
 * Implements hook_commerce_payment_method_info
 */
function fundraiser_commerce_payflow_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['payflow_cc'] = array(
    'base' => 'commerce_payflow_cc',
    'title' => t('Fundraiser Payflow Credit Card'),
    'short_title' => t('Payflow Onsite CC'),
    'display_title' => t('Credit card'),
    'description' => t('Integrates Payflow for onsite credit card transactions.'),
    'file' => 'includes/fundraiser_commerce_payflow.payflow_cc.inc'
  );

  $payment_methods['payflow_eft'] = array(
    'base' => 'commerce_payflow_eft',
    'title' => t('Fundraiser Payflow EFT'),
    'short_title' => t('Payflow Onsite EFT'),
    'display_title' => t('EFT'),
    'description' => t('Integrates Payflow for onsite EFT transactions.'),
    'file' => 'includes/fundraiser_commerce_payflow.payflow_eft.inc'
  );

  return $payment_methods;
}

/**
 * Implements hook_preprocess_webform_confirmation().
 */
function fundraiser_commerce_payflow_preprocess_webform_confirmation(&$vars) {
  $donation = _fundraiser_webform_get_donation_by_sid($vars['sid']);

  // If this donation was handled by commerce payflow add the redirect script
  if (!empty($donation->gateway['gateway_details']['module'])
   && $donation->gateway['gateway_details']['module'] == 'commerce_payflow') {
    // Use the payflow modules redirect script
    drupal_add_js(drupal_get_path('module', 'commerce_payflow') . '/commerce_payflow.js');
  }
}

/**
 * Implements hook_commerce_payflow_api_request_alter().
 */
function fundraiser_commerce_payflow_commerce_payflow_api_request_alter(&$nvp, $order, $payment_method) {
  // If this request is for a form and is a fundraiser donation then change some of the values
  if (!empty($nvp['RETURNURL']) && $donation = fundraiser_donation_get_donation($order->order_id)) {
    $node = $donation->node;
    $redirect_key = $order->data['payment_redirect_key'];
    $options = array('absolute' => TRUE);
    $nvp['RETURNURL'] = url('node/' . $donation->nid . '/fundraiser-return/' . $donation->did . '/' . $redirect_key, $options);
    $nvp['CANCELURL'] = url('node/' . $donation->nid . '/fundraiser-cancel/' . $donation->did . '/' . $redirect_key, $options);
    $nvp['ERRORURL'] = url('node/' . $donation->nid, $options);
  }
}

/**
 * Callback function, scrub the data before saving.
 */
function _fundraiser_commerce_payflow_expire($submission_fields) {
  module_load_include('inc', 'fundraiser_commerce', 'includes/fundraiser_commerce.credit_card');
  return _fundraiser_commerce_credit_card_expire($submission_fields);
}

/**
 * Process a reference transaction via Payflow Pro with a PNREF token.
 */
function _fundraiser_commerce_payflow_pnref_reference_charge($donation) {
  $master = fundraiser_donation_get_donation($donation->recurring->master_did);
  $method_instance = $donation->gateway['gateway_details'];
  $order = commerce_order_load($donation->did);
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Pull the pnref from the master donation
  if (!empty($master->data['payflow_pnref'])) {
    $orig_id = $master->data['payflow_pnref'];
  }
  else {
    // If the PNREF is empty try the remote id
    $orig_id = $master->data['remote_id'];
  }

  // Set the charge values
  $charge = commerce_currency_amount_to_decimal(
    $order_wrapper->commerce_order_total->amount->value(),
    $order_wrapper->commerce_order_total->currency_code->value()
  );

  // Prepare a name-value pair array to capture the requested amount.
  $nvp = array(
    'BUTTONSOURCE' => !empty($method_instance['buttonsource']) ? $method_instance['buttonsource'] : '',
    'TRXTYPE' => 'S',
    'ORIGID' => $orig_id,
    'AMT' => $charge,
    'TENDER' => 'C',
  );

  // Submit the reference transaction request to Payflow Pro.
  $response = commerce_payflow_api_request($method_instance, 'pro', $nvp, $order);

  // Create a new transaction to represent the reference transaction.
  $transaction = commerce_payment_transaction_new($method_instance['method_id'], $order->order_id);
  $transaction->instance_id = $method_instance['instance_id'];
  $transaction->amount = $order_wrapper->commerce_order_total->amount->value();
  $transaction->currency_code = $order_wrapper->commerce_order_total->currency_code->value();
  $transaction->payload[REQUEST_TIME] = $response;
  $transaction->remote_id = $response['PNREF'];
  $transaction->data['commerce_payflow']['pnref'] = $response['PNREF'];

  if (!empty($response['PAYMENTSTATUS'])) {
    $transaction->remote_status = commerce_payflow_paypal_remote_status($response['PAYMENTSTATUS']);
  }

  // Build the response message.
  $message = array(
    '<b>Response: @response</b>',
  );

  $transaction->message_variables = array(
    '@response' => $response['RESPMSG'],
    '@origid' => $orig_id,
  );

  if (isset($response['RESULT']) && intval($response['RESULT']) === 0) {
    $message[] = 'Reference transaction ID: @origid';
    $message[] = 'Authcode: @authcode';
    $transaction->message_variables['@authcode'] = $response['AUTHCODE'];

    // Add the PayPal billing agreement ID and fees if given.
    if (!empty($response['BAID'])) {
      $message[] = 'Billing agreement ID: @baid';
      $transaction->message_variables['@baid'] = $response['BAID'];
    }

    if (!empty($response['FEEAMT'])) {
      $message[] = 'PayPal fees: @feeamt';
      $transaction->message_variables['@feeamt'] = $response['FEEAMT'];
    }

    //Save this transactions PNREF back to the master donation
    $master->data['payflow_pnref'] = $response['PNREF'];
    fundraiser_donation_update($master);

    $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
    $success = TRUE;
  }
  else {
    // Display an error message but leave the transaction pending.
    $message[] = 'Failed reference transaction from @origid.';
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
    $success = FALSE;
  }

  // Save the transaction and return the success value
  $transaction->message = implode('<br />', $message);
  commerce_payment_transaction_save($transaction);
  return $success;
}

/**
 * Submit handler: process a refund via Payflow Pro.
 */
function _fundraiser_commerce_payflow_refund($method_instance, $refund) {
  $donation = fundraiser_donation_get_donation($refund->did);
  $method_instance = $donation->gateway['gateway_details'];
  $order = commerce_order_load($donation->did);

  // Prepare a name-value pair array to capture the requested amount.
  $nvp = array(
    'TRXTYPE' => 'C',
    'ORIGID' => $donation->data['remote_id'],
    'AMT' => $refund->amount,
  );

  // Submit the refund request to Payflow Pro.
  $response = commerce_payflow_api_request($method_instance, 'pro', $nvp, $order);

  // If the credit succeeded...
  if (intval($response['RESULT']) === 0) {
    $credit_amount = commerce_currency_decimal_to_amount($refund->amount, $donation->currency);
    drupal_set_message(t('Refund for @amount issued successfully.', array('@amount' => commerce_currency_format($credit_amount, $donation->currency))));

    // Create a new transaction to record the credit.
    $credit_transaction = commerce_payment_transaction_new($method_instance['method_id'], $order->order_id);
    $credit_transaction->instance_id = $method_instance['instance_id'];
    $credit_transaction->remote_id = $response['PNREF'];
    $credit_transaction->amount = $credit_amount * -1;
    $credit_transaction->currency_code = $donation->currency;
    $credit_transaction->payload[REQUEST_TIME] = $response;
    $credit_transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
    $credit_transaction->remote_status = 'C';
    $credit_transaction->message = t('Refunded to @remote_id.', array('@remote_id' => $donation->data['remote_id']));

    // Save the credit transaction.
    commerce_payment_transaction_save($credit_transaction);
    return TRUE;
  }
  else {
    // Display a failure message and response reason from Payflow.
    drupal_set_message(t('Refund failed: @reason', array('@reason' => $response['RESPMSG'])), 'error');
    return FALSE;
  }
}

/**
 * Retrieve the pnref value from the order's transaction.
 *
 * @param $order_id Numeric
 *    The commerce order id to load the transaction.
 */
function _fundraiser_commerce_payflow_transaction_pnref($order_id) {
  // Query the db the latest transaction for the order id.
  $data = db_select('commerce_payment_transaction', 't')
    ->fields('t', array('data'))
    ->condition('t.order_id', $order_id, '=')
    ->orderBy('transaction_id', 'DESC')
    ->range(0, 1)
    ->execute()
    ->fetchField();

  if (!empty($data)) {
    $data = unserialize($data);
    return !empty($data['commerce_payflow']['pnref']) ? $data['commerce_payflow']['pnref'] : FALSE;
  }
}

/**
 * Callback function, return expiration dates for this submission.
 */
function fundraiser_commerce_payflow_eft_expire($submission_fields) {
  // No expiration dates are provided, so we provide a default, 24 months away.
  $exp_timestamp = strtotime('+24 months');
  return array(
    'month' => date('m', $exp_timestamp),
    'year' => date('Y', $exp_timestamp),
  );
}
