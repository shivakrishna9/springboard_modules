<?php

/**
 * @file
 * Install, update and uninstall functions for the fundraiser_commerce module.
 */

/**
 * Implements hook_schema()
 */
function fundraiser_commerce_schema() {
  $schema['fundraiser_commerce_gateway_response'] = array(
    'description' => 'The base table for nodes.',
    'fields' => array(
      'did' => array(
        'description' => 'Donation ID - other tables call it order_id',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'gateway_id' => array(
        'description' => 'The payment gateway type and instance.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'field_name' => array(
        'description' => 'The machine name of the gateway response field.',
        'type' => 'varchar',
        'length' => '127',
        'not null' => TRUE,
      ),
      'value' => array(
        'description' => 'The data string returned with the gateway response.',
        'type' => 'text',
        'size' => 'normal',
      ),
    ),
    'indexes' => array(
      'did' => array('did'),
      'did_gateway_id' => array('did', 'gateway_id'),
      'did_field_name' => array('did', 'field_name'),
    ),
    'unique keys' => array(
      'did_gateway_field' => array('did', 'gateway_id', 'field_name'),
    ),
  );

  $schema['fundraiser_commerce_gateway_settings_log'] = array(
    'description' => 'Log changes to the gateway setting',
    'fields' => array(
      'lid' => array(
        'description' => 'log id',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'gateway_id' => array(
        'description' => 'The payment gateway type and instance.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'The user who made the change',
        'type' => 'int',
        'length' => '10',
        'not null' => TRUE,
      ),
      'value' => array(
        'description' => 'The array of values',
        'type' => 'text',
        'size' => 'normal',
      ),
      'time' => array(
        'description' => 'The timestamp',
        'type' => 'int',
        'length' => '11',
        'not null' => TRUE,
      ),
    ),
   'indexes' => array(
      'lid' => array('lid'),
    ),
  );
  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function fundraiser_commerce_uninstall() {
}

/**
 * Removed update function
 */
function fundraiser_commerce_update_7001() { }

/**
 * Update fundraiser commerce's order data to the latest encryption scheme.
 * Please be sure you've applied these two patches to the encrypt module before running this update:
 * https://drupal.org/files/encrypt_key_is_never_used.patch
 * https://github.com/JacksonRiver/Springboard-Build/blob/7.x-4.x/patches/encrypt-trim-only-decrypted-output.patch
 */
function fundraiser_commerce_update_7002(&$sandbox) {
  // Ensure the encryption function is here
  module_load_include('inc', 'encrypt', 'includes/encrypt.encrypt');
  $results = db_query('SELECT order_id FROM commerce_order');

  // Prepare the sandbox info
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $sandbox['current_order_id'] = 0;
    $sandbox['max'] = db_query('SELECT COUNT(DISTINCT order_id) FROM {commerce_order}')->fetchField();
  }

  $results = db_select('commerce_order', 'o')
    ->fields('o', array('order_id'))
    ->condition('order_id', $sandbox['current_order_id'], '>')
    ->range(0, 3)->orderBy('order_id', 'ASC')
    ->execute();

  foreach ($results as $row) {
    // Retrieve the data with stripslashes and old encryption method
    $order = commerce_order_load($row->order_id);

    // If the data has been encrypted with the mcrypt_rij_256 method we need to un-encrypt it using the drupal private key
    $encryption_array = unserialize($order->data['fundraiser_commerce']);

    if ($encryption_array['method'] == 'mcrypt_rij_256') {
      // Pass an empty options array so the function will use the drupal private key
      $decrypted = encrypt_encrypt_mcrypt_rij_256('decrypt', $encryption_array['text'], array());

      // Get the data array, remove the slashes that had been added before
      $data_array = unserialize(stripslashes($decrypted));

      // If we have an array then this is data we can work with. this will prevent working with data thats been corrected
      if (!empty($data_array)) {
        // Remove the message variable
        if (isset($data_array['message'])) {
          unset($data_array['message']);
        }

        // send the data back through the prepare function so it will use the new method
        $order->data['fundraiser_commerce'] = _fundraiser_commerce_order_data_prepare($data_array);

        // If we get back value we're good, otherwise error out with a message, the order data needs to be fixed
        if (empty($order->data['fundraiser_commerce'])) {
          throw new DrupalUpdateException('There was an error encrypting the data for order #' . $order->order_id);
        }
        else {
          commerce_order_save($order);
        }
      }
    }

    $sandbox['progress']++;
    $sandbox['current_order_id'] = $order->order_id;
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);

  // To display a message to the user when the update is completed, return it.
  // If you do not want to display a completion message, simply return nothing.
  if ($sandbox['#finished'] >= 1) {
    return t('The fundraiser commerce order data has been re-encrypted.');
  }
}

/**
 * Add the new {fundraiser_commerce_gateway_response} table.
 */
function fundraiser_commerce_update_7003() {
  $schema = fundraiser_commerce_schema();
  db_create_table('fundraiser_commerce_gateway_response', $schema['fundraiser_commerce_gateway_response']);
}

/**
 * Add the new {fundraiser_commerce_gateway_settings_log} table.
 */
function fundraiser_commerce_update_7004() {
  $schema = fundraiser_commerce_schema();
  if (!db_table_exists('fundraiser_commerce_gateway_settings_log')) {
    db_create_table('fundraiser_commerce_gateway_settings_log', $schema['fundraiser_commerce_gateway_settings_log']);
  }
}

