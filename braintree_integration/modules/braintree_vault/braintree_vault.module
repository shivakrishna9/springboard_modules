<?php
/**
 * @file
 * Provides integration with Braintree Vault.
 */

require_once 'inc/braintree_vault.braintree_php.inc';

/**
 * Implements hook_menu().
 */
function braintree_vault_menu() {
  $items[BRAINTREE_ADMIN_PATH . '/vault'] = array(
    'title' => 'Braintree Vault',
    'description' => 'Setup up Braintree vault ID.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('braintree_vault_admin_settings'),
    'access arguments' => array('administer braintree settings'),
    'file' => 'inc/braintree_vault.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  $base_url = braintree_vault_payment_method_base_url();

  if (empty($base_url)) {
    drupal_set_message('Braintee payment method base URL is not right, click <a href="@url">here</a> to fix it.', array(
      '@url' => url(BRAINTREE_ADMIN_PATH . '/vault'),
    ));
  }
  else {
    $position = count(explode('/', $base_url));

    $items[$base_url . '/add'] = array(
      'title' => 'Add new payment type',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('braintree_payment_method_form', 'add'),
      'access arguments' => array('manage braintree payment method'),
      'file' => 'inc/braintree_vault.pages.inc',
    );
    $items[$base_url . '/%/edit'] = array(
      'title' => 'Edit payment method',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(
        'braintree_payment_method_form',
        'edit',
        $position,
      ),
      'access arguments' => array('manage braintree payment method'),
      'file' => 'inc/braintree_vault.pages.inc',
    );
    $items[$base_url . '/%/remove'] = array(
      'title' => 'Remove payment method',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('braintree_payment_method_remove_form', $position),
      'access arguments' => array('manage braintree payment method'),
      'file' => 'inc/braintree_vault.pages.inc',
    );
    $items[$base_url . '/%/make_default'] = array(
      'title' => 'Make primary payment method',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('braintree_payment_method_make_default_form', $position),
      'access arguments' => array('manage braintree payment method'),
      'file' => 'inc/braintree_vault.pages.inc',
    );

    if (variable_get('braintree_vault_use_payment_methods_page', TRUE)) {
      $items[$base_url] = array(
        'title' => 'Payment details',
        'page callback' => 'braintree_payment_methods_page',
        'access arguments' => array('manage braintree payment method'),
        'file' => 'inc/braintree_vault.pages.inc',
      );
    }
  }
  return $items;
}

/**
 * Implements hook_permission().
 */
function braintree_vault_permission() {
  return array(
    'manage braintree payment method' => array(
      'title' => t('Manage Braintree payment method'),
      'description' => t('Allow user to manage their Braintree payment method.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function braintree_vault_theme($existing, $type, $theme, $path) {
  return array(
    'braintree_payment_methods' => array(
      'variables' => array(
        'customer' => NULL,
      ),
      'template' => 'tpl/braintree-payment-methods',
      'file' => 'inc/braintree_vault.theme.inc',
    ),
    'braintree_payment_method' => array(
      'variables' => array(
        'payment_method' => NULL,
        'delta' => NULL,
        'is_default' => FALSE,
        'has_links' => FALSE,
      ),
      'template' => 'tpl/braintree-payment-method',
      'file' => 'inc/braintree_vault.theme.inc',
    ),
    'braintree_payment_method_label' => array(
      'variables' => array(
        'payment_method' => NULL,
        'delta' => NULL,
      ),
      'file' => 'inc/braintree_vault.theme.inc',
    ),
  );
}

/**
 * Implements hook_hook_info().
 */
function braintree_vault_hook_info() {
  $hooks = array(
    'braintree_vault_customer_data_alter',
    'braintree_vault_customer_saved',
    'braintree_vault_payment_method_alter',
    'braintree_vault_payment_method_saved',
    'braintree_vault_payment_method_delete',
    'braintree_vault_payment_method_make_default',
  );
  foreach ($hooks as $hook) {
    $hook_info[$hook] = array(
      'group' => 'braintree',
    );
  };
  return $hook_info;
}

/**
 * Look up Braintree customer object by Drupal account.
 *
 * @param object $account
 *   The user's Drupal account.
 *
 * @return bool|\Braintree_Customer
 *   The customer's Braintree_Customer object if found, FALSE otherwise.
 */
function braintree_vault_load_customer_by_account($account) {
  if ($customer_id = braintree_vault_customer_id($account)) {
    $customer = braintree_vault_customer_load($customer_id);
    return $customer;
  }

  return FALSE;
}

/**
 * Manually reset customer cache data.
 *
 * @param int $uid
 *   The user ID.
 */
function braintree_vault_customer_cache_reset($uid) {
  $customers = &drupal_static('braintree_vault_customer_cache', array());
  $customers[$uid] = NULL;
}

/**
 * Get Braintree customer ID from a user account.
 *
 * @param object|null $account
 *   The Drupal account to retrieve the customer ID for.
 *
 * @return int|bool
 *   The customer ID or FALSE if not found.
 */
function braintree_vault_customer_id($account = NULL) {
  if (is_null($account)) {
    global $user;
    $account = $user;
  }

  if ($account->uid == 0) {
    return FALSE;
  }

  $customer_id = db_query('SELECT customer_id FROM {braintree_vault_payment_methods} WHERE uid = :uid', array(
    ':uid' => $account->uid,
  ))->fetchField();

  drupal_alter('braintree_vault_customer_id', $customer_id, $account);

  return $customer_id;
}

/**
 * Return default payment method from a customer.
 *
 * @param Braintree_Customer $customer
 *   The customer object.
 *
 * @return Braintree_CreditCard|BrainTree_PayPalAccount
 *   The default payment method.
 */
function braintree_vault_customer_default_payment_method($customer) {
  return $customer->defaultPaymentMethod();
}

/**
 * Check if a payment method is the default.
 *
 * @param Braintree_CreditCard|BrainTree_PayPalAccount $payment_method
 *   The payment method to test.
 *
 * @return bool
 *   TRUE if this payment method is default, FALSE otherwise.
 */
function braintree_vault_payment_method_is_default($payment_method) {
  return $payment_method->default == 1;
}

/**
 * Load a payment method by token.
 *
 * @param string $token
 *   The token.
 * @param Braintree_Customer $account
 *   The customer's account.
 *
 * @return Braintree_CreditCard|BrainTree_PayPalAccount
 *   The payment method.
 */
function braintree_vault_load_payment_method_by_token($token, $account) {
  $customer = braintree_vault_load_customer_by_account($account);

  foreach ($customer->paymentMethods as $payment_method) {
    if ($payment_method->token == $token) {
      return $payment_method;
    }
  }

  return FALSE;
}

/**
 * Return payment method of an account by delta.
 *
 * @param int $delta
 *   The delta.
 * @param null|object $account
 *   The user's Drupal account object.
 *
 * @return Braintree_CreditCard|BrainTree_PayPalAccount|bool
 *   The payment method, or FALSE if not found.
 */
function braintree_vault_payment_method_load_by_delta($delta, $account = NULL) {
  if (is_null($account)) {
    global $user;
    $account = $user;
  }

  $customer = braintree_vault_load_customer_by_account($account);
  if ($customer) {
    $payment_methods = braintree_vault_payment_methods_sorted($customer->paymentMethods);
    if (isset($payment_methods[$delta])) {
      return $payment_methods[$delta];
    }
  }

  return FALSE;
}

/**
 * Return sorted list of payment methods for a customer.
 *
 * The delta of payment methods returned by Braintree varies greatly and is
 * unreliable. So by sorting all payment methods by created time, we can get a
 * new, more reliable delta to use.
 *
 * @param array $payment_methods
 *   An array of payment methods.
 *
 * @return array
 *   An array of sorted payment methods.
 */
function braintree_vault_payment_methods_sorted($payment_methods) {
  uasort($payment_methods, '_braintree_vault_sort_by_created_date');
  $payment_methods = array_values($payment_methods);
  return $payment_methods;
}

/**
 * Helper function to compare created time of two payment method.
 *
 * @param $a
 * @param $b
 * @return int
 */
function _braintree_vault_sort_by_created_date($a, $b) {
  if ($a->createdAt == $b->createdAt) {
    return 0;
  }

  return $a->createdAt < $b->createdAt ? -1 : 1;
}

/**
 * Helper function to return an array of options for payment methods.
 *
 * @param array $payment_methods
 *   An array of payment methods to create options for.
 *
 * @return array
 *   An array of label options keyed by the payment method's token.
 */
function braintree_vault_payment_method_options($payment_methods) {
  $options = array();

  foreach ($payment_methods as $payment_method) {
    if (braintree_payment_method_is_credit_card($payment_method)) {
      $label = t('@card_type ending in @last4', [
        '@card_type' => $payment_method->cardType,
        '@last4' => $payment_method->last4,
      ]);
    }
    elseif (braintree_payment_method_is_paypal($payment_method)) {
      $label = t('PayPal @email', [
        '@email' => $payment_method->email,
      ]);
    }
    else {
      // @TODO support other payment method types.
      $label = $payment_method->token;
    }

    $options[$payment_method->token] = $label;
  }

  return $options;
}

/**
 * Helper function to retrieve the base URL for payment methods.
 *
 * @return string
 *   The base URL for payment methods.
 */
function braintree_vault_payment_method_base_url() {
  return variable_get('braintree_payment_base_url', 'payment_methods');
}

/**
 * Build the payment operation URL.
 *
 * @param string $action
 *   An action, either 'add', 'edit', 'make_default', 'remove', or 'list'.
 * @param string|null $delta
 *   The payment method delta. Use when $action is 'edit', 'make_default', or
 *   'remove'.
 *
 * @return string
 *   The payment operation URL.
 */
function braintree_vault_payment_method_url($action, $delta = NULL) {
  $url = braintree_vault_payment_method_base_url() . '/';

  switch ($action) {
    case 'add':
      $url .= $action;
      break;

    case 'edit':
    case 'make_default':
    case 'remove':
      $url .= $delta . '/' . $action;
      break;

    case 'list':
      break;
  }

  return $url;
}

/**
 * Get payment method list page.
 *
 * @param bool $form_redirect
 *   TRUE if this function is being used in conjunction with a form redirect.
 * @param bool $render
 *   TRUE to return a `url`-rendered URL.
 *
 * @return array|string
 *   If $form_redirect is TRUE, and the
 *   `braintree_vault_use_payment_methods_page` variable is not TRUE, an array
 *   structure of ['path' => ..., 'options'  => ...]. Otherwise, a URL.
 */
function braintree_vault_payment_method_list_url($form_redirect = FALSE, $render = FALSE) {
  if (variable_get('braintree_vault_use_payment_methods_page', 1)) {
    $url = braintree_vault_payment_method_base_url();

    if ($render) {
      $url = url($url);
    }
  }
  else {
    $url = braintree_vault_payment_methods_custom_page($form_redirect, $render);
  }

  return $url;
}

/**
 * Interpolate payment methods custom page URL.
 *
 * @param bool $form_redirect
 *   TRUE if this function is being used in conjunction with a form redirect.
 * @param bool $render
 *   TRUE to return a `url`-rendered URL.
 *
 * @return array|string
 *   If $form_redirect is TRUE, an array structure of ['path' => ..., 'options'
 *   => ...]. Otherwise, a URL.
 */
function braintree_vault_payment_methods_custom_page($form_redirect = FALSE, $render = FALSE) {
  $path = variable_get('braintree_vault_payment_methods_custom_page', 'user');
  $options = array();

  if (strpos($path, '#') !== FALSE) {
    list($path, $fragment) = explode('#', $path, 2);
    // If $options contains no fragment, take it over from the path.
    if (isset($fragment)) {
      $options['fragment'] = $fragment;
    }
  }

  if ($form_redirect) {
    return array(
      'path' => $path,
      'options' => $options,
    );
  }

  if (!empty($options) && !$render) {
    $options['path'] = $path;
    return $options;
  }

  return $render ? url($path, $options) : $path;
}

/**
 * Implements hook_commerce_braintree_web_submit_form_customer_alter().
 */
function braintree_vault_commerce_braintree_web_submit_form_customer_alter(&$customer) {
  if (!empty($customer['mail'])) {
    $customer['customer'] = user_load_by_mail($customer['mail']);
    $customer['id'] = braintree_vault_customer_id($customer['customer']);
  }
}

/**
 * Implements hook_braintree_transaction_sale_data().
 *
 * Invoked from `braintree_transaction_sale` before the transaction is sent to
 * Braintree, adjusts $sale_data to either store a new user in the Braintree
 * Vault or use the user's existing customer ID.
 */
function braintree_vault_braintree_transaction_sale_data_alter(&$sale_data, &$context) {
  if (!empty($sale_data['customerId'])) {
    return;
  }

  $customer_id = braintree_vault_get_customer_id_by_email($sale_data['customer']['email']);
  if ($customer_id === FALSE) {
    $sale_data['options']['storeInVaultOnSuccess'] = TRUE;
  }
  else {
    $sale_data['customerId'] = $customer_id;
  }
}

/**
 * Implements hook_braintree_transaction_sale_complete().
 *
 * Adds the user's customer ID to their braintree customer ID field.
 */
function braintree_vault_braintree_transaction_sale_complete($context) {
  $user = user_load_by_mail($context['result']->transaction->customer['email']);
  if (empty($user) && user_is_logged_in()) {
    global $user;
  }
  if ($user->uid == 0) {
    return;
  }

  $data = array(
    'customer_id' => $context['result']->transaction->customer['id'],
    'uid' => $user->uid,
  );

  if (!empty($context['result']->transaction->billing['id'])) {
    $billing_fields = $context['result']->transaction->billing;
    $data['address_id'] = $billing_fields['id'];
    $profile_id = db_query('SELECT entity_id FROM {field_data_commerce_customer_address} WHERE commerce_customer_address_country = :ccac AND commerce_customer_address_administrative_area = :ccaaa AND commerce_customer_address_locality = :ccal AND commerce_customer_address_postal_code = :ccapc AND commerce_customer_address_thoroughfare = :ccat AND commerce_customer_address_first_name = :ccafn AND commerce_customer_address_last_name = :ccaln', array(
      ':ccac' => $billing_fields['countryCodeAlpha2'],
      ':ccaaa' => $billing_fields['region'],
      ':ccal' => $billing_fields['locality'],
      ':ccapc' => $billing_fields['postalCode'],
      ':ccat' => $billing_fields['streetAddress'],
      ':ccafn' => $billing_fields['firstName'],
      ':ccaln' => $billing_fields['lastName'],
    ))->fetchField();
    $data['profile_id'] = $profile_id;
    $data['payment_method_token'] = $context['result']->transaction->creditCard['token'];
    braintree_vault_add_address_record($data);
  }
}

/**
 * Implements hook_commerce_braintree_web_submit_transaction_sale_success().
 *
 * Creates a new record in braintree_vault_payment_methods for the user and the
 * payment method they used.
 */
function braintree_vault_commerce_braintree_web_submit_transaction_sale_success($result, $card) {
  if (!empty($result->transaction->creditCard['token'])) {
    $data = array(
      'customer_id' => $result->transaction->customer['id'],
      'uid' => $card->uid,
    );
    $data['payment_method_token'] = $result->transaction->creditCard['token'];
    $data['unique_identifier'] = $result->transaction->creditCard['uniqueNumberIdentifier'];
    $data['card_id'] = $card->card_id;
    braintree_vault_add_payment_method_record($data);
  }
}

/**
 * Creates an address record in the braintree_vault_addresses table.
 */
function braintree_vault_add_address_record($data) {
  drupal_alter('braintree_vault_add_address_record', $data);
  $required_fields = array(
    'customer_id',
    'uid',
    'address_id',
    'profile_id',
    'payment_method_token',
  );
  foreach ($required_fields as $r) {
    if (!array_key_exists($r, $data)) {
      watchdog('braintree_vault', 'The $data variable must contain a :type entry.', array(
        ':type' => $r,
      ), WATCHDOG_WARNING);
      return;
    }
  }

  db_merge('braintree_vault_addresses')
    ->key(array('address_id' => $data['address_id']))
    ->fields(array(
      'address_id' => $data['address_id'],
      'uid' => $data['uid'],
      'customer_id' => $data['customer_id'],
      'profile_id' => $data['profile_id'],
      'payment_method_token' => $data['payment_method_token'],
    ))
    ->execute();
}

/**
 * Creates an address record in the braintree_vault_payment_methods table.
 */
function braintree_vault_add_payment_method_record($data) {
  drupal_alter('braintree_vault_add_payment_method_record', $data);
  $required_fields = array(
    'customer_id',
    'uid',
    'payment_method_token',
    'card_id',
    'unique_identifier',
  );
  foreach ($required_fields as $r) {
    if (!array_key_exists($r, $data)) {
      watchdog('braintree_vault', 'The $data variable must contain a :type entry.', array(
        ':type' => $r,
      ), WATCHDOG_WARNING);
      return;
    }
  }

  // Update {braintree_vault_payment_methods} record.
  db_merge('braintree_vault_payment_methods')
    ->key(array(
      'payment_method_token' => $data['payment_method_token'],
      'card_id' => $data['card_id'],
    ))
    ->fields(array(
      'uid' => $data['uid'],
      'customer_id' => $data['customer_id'],
      'payment_method_token' => $data['payment_method_token'],
      'card_id' => $data['card_id'],
      'unique_identifier' => $data['unique_identifier'],
    ))
    ->execute();
}

/**
 * Helper function to retrieve a Braintree Vault customer ID by Drupal user ID.
 *
 * @param int $uid
 *   The Drupal user's uid.
 *
 * @return bool|int
 *   The Braintree Vault customer ID or FALSE if not found.
 */
function braintree_vault_get_customer_id_by_uid($uid) {
  return db_query('SELECT customer_id FROM {braintree_vault_payment_methods} WHERE uid = :uid', array(
    ':uid' => $uid,
  ))->fetchField();
}

/**
 * Helper function to get a Braintree Vault customer ID by Drupal user email.
 *
 * @param string $email
 *   The user's email.
 *
 * @return bool|int
 *   The Braintree Vault customer ID or FALSE if not found.
 */
function braintree_vault_get_customer_id_by_email($email) {
  $user = user_load_by_mail($email);
  if (empty($user)) {
    return FALSE;
  }
  return braintree_vault_get_customer_id_by_uid($user->uid);
}

/**
 * Implements hook_commerce_braintree_web_submit_payment_method().
 */
function braintree_vault_commerce_braintree_web_submit_payment_method(&$customer, $new_payment_method) {
  if (!empty($customer['id'])) {
    $customer['creditCards'] = db_query('SELECT unique_identifier FROM {braintree_vault_payment_methods} WHERE customer_id = :customer_id', array(
      ':customer_id' => $customer['id'],
    ))->fetchCol();
  }
  return braintree_vault_payment_method_save($new_payment_method, array('op' => 'add', 'customer' => $customer));
}

/**
 * Implements hook_commerce_braintree_web_submit_customer_alter().
 */
function braintree_vault_commerce_braintree_web_submit_customer_alter(&$sale_data) {
  if (empty($sale_data['customerId'])) {
    return;
  }

  // Look for the user's address ID.
  $address_id = db_query('SELECT address_id FROM {braintree_vault_addresses} bva LEFT JOIN {field_data_commerce_customer_address} fdcca ON bva.profile_id = fdcca.entity_id WHERE customer_id = :customer_id AND commerce_customer_address_country = :ccac AND commerce_customer_address_administrative_area = :ccaaa AND commerce_customer_address_locality = :ccal AND commerce_customer_address_postal_code = :ccapc AND commerce_customer_address_thoroughfare = :ccat AND commerce_customer_address_first_name = :ccafn AND commerce_customer_address_last_name = :ccaln', array(
      ':customer_id' => $sale_data['customerId'],
      ':ccac' => $sale_data['billing']['countryCodeAlpha2'],
      ':ccaaa' => $sale_data['billing']['region'],
      ':ccal' => $sale_data['billing']['locality'],
      ':ccapc' => $sale_data['billing']['postalCode'],
      ':ccat' => $sale_data['billing']['streetAddress'],
      ':ccafn' => $sale_data['billing']['firstName'],
      ':ccaln' => $sale_data['billing']['lastName'],
    ))->fetchField();

  if (!empty($address_id)) {
    $sale_data['billingAddressId'] = $address_id;
    unset($sale_data['billing']);
    $sale_data['options']['addBillingAddressToPaymentMethod'] = FALSE;
  }
}
