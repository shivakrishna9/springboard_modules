<?php

/**
* Implements hook_menu().
*/
function webform_translate_menu() {
  $items = array();
  $items['node/%node/translation-manager'] = array(
    'title' => 'Translation Manager',
    'page callback' => '_webform_translate_render_node_translation_manager',
    'page arguments' => array(arg(1)),
    'access callback' => 'webform_translate_access_check',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Determines whether the current node should display the webform translations tab.
 */
function webform_translate_access_check($node) {
  $webform_types = variable_get('webform_node_types');
  if (in_array($node->type, $webform_types)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Translation manager page content.
 */
function _webform_translate_render_node_translation_manager($node) {
  drupal_set_title(drupal_get_title() . ' - ' . 'Translation Manager'); 

  $view = views_get_view('webform_translate_translation_manager');
  $view->set_display('default');
  $view->pre_execute();
  $view->execute();
  $output = $view->render();
  return $output;
}

/**
 * Defines the translation manager form:
 */
function webform_translate_translation_manager_form() {
  $view = views_get_view('webform_translate_translation_manager');
  $view->set_display('default');
  $view->pre_execute();
  $view->execute();

  $languages =  locale_language_list('name');
  if (isset($view->filter['language']->value[0])) {
    if (array_key_exists($view->filter['language']->value[0], $languages)) {
      foreach ($languages as $language_code => $language_name) {
        if ($view->filter['language']->value[0] != $language_code) {
          unset($languages[$language_code]);
        }
      }
    }
  } 

  // TO DO - PROPERLY DETECT SOURCE LANGAUGE:
  unset($languages['en']);

  $form['translation_manager'] = array(
    '#type' => 'fieldset',
    '#theme' => 'webform_translate_table_theme',
    '#component_data' => array(),
  );


  $nid = arg(1);
  if (!is_numeric($nid)) {
    return array();
  }
  $node = node_load($nid);
  
  // Group source and tranlation data together for display in table rows:
  $view_data = array();
  foreach ($view->result as $result) {
    list($textgroup, $nid, $cid, $sub_field) = explode(':', $result->locales_source_location);
    $key = $nid . '_' . $cid . '_' . $sub_field;
    $view_data[$key]['cid'] = $cid;
    $view_data[$key]['sub_field'] = $sub_field; // Label or description
    $view_data[$key]['source'] = $result->locales_source_source;
    $view_data[$key]['translations'][$result->locales_target_language] = $result->locales_target_translation;
    $form['translation_manager']['#component_data'][$cid] = array(
      'cid' => $cid,
      'form_key' => $node->webform['components'][$cid]['form_key'],
    );
  }
  

  foreach ($view_data as $field_key => $data) {
    $form_key = $node->webform['components'][$data['cid']]['form_key'];
    $type = $node->webform['components'][$data['cid']]['type'];
    if ($type == 'hidden') {
      continue;
    }
    // Gather the translations for this row:
    $translations = array();
    foreach ($languages as $language_code => $language_name) {
      $translations[$language_code] = '';
      if (isset($data['translations'][$language_code])) {
        $translations[$language_code] = $data['translations'][$language_code];
      }
    }
     
    $form['translation_manager']['rows'][$field_key] = array(
      '#type' => 'fieldset',
    );

    $field_hover_info = $type . ':' . $node->webform['components'][$data['cid']]['form_key'] . ':' . $data['sub_field'];

    $form['translation_manager']['rows'][$field_key][$field_key . '_source'] = array(
      '#type' => 'textfield',
      '#size' => 22,
      '#default_value' => $data['source'],
      '#attributes' => array('title' => $data['source']),
    );
    foreach ($translations as $language_code => $translation) {
      $form['translation_manager']['rows'][$field_key][$field_key . '_' . $language_code] = array(
        '#type' => 'textfield',
        '#size' => 22,
        '#default_value' => $translation,
        '#attributes' => array('title' => $field_hover_info),
      );      
    }
  }
  $form['translation_manager']['update_translations'] = array(
    '#type' => 'submit',
    '#value' => 'Update Translations',
  );

  $form['#attached']['css'][] =  drupal_get_path('module', 'webform_translate') . '/css/webform_translate.css';
  $form['#attached']['js'][] =  drupal_get_path('module', 'webform_translate') . '/js/webform_translate.js';

  $form['#submit'][] = '_webform_translate_update_translations';
  return $form;
}

/**
 * Form submit function for the translation manager.
 */
function _webform_translate_update_translations($form, &$form_state) {
  $nid = arg(1);
  if (!is_numeric($nid)) {
    return;
  }

  $languages =  locale_language_list('name');
  // TO DO - PROPERLY DETECT SOURCE LANGAUGE:
  unset($languages['en']);
  foreach ($form['translation_manager']['#component_data'] as $cid => $component_data) {
    foreach ($form_state['input'] as $input_key => $input_string) {
      // Handle item lists such as select options:
      if (strpos($input_key, $nid . '_' . $cid . '_') === FALSE) {
        continue;
      }

      if (strpos($input_key, $nid . '_' . $cid . '_option_') !== FALSE) {
        list($nid, $cid, $sub_field, $option_key, $language_code) = explode('_', $input_key);
        $sub_field = $sub_field . '_' . $option_key;
        $is_option = TRUE;
      }
      else {
        list($nid, $cid, $sub_field, $language_code) = explode('_', $input_key);
        $is_option = FALSE;
      }
      // Update the translation:
      $translated_string = $form_state['input'][$nid . '_' . $cid . '_' . $sub_field . '_' . $language_code];
      $source_string = $form_state['input'][$nid . '_' . $cid . '_' . $sub_field . '_source'];
      $textgroup = 'Webform Component';
      $location = $nid . ':' . $cid . ':' . $sub_field;
      i18n_string_translation_update(
        $textgroup . ':' . $location,
        $translated_string,
        $language_code,
        $source_string
      );
    }
  }
}

/**
 * Implements hook_theme().
 */
function webform_translate_theme() {
  return array(
    'webform_translate_table_theme' => array(
      'render element' => NULL, 
      'form' => NULL,
    ),
  );
}

function theme_webform_translate_table_theme($form) {
  $form = array_shift($form);
  $rows = array();
  $attributes = array();
  $results_language_codes = array();
  if (!isset($form['rows'])) {
    return;
  }

  $last_row_id = '';
  foreach ($form['rows'] as $row_key => $row_data) {
    if (!is_array($row_data) || !isset($row_data['#type']) || $row_data['#type'] != 'fieldset') {
      continue;
    }
    list($nid, $id, $sub_field) = explode('_', $row_key);
    $row = array('data' => array(array('class' => 'sub-field', 'data' => $sub_field)));
    foreach ($row_data as $item) {
      if (!is_array($item) || !isset($item['#type'])) {
        continue; 
      }
      
      if (isset($item['#name'])) {
        list($nid, $cid, $sub_field, $language_code) = explode('_', $item['#name']);
        if ($language_code != 'source' && !in_array($language_code, $results_language_codes)) {
          $results_language_codes[] = $language_code;
        }
      }
      $row['data'][] = drupal_render($item);
    }

    // Add a label before each new field:
    if ($last_row_id != $id) {
      $last_row_id = $id;
      $row_label = '';
      if (isset($form['#component_data'][$id]['form_key'])) {
        $row_label = $form['#component_data'][$id]['form_key'];
      }
      $label_row = array('data' => array(array('data' => $row_label, 'class' => 'label-row', 'colspan' => count($results_language_codes) + 2)));
      $rows[] = $label_row;
    }

    // Add the data:
    $rows[] = $row;
  }


  // Populate the header based on results returned:
  $languages =  locale_language_list('name');
  unset($languages['en']); // TO DO - PROPERLY DETECT SOURCE LANGAUGE:

  $header = array(t('Field'), t('Source'));
  foreach ($languages as $language_code => $language_name) {
    if (in_array($language_code, $results_language_codes)) {
      $header[] = t($language_name);
    }
  }

  $output = theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('id' => 'webform-translation-manager'),
  ));
  unset($form['rows']);
  $output .= drupal_render_children($form);
  return $output;
}

/**
 * Implements hook_views_post_render().
 */
function webform_translate_views_post_render(&$view, &$output, &$cache) {
  if ($view->name != 'webform_translate_translation_manager') {
    return;
  }
  $form = drupal_get_form('webform_translate_translation_manager_form');
  $form_html = drupal_render($form);

  // Ensure AJAX updates do not break the form:
  $arg1 = arg(1);
  $action = '/springboard/node/' . $arg1 . '/translation-manager';
  $form_html = str_replace('/views/ajax', $action, $form_html);

  // Replace default view content with the translation manager form:
  $output = preg_replace('/<div class="view-content">(.*?)<\/div>/s', $form_html, $output);

}

/**
 * Updates source translation data for this webform component, excluding hidden fields.
 *
 * @param $component
 *   The webform component being updated.
 */
function _webform_translate_webform_register_component($component) {
/*  $translatable_types = array('textarea', 'textfield');
  if (!in_array($component['type'], $translatable_types)) {
    return;
  } */
  if ($component['type'] == 'hidden') {
    return;
  }

  $textgroup = 'Webform Component';
  $location = $component['nid'] . ':' . $component['cid'];

  // Register component label:
  $source_string = $component['name'];
  i18n_string_update(
    $textgroup . ':' . $location . ':label', 
    $source_string,
    array()
  );

  // Register component description:
  if (isset($component['extra']['description'])) {
    $source_string = $component['extra']['description'];
    i18n_string_update(
      $textgroup . ':' . $location . ':description',
      $source_string,
      array()
    );
  }

  // Register checkbox or radio options:
  if (in_array($component['type'], array('select')) && isset($component['extra']['items'])) {
    $options = explode("\n", $component['extra']['items']);
    foreach ($options as $option) {
      list($option_key, $option_value) = explode("|", $option);
      $source_string = $component['name'];
      $option_value = trim($option_value);
      i18n_string_update(
        $textgroup . ':' . $location . ':option_' . $option_key,
        $option_value,
        array()
      );
    }
  }
}

/**
 * Implements hook_webform_component_update().
 */
function webform_translate_webform_component_update($component) {
  _webform_translate_webform_register_component($component);
}

/**
 * Implements hook_views_query_alter().
 *
 * Filter the translation manager's results to those specific to the current webform node.
 */
function webform_translate_views_query_alter(&$view, &$query) {
  if ($view->name != 'webform_translate_translation_manager') {
    return;
  }
  $arg1 = arg(1);
  if (!is_numeric($arg1)) {
    return;
  }
  $query->where[1]['conditions'][] = array(
    'field' => 'locales_source.location',
    'value' => 'Webform Component:' . $arg1 . ':%',
    'operator' => 'LIKE',
  );

  // This replaces the translation string filter with a subquery that causes this view to be filtered by
  // all "rows" where one or more translation string is matched.  This is because the unaltered output
  // of this view spreads each row's translations across multiple results.
  foreach ($query->where[1]['conditions'] as $key => $condition) {
    if ($condition['field'] != 'locales_target.translation') {
      continue;
    }
    $target_value = isset($condition['value']) ? $condition['value'] : '';
    unset($query->where[1]['conditions'][$key]);
    $sub_query = db_select('locales_target', 'lt')
      ->fields('lt', array('lid'))
      ->condition('translation', $target_value, 'LIKE');
    $view->query->add_where(0, 'locales_source.lid', $sub_query, 'IN');
    break;
  }
}

/**
 * Implements hook_form_alter().
 *
 * Ensure the current admin's language is used for the language filter
 * so that multiple columns are not displayed.
 */
function webform_translate_form_alter(&$form, &$form_state, $form_id) {
  if (!isset($form_state['view']->name)
    || $form_state['view']->name != 'webform_translate_translation_manager'
    || $form_id != 'views_exposed_form') {
    return;
  }

  $languages =  locale_language_list('name');
  unset($languages['en']);
  global $language;
  $current_user_language = $language->language;
  $form['language']['#default_value'] = $current_user_language;

  // Pass the user's current language code to jQuery for select alerations:
  $form['language']['#attributes']['default_lang_code'] = $language->language;
}

/**
 * Implements hook_webform_component_render_alter().
 */
function webform_translate_webform_component_render_alter(&$element, &$component) {
  $nid = arg(1);
  if (!is_numeric($nid)) {
    return;
  }
  $textgroup = 'Webform Component';
  $options = array();
  //if (in_array($element['#type'], array('textfield', 'textarea', 'fieldset'))) {
  $element['#title'] = i18n_string_translate(
    $textgroup . ':' . $nid . ':' . $component['cid'] . ':label', 
    $element['#title'],
    $options
  );

  if (isset($element['#description'])) {
    $element['#description'] = i18n_string_translate(
      $textgroup . ':' . $nid . ':' . $component['cid'] . ':description',
      $element['#description'],
      $options
    );
  }
}
