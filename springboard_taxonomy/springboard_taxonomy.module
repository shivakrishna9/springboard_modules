<?php

/**
 * Implements hook_menu().
 *
 * We use custom paths to access pages normally provided
 * by the taxonomy and user modules in order to:
 * provide a stripped-down taxonomy admin interface and finer-grained
 * permissions; and to provide a stripped-down permissions interface that
 * only shows taxonomy permissions.
 */
function springboard_taxonomy_menu() {
  $items = array();

  // Our custom path/version of the taxonomy overview page.
  $items['admin/springboard/taxonomy/%springboard_taxonomy_vocab_name'] = array(
    'title callback' => 'entity_label',
    'title arguments' => array('taxonomy_vocabulary', 3),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('taxonomy_overview_terms', 3),
    'access callback' => 'springboard_taxonomy_access_check',
    'access arguments' => array(3),
    'file path' => drupal_get_path('module', 'taxonomy'),
    'file' => 'taxonomy.admin.inc',
  );
  $items['admin/springboard/taxonomy/%springboard_taxonomy_vocab_name/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -20,
  );

  // Our custom path for the add terms page.
  $items['admin/springboard/taxonomy/%springboard_taxonomy_vocab_name/add'] = array(
    'title' => 'Add term',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('taxonomy_form_term', array(), 3),
    'access callback' => 'springboard_taxonomy_access_check',
    'access arguments' => array(3),
    'file path' => drupal_get_path('module', 'taxonomy'),
    'file' => 'taxonomy.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  // Settings page. Assign vocabulary to content types.
  $items['admin/springboard/taxonomy/%springboard_taxonomy_vocab_name/settings'] = array(
    'title' => 'Settings',
    'description' => 'Configuration settings for Springboard Taxonomy.',
    'page callback' => 'springboard_taxonomy_settings_page',
    'access callback' => 'springboard_taxonomy_access_check',
    'access arguments' => array(3, 4),
    'type' => MENU_LOCAL_TASK,
    'file' => 'springboard_taxonomy.admin.inc',
  );

  // Custom path for user permissions.
  $items['admin/springboard/taxonomy/%springboard_taxonomy_vocab_name/permissions'] = array(
    'title' => 'Taxonomy Permissions',
    'description' => 'Permissions for springboard taxonomy.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_admin_permissions'),
    'access arguments' => array('administer permissions'),
    'file path' => drupal_get_path('module', 'user'),
    'file' => 'user.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  return $items;
}

/**
 * Load the vocab object from the wildcard argument.
 *
 * @param string $name
 *   The name of the vocab.
 *
 * @return mixed
 */
function springboard_taxonomy_vocab_name_load($name) {
  $vocabularies = taxonomy_vocabulary_load_multiple(NULL, array('machine_name' => $name));
  return reset($vocabularies);
}

/**
 * Check access to springboard taxonomy.
 *
 * @param object $vocab
 *   The vocab object.
 * @param null $path
 *   Uri.
 *
 * @return bool
 *   True if accessible.
 */
function springboard_taxonomy_access_check($vocab, $path = NULL) {
  if (user_access('administer organization issues') && empty($path)) {
    $allowed = springboard_taxonomy_allowed_vocabularies();
    if (in_array($vocab->machine_name, $allowed)) {
      return TRUE;
    }
  }
  if (user_access('administer springboard taxonomy settings') && $path == 'settings') {
    if ($vocab->machine_name == 'sba_organization_issues') {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Restricts the springboard taxonomy UI to specific vocabularies.
 */
function springboard_taxonomy_allowed_vocabularies() {
  $allowed = array('sba_organization_issues');
  drupal_alter('springboard_taxonomy_allowed_vocabularies', $allowed);
  return $allowed;
}

/**
 * Implements hook_permission().
 */
function springboard_taxonomy_permission() {
  return array(
    'administer organization issues' => array(
      'title' => t('View term listings and add new terms'),
    ),
    'administer springboard taxonomy settings' => array(
      'title' => t('Assign or remove the organization issues taxonomy to/from content types.'),
    ),
  );
}

/**
 * Implements hook_form_alter().
 *
 * Using hook_form_alter instead of hook_FORM_ID_alter so that
 * springboard_taxonomy_taxonomy_form gets inserted before
 * other modules' hook_FORM_ID_alter's add to it.
 */
function springboard_taxonomy_form_alter(&$form, &$form_state, $form_id) {
  if (!empty($form['#node_edit_form'])) {
    $taxonomy_types = variable_get('springboard_taxonomy_node_types', array());
    if (in_array($form['#node']->type, $taxonomy_types) && isset($form['field_sba_organization_issues'])) {
      springboard_taxonomy_taxonomy_form($form, $form_state, $form_id);
    }
  }

  if($form_id == 'taxonomy_overview_terms' && arg(1) == 'springboard' && arg(3) == 'sba_organization_issues') {
    if (isset($form['actions']['reset_alphabetical'])) {
      $form['actions']['reset_alphabetical']['#access'] = FALSE;
    }
  }

  if($form_id == 'taxonomy_form_term' && (arg(1) == 'springboard' && arg(3) == 'sba_organization_issues') || (arg(0) =='taxonomy' && arg(1) == 'term' && arg(3) == 'edit')) {
    $description = $form['description'];
    unset($form['description']);
    $form['description_wrapper'] = array(
      '#type' => 'fieldset',
      '#title' => t('Description'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['description_wrapper']['description'] = $description;
    if (isset($form['path'])) {
      $path = $form['path'];
      unset($form['path']);
      $form['path_wrapper'] = array(
        '#type' => 'fieldset',
        '#title' => t('Url Alias'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );
      $form['path_wrapper']['path'] = $path;
    }
  }

  // Add javascript to hide non-taxonomy permissions on the permissions form.
  if ($form_id == 'user_admin_permissions' && arg(1) == 'springboard' && arg(2) == 'taxonomy') {
    $form['#attached']['js'][] = drupal_get_path('module', 'springboard_taxonomy')
      . '/js/springboard_taxonomy_permissions.js';
  }
}

/**
 * Adds a fieldset and issues terms to node add/edit forms' vertical tabs.
 */
function springboard_taxonomy_taxonomy_form(&$form, &$form_state, $form_id) {
  $language = $form['language']['#value'];
  // Add a vertical-tab fieldset for "Action options."
  $form['springboard_taxonomy_options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Issue Categories'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#group' => 'additional_settings',
  );

  // Include JS to layout long lists of checkboxes in columns.
  $form['#attached']['js'][] = drupal_get_path('module', 'springboard_taxonomy') . '/js/jquery.columnizer.min.js';
  $form['#attached']['js'][] = drupal_get_path('module', 'springboard_taxonomy') . '/js/springboard-taxonomy-edit-form.js';
  // Include CSS for special layout.
  $form['#attached']['css'][] = drupal_get_path('module', 'springboard_taxonomy') . '/css/springboard-taxonomy-edit-form.css';

  // Organization Issues selection.
  if (isset($form['field_sba_organization_issues']) && !empty($form['field_sba_organization_issues'][$language])) {
    $vocabulary = taxonomy_vocabulary_machine_name_load('sba_organization_issues');

    $form['field_sba_organization_issues']['#sbt_vocab'] = $vocabulary;
    $form['field_sba_organization_issues']['#pre_render'][] = 'springboard_taxonomy_sba_organization_issues_pre_render';
    // Remove any leading dashes from option labels.
    // (We'll indent them in the pre-render instead.)
    $options =& $form['field_sba_organization_issues'][$language]['#options'];
    foreach ($options as $tid => $label) {
      $options[$tid] = preg_replace("/^\\-+/", '', $options[$tid]);
    }

    $description = t("Select the issues related to this action. These are your organization's issues, which can be used to generate feeds and lists of related actions in your action center and throughout your website.");
    // Move the field to a special fieldset inside "Action options."
    $form['springboard_taxonomy_options']['organization_issues'] = array(
      '#type' => 'fieldset',
      '#title' => t('Choose Organization Issue(s)'),
      '#description' => $description,
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );

    if (empty($options) && user_access('administer organization issues')) {
      $here = t('You can add terms !here.', array('!here' => l(t('here'), 'admin/springboard/taxonomy/sba_organization_issues/add')));
      $form['springboard_taxonomy_options']['organization_issues']['#description'] = $description . ' ' . $here;
    }

    $form['field_sba_organization_issues'][$language]['#title'] = '';
    $form['springboard_taxonomy_options']['organization_issues']['field_sba_organization_issues']
      = $form['field_sba_organization_issues'];
    unset($form['field_sba_organization_issues']);
  }
}


/**
 * Add a CSS class to issues elements.
 *
 * @param array $element
 *   A taxonomy term element array.
 *
 * @return array
 *   The element with a new class attribute.
 */
function springboard_taxonomy_sba_organization_issues_pre_render(array $element) {
  $vocabulary = $element['#sbt_vocab'];
  // Add indentation class to non-top-tier org issue terms.
  $terms = array();
  foreach (taxonomy_get_tree($vocabulary->vid) as $term) {
    $terms[$term->tid] = $term;
  }
  foreach ($element[$element['#language']]['#options'] as $tid => $name) {
    if ($tid != '_none' && $terms[$tid]->depth > 0) {
      $element[$element['#language']][$tid]['#attributes']['class'][] = 'sba-term-indent';
    }
  }
  return $element;
}

/**
 * Implements hook_field_delete_instance().
 *
 * Unset the springboard_taxonomy_node_types variable
 * for the node type.
 */
function springboard_taxonomy_field_delete_instance($instance) {
  $taxonomy_types = variable_get('springboard_taxonomy_node_types', array());
  if ($instance['field_name'] == 'field_sba_organization_issues') {
    if (isset($taxonomy_types[$instance['bundle']])) {
      unset($taxonomy_types[$instance['bundle']]);
      variable_set('springboard_taxonomy_node_types', $taxonomy_types);
    }
  }
}

/**
 * Implements hook_theme().
 */
function springboard_taxonomy_theme() {
  return array(
    'springboard_taxonomy_confirm_message' => array(
      'variables' => array('changes' => NULL),
      'file' => 'springboard_taxonomy.admin.inc',
    ),
  );
}

/**
 * Implements hook_springboard_admin_alias_patterns().
 *
 * Put term edit screens under springboard backend paths.
 */
function springboard_taxonomy_springboard_admin_alias_patterns() {
  return array(
    'taxonomy/term/%/edit' => array(
      'path' => array(
        'regex' => '|^/taxonomy/term/([0-9]+)/edit$|',
        'replacement' => 'taxonomy/term/$1/edit',
      ),
      'alias' => array(
        'regex' => '|^springboard/taxonomy/([0-9]+)/edit$|',
        'replacement' => 'springboard/taxonomy/$1/edit',
      ),
    ),
  );
}

/**
 * Implements hook_springboard_admin_admin_menu_items_alter().
 *
 * Put the link to the admin page under the springboard/settings/config.
 */
function springboard_taxonomy_springboard_admin_admin_menu_items_alter(&$items) {
  $items['admin/springboard/settings']['_children']['admin/springboard/settings/config']['_children']['admin/springboard/taxonomy/sba_organization_issues'] = array(
    'link_path' => 'admin/springboard/taxonomy/sba_organization_issues',
    'link_title' => t('Organization Issues'),
    'menu_name' => 'springboard_admin_menu',
    'expanded' => 1,
    'customized' => 1,
    'weight' => 1,
  );
}
