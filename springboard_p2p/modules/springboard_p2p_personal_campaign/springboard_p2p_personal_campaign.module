<?php
/**
 * @file
 * Code for the Springboard P2P personal campaign feature.
 */

include_once 'springboard_p2p_personal_campaign.features.inc';

/**
 * Implements hook_menu().
 */
function springboard_p2p_personal_campaign_menu() {
  $items['user/%user/personal-campaigns/campaign-donors/%node/%node'] = array(
    'title' => 'Campaign Donors',
    'page callback' => 'springboard_p2p_personal_campaign_donors_dashboard',
    'page arguments' => array(1, 4, 5),
    'access callback' => 'springboard_p2p_personal_dashboard_donors_view_access',
    'access arguments' => array(1, 4),
    'type' => MENU_LOCAL_TASK,
    'file' => 'springboard_p2p_personal_campaign.pages.inc',
    'file path' => drupal_get_path('module', 'springboard_p2p_personal_campaign') . '/includes',
  );
  $items['node/%node/campaign-donors'] = array(
    'title' => 'Campaign Donors',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('springboard_p2p_personal_campaign_donors_edit', 1),
    'access callback' => 'springboard_p2p_personal_campaign_donors_edit_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'springboard_p2p_personal_campaign.pages.inc',
    'file path' => drupal_get_path('module', 'springboard_p2p_personal_campaign') . '/includes',
    'weight' => 10,
  );
  return $items;
}

/**
 * Access callback for /campaign-donors menu callback.
 */
function springboard_p2p_personal_campaign_donors_edit_access($node) {
  $is_personal_campaign = $node->type == 'p2p_personal_campaign';
  return user_access('administer springboard p2p') && $is_personal_campaign;
}

/**
 * Implements hooK_theme().
 */
function springboard_p2p_personal_campaign_theme($existing, $type, $theme, $path) {
  return array(
    'springboard_p2p_personal_campaign_textfield_table' => array(
      'render element' => 'element',
      'file' => 'springboard_p2p_personal_campaign.pages.inc',
      'path' => drupal_get_path('module', 'springboard_p2p_personal_campaign') . '/includes',
    ),
  );
}

/**
 * Implements hook_admin_paths().
 */
function springboard_p2p_personal_campaign_admin_paths() {
  if (variable_get('node_admin_theme')) {
    return array(
      'node/*/campaign-donors' => TRUE
    );
  }
}

/**
 * Access handler for personal campaign donor dashboard.
 */
function springboard_p2p_personal_dashboard_donors_view_access($account, $node) {
  return springboard_p2p_complete_profile_form_access($account);
}

/**
 * Specified ctools plugins overrides.
 *
 * Implements hook_ctools_plugin_directory().
 */
function springboard_p2p_landing_ctools_plugin_directory($owner, $plugin_type) {
  // Define the custom panels templates folder.
  $modules = array('panels', 'ctools');
  if (in_array($owner, $modules) && !empty($plugin_type)) {
    return "plugins/$plugin_type";
  }
}

/**
 * Implements hook_preprocess_page().
 */
function springboard_p2p_personal_campaign_preprocess_page(&$vars) {

  // Global node.
  $node = menu_get_object();

  // Unset the node title for p2p_personal_campaign page view.
  if (!empty($node) && ($node->type == 'p2p_personal_campaign') && (arg(2) == NULL)) {
    $vars['title'] = '';
  }

}

/**
 * Implements hook_page_alter().
 */
function springboard_p2p_personal_campaign_page_alter(&$cache, $vars) {

  // Global node.
  $node = menu_get_object();

  // Define the module path.
  $mod_path = drupal_get_path('module', 'springboard_p2p_personal_campaign');
  $p2p_path = drupal_get_path('module', 'springboard_p2p');

  // Not admin page.
  if (!path_is_admin(current_path())) {

    // Only for p2p_personal_campaign page view.
    if (!empty($node) && ($node->type == 'p2p_personal_campaign') && (arg(2) == NULL)) {

      // Define the library path with libraries present and without.
      if (function_exists('libraries_get_path')) {
        $library_path = libraries_get_path('fitvids');
      }

      // Flexslider js.
      $fitvids = array(
        '#attached' => array(
          'js' => array(
            $library_path . '/jquery.fitvids.js' => array(
              'group' => JS_THEME,
            ),
          ),
        ),
      );
      drupal_render($fitvids);

      // jquery basic slideshow.
      $p2p_jqslide = array(
        '#attached' => array(
          'js' => array(
            $mod_path . '/js/bjqs-1.3.js' => array(
              'group' => JS_THEME,
            ),
          ),
        ),
      );
      drupal_render($p2p_jqslide);

      // Custom scripts, let's load this last.
      $p2p_personal_scripts = array(
        '#attached' => array(
          'js' => array(
            $mod_path . '/js/p2p-personal-scripts.js' => array(
              'group' => JS_THEME,
              'weight' => 9999,
            ),
          ),
        ),
      );
      drupal_render($p2p_personal_scripts);

      // Custom css.
      $p2p_personal_css = array(
        '#attached' => array(
          'css' => array(
            $mod_path . '/css/p2p-personal.css' => array(
              'group' => CSS_THEME,
              'weight' => 9999,
            ),
          ),
        ),
      );
      drupal_render($p2p_personal_css);
    }
  }

}

/**
 * @param $router_item
 *   The menu router item for $path.
 * @param $path
 *   The originally passed path, for which $router_item is responsible.
 * @param $original_map
 *   The path argument map, as contained in $path.
 *
 * @see menu_get_item()
 */
function springboard_p2p_personal_campaign_menu_get_item_alter(&$router_item, $path, $original_map) {
  // Define the path of the personal campaign node/edit or node/add.
  if ($router_item['path'] == 'node/%/edit' || $router_item['path'] == 'node/add/p2p-personal-campaign') {
    $router_item['theme_callback'] = '_springboard_p2p_personal_campaign_menu_theme_callback';
  }
}

/**
 * Our custom function theme callback from above.
 */
function _springboard_p2p_personal_campaign_menu_theme_callback() {

  // Query to get the default theme.
  $default_theme = variable_get('theme_default', NULL);

  // Define the node.
  $node = menu_get_object();

  // Only if p2p_personal_campaign node edit or add.
  if ((!empty($node) && $node->type == 'p2p_personal_campaign') || (arg(0) === 'node' && arg(1) === 'add' && arg(2) === 'p2p-personal-campaign')) {

    // Return the default theme. This seems pointless but with the context set
    // for page wrappers, it will return the default theme "wrapperized" with its css stripped out.
    return $default_theme;
  }
}

/**
 * Implements hook_token_info().
 */
function springboard_p2p_personal_campaign_token_info() {

  $info['types']['p2p_personal_campaign'] = array(
    'name' => t('Personal Campaign'),
    'description' => t('Tokens related to Springboard Social sharing content.'),
  );
  $info['tokens']['p2p_personal_campaign']['user'] = array(
    'name' => t('Personal Campaigner'),
    'description' => t('The user account of the personal campaign author.'),
    'type' => 'user',
  );
  $info['tokens']['p2p_personal_campaign']['campaign_title'] = array(
    'name' => t('Personal campaign title'),
    'description' => t(''),
  );
  $info['tokens']['p2p_personal_campaign']['campaign_landing_url'] = array(
    'name' => t('Campaign landing URL'),
    'description' => t('URL of the personal campaign landing page.'),
  );
  $info['tokens']['p2p_personal_campaign']['campaign_donation_url'] = array(
    'name' => t('Donation landing URL'),
    'description' => t('URL of the donation form associated with the personal campaign.'),
  );

  $info['tokens']['p2p_personal_campaign']['personal_campaign_nid'] = array(
    'name' => t('Personal Campaign Node Id'),
    'description' => t(''),
  );
  $info['tokens']['p2p_personal_campaign']['personal_campaign_donation_nid'] = array(
    'name' => t('Node ID of the donation form for this campaign'),
    'description' => t(''),
  );
  $info['tokens']['p2p_personal_campaign']['campaign_goal_amount'] = array(
    'name' => t('Personal campaign goal: total donation amount'),
    'description' => t(''),
  );
  $info['tokens']['p2p_personal_campaign']['campaign_goal_submissions'] = array(
    'name' => t('Personal campaign goal: total submissions'),
    'description' => t(''),
  );
  $info['tokens']['p2p_personal_campaign']['goal_progress_amount'] = array(
    'name' => t('Donation amount goal progress.'),
    'description' => t(''),
  );
  $info['tokens']['p2p_personal_campaign']['goal_progress_submissions'] = array(
    'name' => t('Total submissions goal progress.'),
    'description' => t(''),
  );
  $info['tokens']['p2p_personal_campaign']['campaign_deadline'] = array(
    'name' => t('Campaign fundraising deadline.'),
    'description' => t(''),
  );
  return $info;
}

/**
 * Implements hook_tokens().
 */
function springboard_p2p_personal_campaign_tokens($type, $tokens, $data = array(), $options = array()) {
  if ($type == 'p2p_personal_campaign') {
    if (isset($data['p2p_personal_campaign']['node'])) {
      $personal_campaign = $data['p2p_personal_campaign']['node'];
    }
    else {
      $personal_campaign = springboard_p2p_get_personal_campaign_from_url();
    }

    if (!is_object($personal_campaign)) {
      return array();
    }

    $language = $personal_campaign->language;
    $replacements = array();

    $data['campaign_title'] = $personal_campaign->title;
    $data['campaign_landing_url'] = url('node/' . $personal_campaign->nid, array('absolute' => TRUE));

    $campaign = springboard_p2p_get_campaign_from_personal_campaign($personal_campaign);
    $goal = springboard_p2p_get_goal_from_campaign($campaign);

    $data['personal_campaign_donation_nid'] = $goal['nid'];

    $path = 'node/' . $goal['nid'];
    $options = array(
      'absolute' => TRUE,
      'query' => array('p2p_pcid' => $personal_campaign->nid),
      'https' => TRUE,
    );
    $data['campaign_donation_url'] = url($path, $options);

    $data['personal_campaign_nid'] = $personal_campaign->nid;

    $wrapper = entity_metadata_wrapper('node', $personal_campaign);

    $deadline = $wrapper->field_p2p_fundraising_deadline->value();
    $data['campaign_deadline'] = $deadline ? format_date($deadline) : '';

    $goal_amount = $wrapper->field_p2p_personal_campaign_goal->value();
    $data['campaign_goal_amount'] = $goal_amount ? $goal_amount : '';

    $goal_submissions = $wrapper->field_p2p_personal_submit_goal->value();
    $data['campaign_goal_submissions'] = $goal_submissions ? $goal_submissions : '';

    $data['goal_progress_amount'] = isset($personal_campaign->field_p2p_campaign_progress[$language][0]['amount']) ? $personal_campaign->field_p2p_campaign_progress[$language][0]['amount'] : 0;
    $data['goal_progress_submissions'] = isset($personal_campaign->field_p2p_campaign_progress[$language][0]['submissions']) ? $personal_campaign->field_p2p_campaign_progress[$language][0]['submissions'] : 0;

    foreach ($tokens as $key => $token) {
      if (isset($data[$key])) {
        $replacements[$token] = $data[$key];
      }
    }

    $account = user_load($personal_campaign->uid);
    if ($user_tokens = token_find_with_prefix($tokens, 'user')) {
      $replacements += token_generate('user', $user_tokens, array('user' => $account), $options);
    }

    return $replacements;
  }
}


/**
 * Implements hook_webform_confirmations_token_replace_alter().
 */
function springboard_p2p_personal_campaign_webform_confirmations_token_replace_alter(&$token_set, $sid) {
  $personal_campaign = FALSE;
  $nid = $token_set['node']->nid;
  module_load_include('inc', 'webform', 'includes/webform.submissions');
  $submission = webform_get_submission($nid, $sid);
  $components = _fundraiser_webform_get_components_by_nid($nid);
  $personal_campaign = _springboard_p2p_personal_campaign_lookup_personal_campaign($submission, $components);
  if ($personal_campaign) {
    $account = user_load($personal_campaign->uid);
    $token_set['p2p_personal_campaign']['node'] = $personal_campaign;
    $token_set['p2p_personal_campaign']['user'] = $account;
  }
}

/**
 * Implements hook_email_wrappers_token_set_alter().
 */
function springboard_p2p_personal_campaign_email_wrappers_token_set_alter(&$token_set, $message) {
  // Not all email template messages come with a submission.
  if (!isset($message['params']['submission'])) {
    return;
  }

  $submission = $message['params']['submission'];
  $components = _fundraiser_webform_get_components_by_nid($submission->nid);
  $personal_campaign = _springboard_p2p_personal_campaign_lookup_personal_campaign($submission, $components);
  if ($personal_campaign) {
    $account = user_load($personal_campaign->uid);
    $token_set['p2p_personal_campaign']['node'] = $personal_campaign;
    $token_set['p2p_personal_campaign']['user'] = $account;
  }
}

function _springboard_p2p_personal_campaign_lookup_personal_campaign($submission, $components) {
  foreach ($components as $component) {
    if ($component->form_key == 'p2p_pcid') {
      $cid = $component->cid;
      $personal_campaign = $submission->data[$cid]['value'][0];
      break;
    }
  }
  if (isset($personal_campaign)) {
    $personal_campaign_node = node_load($personal_campaign);
    if (isset($personal_campaign_node->type) && $personal_campaign_node->type == 'p2p_personal_campaign') {
      return $personal_campaign_node;
    }
  }
  return FALSE;
}
/**
 * Implements hook_market_source_field_info().
 */
function springboard_p2p_personal_campaign_market_source_field_info() {

  $fields = array();
  // Transaction that generated the refered conversion (sid).
  $fields['p2p_pcid'] = array(
    '#title' => t('Personal Campaign ID'),
    '#type' => 'hidden',
    '#value' => '',
    '#required' => 0,
    '#extra' => array(
      'description' => '',
      'hidden_type' => 'hidden',
    ),
  );
  return $fields;
}

/**
 * Implements hook_market_source_external_field_keys().
 */
function springboard_p2p_personal_campaign_market_source_external_field_keys() {
  $items = array(
    'p2p_pcid' => array(
      'key' => 'p2p_pcid',
      'name' => t('Personal Campaign ID'),
      'default' => '',
      'persistence' => 'off',
    ),
  );
  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Personal campaign node add form alterations.
 */
function springboard_p2p_personal_campaign_form_p2p_personal_campaign_node_form_alter(&$form, &$form_state, $form_id) {
  // Add support for Market Source values to the node add/edit form.
  $form['#after_build'][] = 'market_source_webform_after_build';
  $qs_keys = _market_source_build_qs_keys();
  foreach (array_keys($qs_keys) as $key) {
    $lookup_key = 'field_ms_' . $key;
    // Market Source sets cookie values during hook_init() so we can grab them here.
    $cookie_value = isset($_COOKIE['market_source__' . $key]) ? $_COOKIE['market_source__' . $key] : '';
    // Lookup the element ID of $key in $form.
    $element = &_market_source_form_find_element($form, $lookup_key);

    // Check if this is an entity field with a #language value
    if (is_array($element) && isset($element['#language'])) {
      // This currently only supports fields with the 'value' key
      if (!empty($element[ $element['#language'] ][0]['value'])) {
        // Set the default value and make the field a hidden input
        $element[ $element['#language'] ][0]['value']['#default_value'] = $cookie_value;
        $element[ $element['#language'] ][0]['value']['#type'] = 'hidden';
      }
    }
  }

}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Copy social settings to personal campaigns when settings are updated on a campaign node.
 */
function springboard_p2p_personal_campaign_form_sb_social_node_settings_alter(&$form, $form_state, $form_id) {
  if (module_exists('sb_social') && $form['type']['#value'] == 'node' && is_numeric($form['id']['#value'])) {
    $node = node_load($form['id']['#value']);
    if ($node->type == 'p2p_campaign') {
      $form['#submit'][] = 'springboard_p2p_personal_campaign_social_settings_submit';
    }
  }
}

/**
 *  Submit callback for the Social Settings form on campaign nodes.
 *
 *  When Social settings are changed for a campaign node, update settings
 *  on all related personal campaign nodes to match.
 */
function springboard_p2p_personal_campaign_social_settings_submit($form, $form_state) {
  $node = node_load($form['id']['#value']);
  $personal_campaigns = springboard_p2p_get_personal_campaigns($node->nid);
  // If there are personal campaigns related to the current campaign node
  // we want to copy the campaign node social settings to the personal campaign
  // nodes.
  if (is_array($personal_campaigns) && count($personal_campaigns)) {
    $settings_id = sb_social_get_sid_by_id($node->nid, 'node');
    $settings = sb_social_settings_load($settings_id, FALSE);
    $fb_image_fid = isset($settings['data']['facebook']['image']) ? $settings['data']['facebook']['image'] : FALSE;

    foreach ($personal_campaigns as $nid => $personal_campaign_node) {
      // Personal campaign nodes should use the personal campaign thumbnail to
      // set opengraph image tags if no image has been set on the parent
      // campaign.
      //
      // All other setting should inherit from the parent campaign.
      if (!$fb_image_fid) {
        $personal_campaign_thumbnail_fid = $personal_campaign_node->field_p2p_campaign_images[$personal_campaign_node->language][0]['fid'];
        $settings['data']['facebook']['image'] = is_numeric($personal_campaign_thumbnail_fid) ? $personal_campaign_thumbnail_fid : '';
      }

      $sid = sb_social_get_sid_by_id($nid, 'node');
      $settings['sid'] = $sid ? $sid : '';
      $settings['id'] = $nid;
      $settings['type'] = 'node';
      sb_social_settings_save($settings);
      drupal_set_message(t('Updated Social Share settings for !link', array('!link' => l($personal_campaign_node->title, 'node/' . $nid))));
    }
  }
}

/**
 * Implements hook_market_source_build_form_keys_alter().
 *
 * We are using hidden element fields on the personal campaign node type
 * to capture Market Source values. This hook handles translating
 * from standard ms fields rendered as webform components to
 * entity fields like those found on the personal campaign node form.
 */
function springboard_p2p_personal_campaign_market_source_build_form_keys_alter(&$form_keys, $context) {
  // This change should only impact personal campaign nodes.
  if (isset($context['form']['#node']->type) && $context['form']['#node']->type == 'p2p_personal_campaign') {
    $qs_keys = _market_source_build_qs_keys();
    $form = $context['form'];

    foreach (array_keys($qs_keys) as $key) {
      $lookup_key = 'field_ms_' . $key;

      // Lookup the element ID of $key in $form.
      $element = &_market_source_form_find_element($form, $lookup_key);

      // Check if this is an entity field with a #language value
      if (is_array($element) && isset($element['#language'])) {
        // This currently only supports fields with the value key
        if (!empty($element[ $element['#language'] ][0]['value']['#parents'])) {
          $parents = $element[ $element['#language'] ][0]['value']['#parents'];
          if (count($parents) == 1) {
            $form_keys[$key] = $parents[0];
          }
          else {
            $name = array_shift($parents) . '[' . implode($parents, '][') . ']';
            $form_keys[$key] = $name;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_node_insert().
 *
 * Inherit social settings from parent campaign when a new personal campaign is created.
 */
function springboard_p2p_personal_campaign_node_insert($node) {
  if ($node->type == 'p2p_personal_campaign' && module_exists('sb_social')) {
    $language = $node->language;
    $campaign_node = node_load($node->field_p2p_campaign[$language][0]['target_id']);
    $settings_id = sb_social_get_sid_by_id($campaign_node->nid, 'node');
    $settings = sb_social_settings_load($settings_id);
    $fb_image_fid = isset($settings['data']['facebook']['image']) ? $settings['data']['facebook']['image'] : FALSE;

    // Personal campaign nodes should use the personal campaign thumbnail to
    // set opengraph image tags if no image has been set on the parent
    // campaign.
    //
    // All other setting should inherit from the parent campaign.
    if (!$fb_image_fid) {
      $personal_campaign_thumbnail_fid = isset($node->field_p2p_campaign_images[$node->language][0]['fid']) ? $node->field_p2p_campaign_images[$node->language][0]['fid'] : '' ;

      $settings['data']['facebook']['image'] = is_numeric($personal_campaign_thumbnail_fid) ? $personal_campaign_thumbnail_fid : '';
    }
    $settings['sid'] = '';
    $settings['id'] = $node->nid;
    $settings['type'] = 'node';
    sb_social_settings_save($settings);
  }
}

/**
 * Implements hook_node_update().
 *
 * Keep personal campaign thumbnail and facebook share image in sync.
 */
function springboard_p2p_personal_campaign_node_update($node) {
  if ($node->type == 'p2p_personal_campaign' && module_exists('sb_social')) {
    $language = $node->language;
    $settings_id = sb_social_get_sid_by_id($node->nid, 'node');
    $settings = sb_social_settings_load($settings_id);
    // If Facebook is enabled, set Facebook image to the personal campaign thumbnail for the
    // parent campaign.
    if (isset($settings['data']['facebook'])) {
      $personal_campaign_thumbnail_fid = isset($node->field_p2p_campaign_images[$language][0]['fid']) ? $node->field_p2p_campaign_images[$language][0]['fid'] : '';
      $settings['data']['facebook']['image'] = $personal_campaign_thumbnail_fid;
    }
    $settings['type'] = 'node';
    sb_social_settings_save($settings);

  }
}
