<?php

/**
 * @file
 * Provides Salesforce integration functionality specific to NGOC.
 */

define('SALESFORCE_NGOC_DEFAULT_EMAIL_TYPE', 'Home');
define('SALESFORCE_NGOC_DEFAULT_ADDRESS_TYPE', 'Home');
define('SALESFORCE_NGOC_DEFAULT_PAYMENT_METHOD_TYPE', 'Third Party Charge');
define('SALESFORCE_NGOC_DEFAULT_RECORD_TYPE', 'Donation');
define('SALESFORCE_NGOC_DEFAULT_TRANSACTION_TYPE', 'Payment');
define('SALESFORCE_NGOC_DEFAULT_FREQUENCY', 'One Payment');

/**
 * Implements hook_menu().
 */
function salesforce_ngoc_menu() {
// Settings page.
  $items['admin/config/salesforce/salesforce-ngoc'] = array(
    'title' => 'Salesforce NGO Connect',
    'description' => 'Configuration settings for the Salesforce NGO Connect',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('salesforce_ngoc_admin_form'),
    'access arguments' => array('administer salesforce ngoc'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/salesforce_ngoc.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function salesforce_ngoc_permission() {
  return array(
    'administer salesforce ngoc' => array(
      'description' => t('Configure settings for the Salesforce NGO Connect.'),
      'title' => t('Configure Salesforce NGOC'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_salesforce_genmap_map_fields_alter().
 */
function salesforce_ngoc_salesforce_genmap_map_fields_alter(&$fields, $context) {
  // The batch upload object needs some system flags set correct in order
  // to do it's thing. Let's do that here instead of implementing in the
  // mapping interface because these flags have no donation counterpart.
  if ($context['module'] == 'salesforce_donation' && $context['map']->salesforce_object_type == 'rC_Connect__Batch_Upload__c') {
    $fields['rC_Connect__Giving_Paid__c'] = TRUE;
    $fields['rC_Connect__Contact_1_Email_Type__c'] = variable_get('salesforce_ngoc_default_email_type', SALESFORCE_NGOC_DEFAULT_EMAIL_TYPE);
    $fields['rC_Connect__Address_Type__c'] = variable_get('salesforce_ngoc_default_address_type', SALESFORCE_NGOC_DEFAULT_ADDRESS_TYPE);
    $fields['rC_Connect__Giving_Transaction_Type__c'] = variable_get('salesforce_ngoc_default_transaction_type', SALESFORCE_NGOC_DEFAULT_TRANSACTION_TYPE);
    $fields['rC_Connect__Giving_Payment_Frequency__c'] = variable_get('salesforce_ngoc_default_frequency', SALESFORCE_NGOC_DEFAULT_FREQUENCY);
    $fields['rC_Connect__Payment_Method_Payment_Type__c'] = variable_get('salesforce_ngoc_default_payment_method_type', SALESFORCE_NGOC_DEFAULT_PAYMENT_METHOD_TYPE);
    $fields['rC_Connect__Disable_Merchant_Messages__c'] = TRUE; // Prevents NGOC from trying to process the payment.
    $fields['rC_Connect__Giving_Giving_Frequency__c'] = 'One Payment'; // Depends on one-time or recurring gift.
    $fields['rC_Connect__Giving_Record_Type__c'] = variable_get('salesforce_ngoc_default_record_type', SALESFORCE_NGOC_DEFAULT_RECORD_TYPE);
    $fields['rC_Connect__Batch_Upload_Campaign_Matched__c'] = '70163000000A9RwAAK'; //TODO: Either a setting or cid field.
  }
}

/**
 * Implements hook_salesforce_mapping_confirm_entity_for_queue().
 */
function salesforce_ngoc_salesforce_mapping_confirm_entity_for_queue($entity, $entity_type, $op){
  // Suppress creation of user salesforce sync item if the user was created by
  // submitting a donation form because the user data is included in the
  // batch_upload salesforce sync item.
  if($entity_type = 'user' && $op == 'CREATE') {
    if(!empty($entity->sbp_created_via['und']['0']['value']) && fundraiser_is_donation_type($entity->sbp_created_via['und']['0']['value'])) {
      return FALSE;
    }
  }
}

/**
 * Determine if item has "parent" records that have not been processed in SF.
 *
 * Salesforce queue items of records that reference "parent" objects which are
 * created via a batch_upload object (Contact and Opportunity) must go in
 * the hold queue until such time that the batch_upload object has been
 * processed and the Contact and/or Opportunity objects have been created. This
 * allows the child objects to reference the parent objecs using the parent's
 * sfid.
 *
 * We determine that those parents have been processed by looking for them in
 * the salesforce_sync_map table.
 *
 * Objects that have parent Contact and Opportunity objects are:
 * - sb_Actions_Taken__c
 * - social_share__c
 * - Donation_Upsell__c
 * - P2P_Personal_Campaign__c
 * - Sustainers_Upgrade__c
 *
 * @param array $item
 *   A salesforce_mapping or salesforce_genmap queue item.
 * @param object $drupal_object
 *   An object or drupal entity containing data for finding parent records.
 *
 * @return bool
 */
function salesforce_ngoc_has_unsyncd_parents($item, $drupal_object){
  $unsyncd_parents_found = FALSE;
  $salesforce_ngoc_parent_objects = variable_get('salesforce_ngoc_parent_objects');
  $object_type = $item['object_type'];
  // If this is an object with known parents that are created
  if (isset($salesforce_ngoc_parent_objects[$object_type])) {
    foreach ($salesforce_ngoc_parent_objects[$object_type] as $parent_object_type => $delta) {
      // Gotta find the drupal_id of the parent object.
      if ($parent_object_type == 'Contact') {
        if (!empty($drupal_object->uid)) {
          $drupal_id = $drupal_object->uid;
        }
      }
      elseif ($parent_object_type == 'Opportunity') {
        if (!empty($drupal_object->uid)) {
          $drupal_id = $drupal_object->uid;
        }
      }
      $result = db_query('SELECT sfid FROM {salesforce_sync_map} WHERE
        object_type = :parent_object_type AND
        delta = :delta AND
        drupal_id = :drupal_id',
        array(
          ':parent_object_type' => $parent_object_type,
          ':delta' => $delta,
          ':drupal_id' => $drupal_id,
        )
      );
      if ($result->rowCount() == 0) {
        watchdog('salesforce_ngoc', 'Unsynd parent found:' . $parent_object_type);
        $unsyncd_parents_found = TRUE;
      }
      unset($result);
    }
  }
  return $unsyncd_parents_found;
}

/**
 * Implements hook_salesforce_mapping_destination_queue_alter().
 */
function salesforce_ngoc_salesforce_mapping_destination_queue_alter(&$queue_name, $item, $entity) {
  if (salesforce_ngoc_has_unsyncd_parents($item, $entity)) {
    $queue_name = 'hold';
  }
}

/**
 * Implements hook_salesforce_genmap_destination_queue_alter().
 */
function salesforce_ngoc_salesforce_genmap_destination_queue_alter(&$queue_name, $item, $drupal_object) {
  if (salesforce_ngoc_has_unsyncd_parents($item, $drupal_object)) {
    $queue_name = 'hold';
  }
}
