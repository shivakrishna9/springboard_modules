<?php

/**
 * @file
 * Provides Salesforce integration functionality specific to NGOC.
 */

define('SALESFORCE_NGOC_DEFAULT_ADDRESS_TYPE', 'Home');
// define('SALESFORCE_NGOC_DEFAULT_PAYMENT_METHOD_TYPE', 'Third Party Charge');
define('SALESFORCE_NGOC_DEFAULT_RECORD_TYPE', 'Pledge');
define('SALESFORCE_NGOC_DEFAULT_FREQUENCY', 'One Payment');
define('SALESFORCE_NGOC_DEFAULT_POLL_RECORD_LIMIT', 2000);

require_once 'includes/salesforce_ngoc.polling.inc';
require_once 'includes/salesforce_ngoc.salesforce.inc';
require_once 'includes/salesforce_ngoc.sync_map.inc';
require_once 'includes/salesforce_ngoc.fundraiser_sustainers.inc';

/**
 * Implements hook_cron().
 */
function salesforce_ngoc_cron() {
  if (variable_get('salesforce_ngoc_standalone_cron_enabled', 0)) {
    return 0;
  }
  else {
    watchdog('salesforce_ngoc', 'Standard cron run.', NULL, WATCHDOG_INFO);
    salesforce_ngoc_poll_batch_upload();
  }
}

/**
 * Implements hook_entity_info().
 */
function salesforce_ngoc_entity_info() {
  return array(
    'salesforce_ngoc_sync_map' => array(
      'label' => t('NGOC Batch Upload Sync Map'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'base table' => 'salesforce_ngoc_sync_map',
      'entity keys' => array(
        'id' => 'id',
      ),
      'fieldable' => FALSE,
      'exportable' => FALSE,
      'module' => 'salesforce_ngoc',
    ),
  );
}

/**
 * Implements hook_entity_property_info_alter().
 */
function salesforce_ngoc_entity_property_info_alter(&$info) {
  $properties = &$info['salesforce_ngoc_sync_map']['properties'];
  $properties['lasted_polled']['type'] = 'date';
  $properties['created']['type'] = 'date';
}

/**
 * Implements hook_menu().
 */
function salesforce_ngoc_menu() {
  $items['admin/config/salesforce/salesforce-ngoc'] = array(
    'title' => 'Salesforce NGO Connect',
    'description' => 'Configuration settings for the Salesforce NGO Connect',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('salesforce_ngoc_admin_form'),
    'access arguments' => array('administer salesforce ngoc'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/salesforce_ngoc.admin.inc',
  );
  $items['salesforce_ngoc_cron'] = array(
    'page callback' => 'salesforce_ngoc_standalone_cron',
    'access callback' => 'salesforce_ngoc_standalone_cron_access',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function salesforce_ngoc_permission() {
  return array(
    'administer salesforce ngoc' => array(
      'description' => t('Configure settings for the Salesforce NGO Connect.'),
      'title' => t('Configure Salesforce NGOC'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function salesforce_ngoc_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'salesforce_ngoc') . '/views',
  );
}

/**
 * Menu callback for the standalone cron.
 */
function salesforce_ngoc_standalone_cron() {
  drupal_page_is_cacheable(FALSE);
  watchdog('salesforce_ngoc', 'Standalone cron run.', NULL, WATCHDOG_INFO);
  salesforce_ngoc_poll_batch_upload();
}

/**
 * Access callback for standalone cron.
 *
 * @todo make configurable.
 */
function salesforce_ngoc_standalone_cron_access() {
  if (variable_get('salesforce_ngoc_standalone_cron_enabled', 0)) {
    return TRUE;
  }
  return FALSE;
}
