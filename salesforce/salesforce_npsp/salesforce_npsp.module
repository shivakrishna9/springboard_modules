<?php

/**
 * @file
 * Provides Nonprofit Starter Pack specific functionality for Salesforce
 * integration.
 */

// Lastname for sync override. Defaults to Friend of [sitename]
define('SALESFORCE_NPSP_DEFAULT_LASTNAME', 'Friend of ' . variable_get('site_name'));

/**
 * Implements hook_menu().
 */
function salesforce_npsp_menu() {
// Settings page.
  $items['admin/config/salesforce/salesforce-npsp'] = array(
    'title' => 'Salesforce Nonprofit Starter Pack',
    'description' => 'Configuration settings for the Salesforce Nonprofit Starter Pack.',
    'page callback' => 'salesforce_npsp_admin_page',
    'access arguments' => array('administer salesforce npsp'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/salesforce_npsp.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function salesforce_npsp_permission() {
  return array(
    'administer salesforce npsp' => array(
      'description' => t('Configure settings for the Salesforce Nonprofit Starter Pack.'),
      'title' => t('Configure Salesforce NPSP'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_user_load().
 */
function salesforce_npsp_user_load($users) {
  $result = db_query('SELECT drupal_id, sfid, object_type FROM {salesforce_sync_map} WHERE drupal_id IN (:uids)',
    array(':uids' => array_keys($users)));

  // Add the user's Salesforce ids for convenience. This will produce
  // $user->salesforce_account_id and $user->salesforce_contact_id by default.
  foreach ($result as $record) {
    $field = strtolower('Salesforce_' . $record->object_type . '_Id');
    $users[$record->drupal_id]->{$field} = $record->sfid;
  }
}

/**
 * Implements hook_user_view().
 */
function salesforce_npsp_user_view($account) {
  if (!variable_get('salesforce_npsp_user_profile', TRUE)) {
    return;
  }

  if (!empty($account->salesforce_contact_id) && !empty($account->salesforce_account_id)) {
    $account->content['summary']['salesforce_contact_id'] = array(
      '#type' => 'user_profile_item',
      '#title' => t('Salesforce Contact Id'),
      '#markup' => $account->salesforce_contact_id,
    );

    $account->content['summary']['salesforce_account_id'] = array(
      '#type' => 'user_profile_item',
      '#title' => t('Salesforce Account Id'),
      '#markup' => $account->salesforce_account_id,
    );
  }
  else {
    $account->content['summary']['salesforce_not_exported'] = array(
      '#type' => 'user_profile_item',
      '#title' => t('Salesforce'),
      '#markup' => t('User not exported to Salesforce'),
    );
  }
}

/**
 * Implements hook_salesforce_queue_create_item_alter()
 */
function salesforce_npsp_salesforce_queue_create_item_alter(&$item) {
  if ($item['delta'] == 'fundraiser_sustainers_series') {
    $fundraiser_sustainers_series = entity_load_single('fundraiser_sustainers_series', $item['drupal_id']);
    if (!empty($fundraiser_sustainers_series)) {
      $item['sobject']->fields['npe03__Contact__c'] = '[Contact:user:' . $fundraiser_sustainers_series->uid . ']';

      $rmid = _salesforce_sync_get_rmid($item);
      if (empty($rmid)) {
        // Set installments to zero for unsynced objects to prevent NPSP
        // creating two sets of related opportunities.
        $item['sobject']->fields['npe03__Installments__c'] = 0;
      }
    }
  }

  // Check if the object is a sustainer upgrade. If so we'll need to add a relationship
  // to the NPSP specific recurring donation object.
  if ($item['object_type'] == 'Sustainers_Upgrade__c') {
    $did = $item['sobject']->fields['Donation_ID__c'];
    $item['sobject']->fields['Recurring_Donations__c'] = sprintf('[npe03__Recurring_Donation__c:fundraiser_sustainers_series:%d]', $did);
    $item['sync_rules']['Recurring_Donations__c'] = 'always';
    // Add a token for the contact. The user's id is mapped, so we should be able to pluck it from the object.
    $item['sobject']->fields['Contact__c'] = sprintf('[Contact:user:%d]', $item['sobject']->fields['User_ID__c']);
  }
}

/**
 * Implements hook_salesforce_genmap_map_fields_alter().
 */
function salesforce_npsp_salesforce_genmap_map_fields_alter(&$fields, $context) {
  // Alter donations based on recurring status.
  if ($context['module'] == 'salesforce_donation') {
    $donation = $context['object'];
    // Add a field if this is a recurring object.
    if ($donation->donation['recurs_monthly'] == TRUE && !empty($donation->master_did) ) {
      $fields['npe03__Recurring_Donation__c'] = '[npe03__Recurring_Donation__c:fundraiser_sustainers_series:' . $donation->master_did . ']';
    }
    if ($donation->donation['recurs_monthly'] == TRUE && empty($donation->master_did) ) {
      $fields['npe03__Recurring_Donation__c'] = '[npe03__Recurring_Donation__c:fundraiser_sustainers_series:' . $donation->did . ']';
    }
  }
}

/**
 * Implements hook_salesforce_queue_postprocess_batch().
 */
function salesforce_npsp_salesforce_queue_postprocess_batch($batch, $results, $queue) {
  if (!isset($batch['sobjects']) || empty($batch['sobjects'])) {
    // Some batches do not have sobjects, such as delete.
    return;
  }

  // Prune some information off the first item in the batch since this info is
  // not available at the batch level.
  $module = $batch['items'][0]->module;
  $delta = $batch['items'][0]->delta;
  $object_type = $batch['items'][0]->object_type;
  $operation = $batch['operation'];

  // Array to hold the Salesforce ids of every exported contact. We'll
  // use this array to retreive all their account ids. The responses are
  // in the same exact order as the items in the batch so we can safely
  // assume that $batch['items'][10] corresponds directly to $results[10].
  $sfids = array();

  // Check that the batch contained users being exported to contacts.
  if ($object_type == 'Contact' && $delta == 'user') {
    // Loop over the results array because that will indicate successes
    // and failures.
    $count = count($results);
    for ($i = 0; $i < $count; $i++) {
      if ($results[$i]->success) {
        $sfids[$batch['items'][$i]->drupal_id] = $results[$i]->id;
      }
    }

    // Get the account ids for each contact in the batch.
    $account_ids = salesforce_npsp_get_contact_account_ids($sfids);

    // Save the account ids.
    salesforce_npsp_save_account_ids($account_ids);
  }
}

/**
 * Implements hook_schema_alter()
 */
function salesforce_npsp_schema_alter(&$schema) {
  if (isset($schema['fundraiser_sustainers_series'])) {
    $schema['fundraiser_sustainers_series']['fields']['npsp_last_payment_date'] = array(
      'description' => 'The date of the last payment in this donation series.',
      'type' => 'date',
      'mysql_type' => 'date',
    );

    $schema['fundraiser_sustainers_series']['fields']['npsp_next_payment_date'] = array(
      'description' => 'The date of the next payment in this donation series.',
      'type' => 'date',
      'mysql_type' => 'date',
    );

    $schema['fundraiser_sustainers_series']['fields']['npsp_installment_period'] = array(
      'description' => 'The installment period used for this donation series.',
      'type' => 'varchar',
      'length' => 255,
    );

    $schema['fundraiser_sustainers_series']['fields']['npsp_schedule_type'] = array(
      'description' => 'The schedule type used for this donation series.',
      'type' => 'varchar',
      'length' => 255,
    );
  }
}

/**
 * Implements hook_fundraiser_donation_success()
 */
function salesforce_npsp_fundraiser_donation_success($donation) {
  salesforce_npsp_update_fundraiser_sustainers_series($donation);
}

/**
 * Retreives the 1:1 acccount id for an array of contacts.
 *
 * @param array $sfids
 *   The array of Salesforce contact ids whose account ids
 *   are to be retreived.
 *
 * @return array
 *   An array in the format of uid => accountid.
 */
function salesforce_npsp_get_contact_account_ids($sfids) {
  $sync = new SalesforceSync();
  $drupal_ids = array_keys($sfids);
  $account_ids = array();

  // Retrieve the account id for each contact.
  $response = $sync->fetchByIds('Contact', array('AccountId'), $sfids);

  // Associate the account id with each Drupal user id.
  $count = count($sfids);
  for ($i = 0; $i < $count; $i++) {
    $account_ids[$drupal_ids[$i]] = $response[$i]->fields->AccountId;
  }

  return $account_ids;
}

/**
 * Saves a user's account id.
 *
 * @param array $account_ids
 *   The account ids to save.
 */
function salesforce_npsp_save_account_ids($account_ids) {

  foreach ($account_ids as $drupal_id => $account_id) {
    $record = array(
      'sfid' => $account_id,
      'drupal_id' => $drupal_id,
      'module' => 'user',
      'delta' => 'user',
      'object_type' => 'Account',
    );

    salesforce_sync_save_map($record);
  }
}

/**
 * Implements hook_salesforce_sync_fail_item().
 * When a Contact sync fails due to a missing last name, add a last name as configured in admin settings.
 *
 * @TODO remove this function once a full solution is developed.
 */
function salesforce_npsp_salesforce_sync_fail_item($item, $message, $result) {

  // If sync fails because LastName is empty, item lastname to standard value
  if (!empty($item->sobject->fields) && array_key_exists('LastName', $item->sobject->fields)
    && $result->errors[0]->message == "Required fields are missing: [LastName]"
  ) {
    $lastname = variable_get('salesforce_npsp_lastname', SALESFORCE_NPSP_DEFAULT_LASTNAME);
    $item->sobject->fields['LastName'] = $lastname;
  }

}

/**
 * Implements hook_fundraiser_upsell_create_recurring_success()
 */
function salesforce_npsp_fundraiser_upsell_create_recurring_success($donation) {
  salesforce_npsp_update_fundraiser_sustainers_series($donation);
}

/**
 * Updates the NPSP-specific fields of an existing fundraiser sustainers series.
 *
 * @param object $donation
 *   The master donation in the donation series.
 */
function salesforce_npsp_update_fundraiser_sustainers_series($donation) {
  $donation = fundraiser_donation_get_donation($donation->did);
  $fundraiser_sustainers_series = entity_load_single('fundraiser_sustainers_series', $donation->did);

  $last_charge = time();
  $next_charge = NULL;

  if (!empty($fundraiser_sustainers_series)) {
    $sustainer_count = db_query("SELECT COUNT(`did`) AS `count` FROM {fundraiser_sustainers} WHERE `master_did` = :did AND `did` != `master_did`", array(
      ':did' => $donation->did,
        ))->fetchField();

    if ($sustainer_count == 0) {
      // No sustainer records have been created yet; this is the initial
      // donation.
      $next_charge = mktime(date('H', $last_charge), date('i', $last_charge), date('s', $last_charge), (date('n', $last_charge) + 1), date('j', $last_charge), date('Y', $last_charge));
    }
    else {
      $next_charge = db_query('SELECT `next_charge` FROM {fundraiser_sustainers} WHERE `master_did` = :did AND `did` != `master_did` AND `attempts` = 0 ORDER BY `did` ASC LIMIT 1', array(
      ':did' => $donation->did,
        ))->fetchField();

      if (empty($next_charge)) {
        // Set next payment date to last date if at end of series.
        $next_charge = $last_charge;
      }
    }

    $fundraiser_sustainers_series->npsp_last_payment_date = date('Y-m-d H:i:s', $last_charge);
    $fundraiser_sustainers_series->npsp_next_payment_date = date('Y-m-d H:i:s', $next_charge);
    $fundraiser_sustainers_series->npsp_installment_period = 'Monthly';
    $fundraiser_sustainers_series->npsp_schedule_type = 'Multiply By';

    $fundraiser_sustainers_series->save();
  }
}
