<?php

/**
* Implements hook_menu().
*/
function sb_translate_menu() {
  $items = array();
  $items['node/%node/translation-manager'] = array(
    'title' => 'Translations',
    'page callback' => '_sb_translate_render_node_translation_manager',
    'page arguments' => array(arg(1)),
    'access callback' => 'sb_translate_access_check',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Determines whether the current node should receive the Translation Manager tab.
 * Also checks user access to springboard admin pages.
 */
function sb_translate_access_check($node) {
  if (!user_access('administer springboard')) {
    return FALSE;
  }
  $node_type_settings = variable_get('sb_translate_node_type_settings', array());
  if (!isset($node_type_settings[$node->type]['enabled'])) {
    return FALSE;
  }
  return $node_type_settings[$node->type]['enabled'];
}

/**
 * Translation manager page content.
 */
function _sb_translate_render_node_translation_manager($node) {
  global $language;
  drupal_set_title(drupal_get_title() . ' - ' . 'Translation Manager' . 
    ($language->language != 'en' ? ' - ' . $language->name : '')); 

  $view = views_get_view('webform_translate_translation_manager'); // TODO - rename view to sb_translate_translation_manager
  $view->set_display('default');
  $view->pre_execute();
  $view->execute();
  $output = $view->render();
  return $output;
}

/**
 * Defines the translation manager form:
 */
function sb_translate_translation_manager_form() {
  global $language;
  $languages =  locale_language_list('name');
  unset($languages['en']); // TO DO - PROPERLY HANDLE SOURCE LANGAUGE

  $view = views_get_view('webform_translate_translation_manager');
  $view->set_display('default');
  $view->pre_execute();
  $view->execute();

  $form['translation_manager'] = array(
    '#type' => 'fieldset',
    '#theme' => 'sb_translate_table_theme',
    '#translation_field_data' => array(),
  );

  $nid = arg(1);
  if (!is_numeric($nid)) {
    return array();
  }
  $node = node_load($nid);
  
  // Group source and tranlation data together for display in table rows and save label info for later:
  $view_data = array();
  foreach ($view->result as $result) {
    list($textgroup, $nid, $cid, $sub_field) = explode(':', $result->locales_source_location);
    $key = $nid . ':' . $cid . ':' . $sub_field;
    $view_data[$key]['cid'] = $cid;
    $view_data[$key]['sub_field'] = $sub_field; // Label, description, or option
    $view_data[$key]['source'] = $result->locales_source_source;
    $view_data[$key]['location'] = $result->locales_source_location;
    if ($result->locales_target_language == $language->language) {
      $view_data[$key]['translations'][$result->locales_target_language] = $result->locales_target_translation;
    }
    // Handle webform components:
    if (!in_array($cid, array('amount', 'recurringamount', 'gateway')) && isset($node->webform['components'][$cid]['form_key'])) {
      // Ignore the state and country fields as they may be managed at the sitewide-level:
      if (in_array($node->webform['components'][$cid]['form_key'], array('state', 'country'))) {
        continue;
      }
      $form['translation_manager']['#translation_field_data'][$cid] = array(
        'cid' => $cid,
        'form_key' => $node->webform['components'][$cid]['form_key'],
        'textgroup' => $textgroup,
      );
    }
    // Handle Fundraiser components:
    else {
      $form['translation_manager']['#translation_field_data'][$cid] = array(
        'cid' => $cid,
        'form_key' => $cid,
        'textgroup' => $textgroup,
      );
    }
  }

  // Build the form elements:
  foreach ($view_data as $field_key => $data) {
    if (isset($node->webform['components'][$data['cid']]['form_key'])) {
      $form_key = $node->webform['components'][$data['cid']]['form_key'];
    }
    else {
      $form_key = $data['cid'];
    }

    if (isset($node->webform['components'][$data['cid']]['type'])) {    
      $type = $node->webform['components'][$data['cid']]['type'];
      if ($type == 'hidden') {
        continue;
      }
    } else {
      $type = $data['sub_field'];
    }

    // Gather the translations for this row:
    $translations = array();
    foreach ($languages as $language_code => $language_name) {
      if ($language_code != $language->language) {
        continue;
      }
      $translations[$language_code] = '';
      if (isset($data['translations'][$language_code])) {
        $translations[$language_code] = $data['translations'][$language_code];
      }
    }
     
    $form['translation_manager']['rows'][$field_key] = array(
      '#type' => 'fieldset',
    );

    $form['translation_manager']['rows'][$field_key][$field_key . ':source'] = array(
      '#type' => $data['sub_field'] == 'textarea' ? 'textarea' : 'textfield',
      '#size' => 22,
      '#default_value' => str_replace('$', '\$', $data['source']),
      '#disabled' => TRUE,
      '#attributes' => array('title' => $data['location'], 'class' => array('source-string')),
    );
    foreach ($translations as $language_code => $translation) {
      // For testing purposes, let debug=1 auto-populate all fields with the current language prefixed.
      $default_value = isset($_GET['debug']) ? strtoupper($languages[$language_code]) . ' - ' . str_replace('$', '\$', $data['source']) : $translation;

      // Populate this row with its translation field:
      $form['translation_manager']['rows'][$field_key][$field_key . ':' . $language_code] = array(
        '#type' => $data['sub_field'] == 'textarea' ? 'textarea' : 'textfield',
        '#size' => 22,
        '#default_value' => $default_value,
        '#attributes' => array('title' => $data['location'], 'initial' => $default_value),
      );      
    }
  }
  $form['translation_manager']['update_translations'] = array(
    '#type' => 'submit',
    '#value' => 'Update Translations',
  );

  $form['#attached']['css'][] =  drupal_get_path('module', 'sb_translate') . '/css/sb_translate.css';
  $form['#attached']['js'][] =  drupal_get_path('module', 'sb_translate') . '/js/sb_translate.js';
  $form['#submit'][] = '_sb_translate_update_translations';
  return $form;
}

/**
 * Form submit function for the translation manager.
 */
function _sb_translate_update_translations($form, &$form_state) {
  $nid = arg(1);
  if (!is_numeric($nid)) {
    return;
  }
  $languages =  locale_language_list('name');
  // TO DO - PROPERLY DETECT SOURCE LANGAUGE:
  unset($languages['en']);
  foreach ($form['translation_manager']['#translation_field_data'] as $cid => $translation_field_data) {
    $textgroup = $translation_field_data['textgroup'];
    foreach ($form_state['values'] as $input_key => $input_string) {
      // Handle item lists such as select options:
      if (strpos($input_key, $nid . '_' . $cid . '_') === FALSE) {
        continue;
      }

      if (strpos($input_key, $nid . '_' . $cid . '_option_') !== FALSE) {
        list($nid, $cid, $sub_field, $option_key, $language_code) = explode('_', $input_key);
        $sub_field = $sub_field . '_' . $option_key;
        $is_option = TRUE;
      }
      else {
        list($nid, $cid, $sub_field, $language_code) = explode('_', $input_key);
        $is_option = FALSE;
      }
      // Update the translation:
      if (isset($form_state['values'][$nid . '_' . $cid . '_' . $sub_field . '_' . $language_code])
        && isset($form_state['values'][$nid . '_' . $cid . '_' . $sub_field . '_source'])) {
        $translated_string = $form_state['values'][$nid . '_' . $cid . '_' . $sub_field . '_' . $language_code];
        $source_string = $form_state['values'][$nid . '_' . $cid . '_' . $sub_field . '_source'];
        $location = $nid . ':' . $cid . ':' . $sub_field;
        i18n_string_translation_update(
          $textgroup . ':' . $location,
          str_replace('$', '\$', $translated_string),
          $language_code,
          $source_string
        );
      }
    }
  }
  drupal_set_message('Translations have been updated.');
}

/**
 * Implements hook_theme().
 */
function sb_translate_theme() {
  return array(
    'sb_translate_table_theme' => array(
      'render element' => NULL, 
      'form' => NULL,
    ),
  );
}

function theme_sb_translate_table_theme($form) {
  $output = '';
  global $language;
  $form = array_shift($form);
  $attributes = array();
  $results_language_codes = array();
  $textgroups = array(); 
  if (!isset($form['rows'])) {
    return;
  }

  $last_row_id = '';
  $rows = array();
  $current_row_class = 'row-even';
  foreach ($form['rows'] as $row_key => $row_data) {
    if (!is_array($row_data) || !isset($row_data['#type']) || $row_data['#type'] != 'fieldset') {
      continue;
    }
    list($nid, $id, $sub_field) = explode(':', $row_key);
    // If the sub-field contains delimited values only use the first value for the label:
    if (strpos($sub_field, ';') !== FALSE) {
      $sub_field = substr($sub_field, 0, strpos($sub_field, ';'));
    }
    if (isset($form['#translation_field_data'][$id]['textgroup'])) {
      $textgroup_class = 'textgroup-' . str_replace(' ', '-', strtolower($form['#translation_field_data'][$id]['textgroup']));
    }
    else {
      continue;
    }

    // Provide zebra stripes based on field id:
    if ($last_row_id != $id) {
      $current_row_class = ($current_row_class == 'row-even') ? 'row-odd' : 'row-even';
      $last_row_id = $id;
    }

    // Prepare data for each row:
    $row = array();
    $row['data'][] = array('class' => 'sub-field', 'data' => $form['#translation_field_data'][$id]['form_key']);
    $row['data'][] = array('class' => 'sub-field', 'data' => $sub_field);
    foreach ($row_data as $item) {
      if (!is_array($item) || !isset($item['#type'])) {
        continue; 
      }
      if (isset($item['#name'])) {
        list($nid, $cid, $sub_field, $language_code) = explode(':', $item['#name']);
        if ($language_code != 'source' && !in_array($language_code, $results_language_codes)) {
          $results_language_codes[] = $language_code;
        }
      }

      if ($language_code == 'source') {
        $cell_class = ($language_code == 'source' ? array('source-string') : array('translated-string', $language_code . '-string'));
      }
      else {
        $cell_class = array('translated-string', $language_code . '-string');
      }
      $cell_class[] = $textgroup_class;

      if (!in_array($form['#translation_field_data'][$id]['textgroup'], $textgroups)) {
        $textgroups[$textgroup_class] = $form['#translation_field_data'][$id]['textgroup'];
      }
      
      $row['data'][] = array('class' => $cell_class, 'data' => drupal_render($item));
      $row['class'] = array($current_row_class);
    }

    // Add the row:
    $rows[] = $row;
  }


  // Populate the header based on results returned:
  $languages =  locale_language_list('name');
  unset($languages['en']); // TO DO - PROPERLY DETECT SOURCE LANGAUGE:

  $header = array('Field', '', t('Untranslated String'));
  $header[] = $language->name . ' ' . t('Translation');

  // Add textgroup tabs:
  $tabs = '<ul class="tabs secondary sb-textgroup-tabs">';
  $count = 0;
  // Place webform components first:
  if (array_key_exists('textgroup-webform-component', $textgroups)) {
    $webform_textgroup = array('textgroup-webform-component' => $textgroups['textgroup-webform-component']);
    unset($textgroups['textgroup-webform-component']);
    $textgroups = array_merge($webform_textgroup, $textgroups);
  }
  foreach ($textgroups as $textgroup_class => $textgroup) {
    $tabs .= '<li' . ($count == 0 ? ' class="active"' : '') . '>' .
      '<a href="#" class="' . ($count == 0 ? 'active ' : '') . '" textgroup="' . $textgroup_class . '">' . $textgroup . '</a></li>';
    $count++;
  }
  $tabs .= '</ul>';     

  $output .= $tabs;
  // Render the table/form
  $output .= theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('id' => 'sb-translation-manager'),
  ));
  unset($form['rows']);
  $output .= drupal_render_children($form);
  return $output;
}

/**
 * Implements hook_views_post_render().
 */
function sb_translate_views_post_render(&$view, &$output, &$cache) {
  if ($view->name != 'webform_translate_translation_manager') {
    return;
  }
  $form = drupal_get_form('sb_translate_translation_manager_form');
  $form_html = drupal_render($form);

  // Ensure AJAX updates do not break the form:
  $arg1 = arg(1);
  $action = '/springboard/node/' . $arg1 . '/translation-manager';
  $form_html = str_replace('/views/ajax', $action, $form_html);

  // Replace default view content with the translation manager form:
  $output = preg_replace('/<div class="view-content">(.*?)<\/div>/s', $form_html, $output);

}

/**
 * Updates source translation data for this webform component, excluding hidden fields.
 *
 * @param $component
 *   The webform component being updated.
 */
function _sb_translate_webform_register_component($component) {
  if (!isset($component['cid']) || !is_numeric($component['cid'])) {
    return;
  }
  if ($component['type'] == 'hidden') {
    return;
  }

  // Ignore gateway components that are fundraiser-specific:
  if (in_array($component['form_key'], array('gateway'))) {
    return;
  }

  $textgroup = 'Webform Component';
  $location = $component['nid'] . ':' . $component['cid'];

  // Register component label:
  $source_string = $component['name'];
  i18n_string_update(
    $textgroup . ':' . $location . ':label', 
    $source_string,
    array()
  );

  // Register component description:
  if (isset($component['extra']['description'])) {
    $source_string = $component['extra']['description'];
    i18n_string_update(
      $textgroup . ':' . $location . ':description',
      $source_string,
      array()
    );
  }

  // Ignore the state field as its translation will not be managed at the node level:
  if ($component['form_key'] == 'state' && $component['type'] == 'select') {
    return;
  }

  // Register checkbox or radio options:
  if (in_array($component['type'], array('select')) && isset($component['extra']['items'])) {
    if(in_array($component['form_key'], array('amount', 'recurring_amount'))) {
      return;
    }
    $options = explode("\n", $component['extra']['items']);
    foreach ($options as $option) {
      if (strpos($option, '|') === FALSE) {
        continue;
      }
      list($option_key, $option_value) = explode("|", $option);
      $source_string = $component['name'];
      $option_value = trim($option_value);
      i18n_string_update(
        $textgroup . ':' . $location . ':option_' . $option_key,
        $option_value,
        array()
      );
    }
  }
}

/**
 * Implements hook_webform_component_update().
 * 
 * Register a component for translation on component update:
 */
function sb_translate_webform_component_update($component) {
  _sb_translate_webform_register_component($component);
}

/**
 * Implements hook_node_presave().
 */
function sb_translate_node_presave($node) {
  $webform_types = variable_get('webform_node_types');
  if (!in_array($node->type, $webform_types) || !isset($node->webform['components'])) {
    return;
  }
  foreach ($node->webform['components'] as $cid => $component) {
    _sb_translate_webform_register_component($component);
  }
}


/**
 * Implements hook_views_query_alter().
 *
 * Filter the translation manager's results to those specific to the current webform node.
 */
function sb_translate_views_query_alter(&$view, &$query) {
  if ($view->name != 'webform_translate_translation_manager') {
    return;
  }
  $arg1 = arg(1);
  if (!is_numeric($arg1)) {
    return;
  }
  $query->where[1]['conditions'][] = array(
    'field' => 'locales_source.location',
    'value' => '%:' . $arg1 . ':%:%',
    'operator' => 'LIKE',
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add translation manager settings to the content type settings form.
 */
function sb_translate_form_node_type_form_alter(&$form, &$form_state) {
  $sb_translate_node_type_settings = variable_get('sb_translate_node_type_settings', array());
  $form['sb_translate'] = array(
    '#type' => 'fieldset',
    '#title' => t('Translation Manager'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'additional_settings',
  );
  $form['sb_translate']['sb_translate_status'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable i18n-based translation support for') . ' ' . $form['#node_type']->name . ' ' . t(' nodes.'),
    '#default_value' => isset($sb_translate_node_type_settings[$form['#node_type']->type]['enabled']) ? 
      $sb_translate_node_type_settings[$form['#node_type']->type]['enabled'] : 0,
  );
  $form['#submit'][] = '_sb_translate_form_node_type_form_save_settings';
}

/**
 * Save content type edit form Translation Manager settings:
 */
function _sb_translate_form_node_type_form_save_settings($form, &$form_state) {
  if (!isset($form_state['build_info']['args'][0]->type)) {
    return;
  }
  $node_type = $form_state['build_info']['args'][0]->type;
  $sb_translate_node_type_settings = variable_get('sb_translate_node_type_settings', array());
  if (isset($form_state['input']['sb_translate_status']) && $form_state['input']['sb_translate_status'] == TRUE) {
    $sb_translate_node_type_settings[$node_type] = array('enabled' => TRUE);
  }
  else {
    $sb_translate_node_type_settings[$node_type] = array('enabled' => FALSE);
  }
  variable_set('sb_translate_node_type_settings', $sb_translate_node_type_settings);
}

/**
 * Implements hook_form_alter().
 *
 * - Adds submit function for registering non-component fundraiser strings for translation.
 * - Implements language filtering via a non-view-based exposed filter.
 * - Translates state component webform output.
 * - Translates Fundraiser form validation messages.
 * 
 */
function sb_translate_form_alter(&$form, &$form_state, $form_id) {
  // Save non-component fundraiser fields on node edit form submission:
  if (isset($form['#node']->type) && $form_id == $form['#node']->type . '_node_form') {
    $form['#submit'][] = '_sb_translate_register_node_edit_fundraiser_strings';
    return;
  }

  // Save webform confirmation page settings:
  elseif (isset($form['#node']->type) && isset($form['#node']->nid) && $form_id == 'webform_configure_form') {
    $form['#submit'][] = '_sb_translate_register_webform_confirmation_settings';
    return;
  }

  // Translate node view webform output:
  elseif (isset($form['#node']->nid) && $form_id == 'webform_client_form_' . $form['#node']->nid) {
    $nid = $form['#node']->nid;
    // Fundraiser gateway fields:
    if (isset($form['submitted']['payment_information']['payment_method']['#options'])) {
      foreach ($form['submitted']['payment_information']['payment_method']['#options'] as $gateway_key => $gateway_label) {
        $translation = i18n_string_translate(
          'Fundraiser' . ':' . $nid . ':' . 'gateway' . ':' . 'option' . ';' . $gateway_key,
          $gateway_label,
          array()
        );
        $form['submitted']['payment_information']['payment_method']['#options'][$gateway_key] = $translation;
      }
    }
    // Payment amount labels:
    if (isset($form['submitted']['donation']['amount']['#options'])) {
      $count = 0;
      foreach ($form['submitted']['donation']['amount']['#options'] as $amount_key => $amount_label) {
        $translation = i18n_string_translate(
          'Fundraiser' . ':' . $nid . ':' . 'amount' . ':' . 'option' . ';' . ($amount_key == 'other' ? 'other' : $count),
          $amount_label,
          array()
        );
        $translation = str_replace('\$', '$', $translation);
        $form['submitted']['donation']['amount']['#options'][$amount_key] = $translation;
        $count++;
      }
    }
    // Recurring payment amount labels:
    if (isset($form['submitted']['donation']['recurring_amount']['#options'])) {
     $count = 0;
      foreach ($form['submitted']['donation']['recurring_amount']['#options'] as $amount_key => $amount_label) {
        $translation = i18n_string_translate(
          'Fundraiser' . ':' . $nid . ':' . 'recurringamount' . ':' . 'option' . ';' . ($amount_key == 'other' ? 'other' : $count),
          $amount_label,
          array()
        );
        $translation = str_replace('\$', '$', $translation);
        $form['submitted']['donation']['recurring_amount']['#options'][$amount_key] = $translation;
        $count++;
      }
    }
    // Credit payment info labels:
    if (isset($form['submitted']['payment_information']['payment_fields']['credit'])) {
      $payment_info_items = array(
        'card_number' => 'ccnumber', 
        'expiration_date' => 'expdate',
        'card_cvv' => 'cvv',
      );
      foreach ($payment_info_items as $key => $data_name) {
        if (isset($form['submitted']['payment_information']['payment_fields']['credit'][$key])) {
          $form['submitted']['payment_information']['payment_fields']['credit'][$key]['#title'] = i18n_string_translate(
            'Fundraiser' . ':' . $nid . ':' . $data_name . ':' . 'label',
            $form['submitted']['payment_information']['payment_fields']['credit'][$key]['#title'],
            array()
          );
        }
      } 
    }
    // Suffix submission message:
    $default_submit_string = 'By clicking SUBMIT your credit card will be securely processed.';
    if (isset($form['submit']['#suffix']) && strpos($form['submit']['#suffix'], $default_submit_string)) {
      $translated_submit_string = i18n_string_translate(
        'Fundraiser' . ':' . $nid . ':' . 'submitmessage' . ':' . 'label',
        $default_submit_string,
        array()
      );
      $form['submit']['#suffix'] = str_replace($default_submit_string, $translated_submit_string, $form['submit']['#suffix']);
    }
    // Webform state component options based on current country:
    if (isset($form['submitted']['billing_information']['state'])) {
      $state_data = $form['submitted']['billing_information']['state'];
      if (isset($state_data['#webform_component']['cid']) 
        && isset($state_data['#webform_component']['nid'])
        && isset($form['submitted']['billing_information']['country']['#default_value'])) {
        $country_code = $form['submitted']['billing_information']['country']['#default_value'];
        $nid = $state_data['#webform_component']['nid'];
        $cid = $state_data['#webform_component']['cid'];
        foreach ($state_data['#options'] as $state_code => $state_name) {
          $form['submitted']['billing_information']['state']['#options'][$state_code] = i18n_string_translate(
            'Addressfield State' . ':' . $nid . ':' . $cid . ':option;' . $country_code . ';' . $state_code,
            $state_name,
            array()
          );
        }
      }
    }
    // Translate validation messages:
    $valid_msgs = db_query("SELECT location, source FROM {locales_source} " .
      "WHERE location LIKE '%Fundraiser:" . (is_numeric($nid) ? $nid : 0) . ":js-%'");
    $validation_js = "Drupal.behaviors.sbTranslateManagerValidationBehavior = {
      attach: function(context) { (function($) {
        $(window).ready(function(){
    ";
    
    foreach ($valid_msgs as $msg_data) {
      list($textgroup, $id, $field_info, $sub_field) = explode(':', $msg_data->location);
      list($js, $field_key) = explode('-', $field_info);
      // fields containing tokens cause trouble; skipping for now:
      if (strpos($field_key, '{') !== FALSE) {
        continue;
      }
      $string = $msg_data->source;
      $string = i18n_string_translate(
        $msg_data->location,
        $string,
        array()
      );
      $string = str_replace("'", "\\'", $string);
     
      // dpm($field_key);
      // dpm($string);
      $validation_js .= "jQuery.validator.messages." . $field_key . " = '" . $string . "';\n"; 
      //$validation_js .= "alert(jQuery.validator.messages." . $field_key . ");\n"; 
    }
    
    //$validation_js .= "alert(JSON.stringify($('#edit-submitted-payment-information-payment-fields-credit-card-number input').settings.messages));\n";
    $validation_js .= "});})(jQuery);}}";
    
    drupal_add_js($validation_js, array('type' => 'inline', 'scope' => 'footer', 'cache' => FALSE));


    return;
  } // End node view form translations.

  // Add the Translation Manager language switcher:
  elseif (isset($form_state['view']->name) && $form_state['view']->name == 'webform_translate_translation_manager'
    && $form_id == 'views_exposed_form') {
    $languages =  locale_language_list('name');
    unset($languages['en']);
    global $language;
    $switcher_js = "Drupal.behaviors.sbTranslateManagerFiltersBehavior = {
      attach: function(context) { (function($) {
        if ($('#edit-language-wrapper').length) {
          $('#edit-language-wrapper').remove();
        }
        $('.view-webform-translate-translation-manager .views-exposed-widgets .views-submit-button').before(
          '<div id=\"edit-language-wrapper\" class=\"views-widget-filter-language\">' +
            '<label for=\"edit-language\">Select language</label>' +
            '<div class=\"views-widget\">' +
            '<div class=\"form-item form-type-select form-item-language control-group\">' +
              '<select id=\"translation-manager-lang\">' +";
    foreach ($languages as $lang_code => $lang_name) {
      $is_current_lang = FALSE;
      if ($language->language == $lang_code) {
        $is_current_lang = TRUE;
      }
      $switcher_js .= "'<option value=\"" . $lang_code . "\"" . ($is_current_lang ? ' selected="selected"' : '') . ">" . $lang_name . "</option>' +";
    }
    $switcher_js .= "'</select></div></div></div>');";
    // Reload the page with a different language set for the current user on change:
    $switcher_js .= "
      $('.view-webform-translate-translation-manager #translation-manager-lang').change(function () {
        $('.view-webform-translate-translation-manager .views-reset-button,' +
          '.view-webform-translate-translation-manager .views-submit-button').hide();
        window.location = '/" . current_path() . "?language=' + $(this).val();
      });";
    $switcher_js .= "})(jQuery);}}";
    drupal_add_js($switcher_js, array('type' => 'inline', 'scope' => 'footer', 'cache' => FALSE));
    return;
  }
}

/**
 * Form submit function for the node edit form that register and updates non-component fundraiser strings for translation.
 */
function _sb_translate_register_node_edit_fundraiser_strings($form, &$form_state) {
  if (!isset($form_state['values']) || !isset($form_state['values']['nid'])) {
    return;
  }
  $textgroup = 'Fundraiser';
  $values = $form_state['values'];
  $nid = $values['nid'];

  // Donation amounts:
  if (isset($values['amount_wrapper']['donation_amounts'])) {
    foreach ($values['amount_wrapper']['donation_amounts'] as $key => $amount_data) {
      if (isset($amount_data['label'])) {
        i18n_string_update(
          $textgroup . ':' . $nid . ':' . 'amount' . ':' . 'option' . ';' . $key,
          $amount_data['label'],
          array()
        );
      }
    }
    i18n_string_update(
      $textgroup . ':' . $nid . ':' . 'amount' . ':' . 'option' . ';' . 'other',
      'Other',
      array()
    );    
  }
  // Recurring donation amounts:
  if (isset($values['recurring_amount_wrapper']['recurring_donation_amounts'])) {
    foreach ($values['recurring_amount_wrapper']['recurring_donation_amounts'] as $key => $amount_data) {
      if (isset($amount_data['label'])) {
        i18n_string_update(
          $textgroup . ':' . $nid . ':' . 'recurringamount' . ':' . 'option' . ';' . $key,
          $amount_data['label'],
          array()
        );
      }
    }
    i18n_string_update(
      $textgroup . ':' . $nid . ':' . 'recurringamount' . ':' . 'option' . ';' . 'other',
      'Other',
      array()
    );
  }
  // Payment method gateway labels:
  if (isset($values['gateways'])) {
    foreach($values['gateways'] as $gateway_key => $gateway_data) {
      if (isset($gateway_data['label'])) {
        i18n_string_update(
          $textgroup . ':' . $nid . ':' . 'gateway' . ':' . 'option' . ';' . $gateway_key,
          $gateway_data['label'],
          array()
        );
      }
    }
  }
  // Define hardcoded, Fundraiser-related translations:
  $payment_info = array(
    'paymentmethod' => 'Payment Method',
    'ccnumber' => 'Credit card number',
    'expdate' => 'Expiration date',
    'cvv' => 'CVV',
    'submitmessage' => 'By clicking SUBMIT your credit card will be securely processed.',
    'submitbutton' => 'Submit',
    'custom_help_text' => 'By clicking %submit_text your credit card will be securely processed.',
    'js-amount' => 'Enter a valid amount',
    'js-required' => 'This field is required',
    'js-remote' => 'Please fix this field',
    'js-email' => 'Enter a valid email address',
    'js-url' => 'Enter a valid URL',
    'js-date' => 'Enter a valid date',
    'js-dateISO' => 'Enter a valid date (ISO)',
    'js-number' => 'Must be a number',
    'js-digits' => 'Enter only digits',
    'js-creditcard' => 'Enter a valid credit card number',
    'js-equalTo' => 'Enter the same value again',
    'js-accept' => 'Enter a value with a valid extension',
    'js-maxlength' => 'Enter no more than {0} characters',
    'js-minlength' => 'Enter at least {0} characters',
    'js-rangelength' => 'Enter a value between {0} and {1} characters long',
    'js-range' => 'Enter a value between {0} and {1}',
    'js-max' => 'Enter a value less than or equal to {0}',
    'js-min' => 'Enter a value greater than or equal to {0}',
    'js-donationmin' => 'The amount entered is less than the minimum donation amount.',
    'js-zipcode' => 'Enter a valid zipcode',
    'js-processing' => 'Processing',
    'js-total' => 'Total',
  );
  foreach ($payment_info as $key => $label) {
    i18n_string_update(
      $textgroup . ':' . $nid . ':' . $key . ':' . 'label',
      $label, 
      array()
    );
  }
  // Add fundraiser ticket fields:
  $ticket_info = array(
    'table_title' => 'Tickets',
    'table_type' => 'Type',
    'table_quantity' => 'Quantity',
    'table_amount' => 'Amount',
  );
  foreach ($ticket_info as $key => $label) {
    i18n_string_update(
      'Fundraiser Tickets' . ':' . $nid . ':' . $key . ':' . 'label',
      $label,
      array()
    );
  }
}

/**
 * Form submit function for registering webform confirmation page settings for translation:
 */
function _sb_translate_register_webform_confirmation_settings($form, &$form_state) {
  if (!isset($form['#node']->nid)) {
    return;
  }
  $nid = $form['#node']->nid;
  // Confirmation page title:
  if (isset($form_state['values']['confirmation']['confirmation_page_title'])) {
    i18n_string_update(
      'Webform Setting' . ':' . $nid . ':' . 'confpage' . ':' . 'title',
      $form_state['values']['confirmation']['confirmation_page_title'],
      array()
    );
  }
  // Confirmation page text:
  if (isset($form_state['values']['confirmation']['value'])) {
    $options = array();
    if (isset($form_state['values']['confirmation']['format'])) {
      $options['format'] = $form_state['values']['confirmation']['format'];
    }
    i18n_string_update( 
      'Webform Setting' . ':' . $nid . ':' . 'confpage' . ':' . 'textarea',
      $form_state['values']['confirmation']['value'],
      $options
    );
  }
}

/**
 * Implements hook_webform_component_render_alter().
 *
 * Translates webform component output.
 */
function sb_translate_webform_component_render_alter(&$element, &$component) {
  $nid = arg(1);
  if (!is_numeric($nid)) {
    return;
  }
  $textgroup = 'Webform Component';
  if (isset($element['#title'])) {
    $element['#title'] = i18n_string_translate(
      $textgroup . ':' . $nid . ':' . $component['cid'] . ':label', 
      $element['#title'],
      array()
    );
  }
  if (isset($element['#description'])) {
    $element['#description'] = i18n_string_translate(
      $textgroup . ':' . $nid . ':' . $component['cid'] . ':description',
      $element['#description'],
      array()
    );
  }
  if (in_array($element['#type'], array('checkboxes', 'radios', 'select')) && isset($element['#options'])) {
    // State options come from the "addressfield" module and are handled elsewhere:
    if ($component['form_key'] == 'state' && module_exists('addressfield')) {
      return;
    }
    foreach ($element['#options'] as $option_key => $option_value) {
      $element['#options'][$option_key] = i18n_string_translate(
        $textgroup . ':' . $nid . ':' . $component['cid'] . ':option_' . $option_key,
        $option_value,
        array()
      );
    }
  }
}
