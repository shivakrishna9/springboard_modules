<?php
/**
 * Implements hook_menu().
 */
function aclu_ngoc_trim_menu() {
  $items['salesforce_ngoc_trim_process'] = array(
    'page callback' => '_aclu_ngoc_trim_process',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/salesforce_ngoc_trim'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_aclu_ngoc_trim_settings_form'),
    'access arguments' => array('administer users'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Configuration form for admins.
 */
function _aclu_ngoc_trim_settings_form() {
  $profile_fields = _aclu_ngoc_trim_get_user_profile_fields(TRUE);
  $form = array();
  $form['ngoc_trim_profile_fields'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Exclude profile fields'),
    '#options' => drupal_map_assoc(array_keys($profile_fields)),
    '#default_value' => variable_get('ngoc_trim_profile_fields', array()),
    '#description' => t('Fields selected above will not have their data deleted.'),
  );

  $form['ngoc_trim_max_items'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('ngoc_trim_max_items', 100),
    '#title' => t('Maximum items per run.'),
    '#description' => t('The maximum number of users to process per run.')
  );
  return system_settings_form($form);
}


/**
 * Menu callback for trimming user profile fields.
 */
function _aclu_ngoc_trim_process() {
  $start = microtime(TRUE);
  $queue = DrupalQueue::get('ngocUsersSynced');
  $profile_fields = _aclu_ngoc_trim_get_user_profile_fields();
  print "\n\r<br> profile fields";
  var_dump($profile_fields);
  $exclude_fields = array_filter(variable_get('ngoc_trim_profile_fields', array()));
    print "\n\r <br>excluded_fields\n\r<br>";
var_dump($exclude_fields);
  $trim_fields = array_diff_key($profile_fields, $exclude_fields);
  // If the Salesforce Namespace module is enabled we need to extract the correct
  // user uid from what was namespaced in the original sync.
  $sf_namespace = '';
  if (module_exists('salesforce_namespace')) {
    $sf_namespace = variable_get('salesforce_namespace_namespace', '');
    $pattern = "/^$sf_namespace/";
  }
  for ($i = 0; $i < variable_get('ngoc_trim_max_items', 100); $i++) {
    $item = $queue->claimItem();
    if ($item && isset($item->data)) {
      $uid = $sf_namespace ? preg_replace($pattern, '', $item->data['uid']) : $item->data['uid'];
      print "uid: $uid";
      $delete_start = microtime(TRUE);
      _aclu_ngoc_trim_delete_user_profile_fields($trim_fields, $uid);
      watchdog('user_field_trim', t('One user processed in @time secs', array('@time' => microtime(TRUE) - $delete_start)));
      $queue->deleteItem($item);
    }
    else {
      break;
    }
  }
  watchdog('user_field_trim', t('Total elapsed time @time', array('@time' => microtime(TRUE) - $start)));
}

/**
 * Delete the field data and revision data for a given user's profile fields.
 *
 * @param array $profile_fields
 *   An array of field_name keyed profile field table names.
 * @param int $uid
 *   The uid of the user entity.
 */
function _aclu_ngoc_trim_delete_user_profile_fields($profile_fields, $uid) {
  print "\n\r<br>profile fields \n\r";
  var_dump($profile_fields);
  foreach($profile_fields as $field) {
    _aclu_ngoc_trim_delete_user_field_data($field['current'], $uid);
    _aclu_ngoc_trim_delete_user_field_data($field['revision'], $uid);
  }
}

/**
 * Get all fields attached to the user entity.
 *
 * @param bool $reset
 *   Whether to skip the cached version.
 */
function _aclu_ngoc_trim_get_user_profile_fields($reset = FALSE) {
  $profile_fields = &drupal_static(__FUNCTION__);
  if (!$profile_fields || $reset) {
    $cache = cache_get('ngoc_user_profile_fields', 'cache');
    if (!empty($cache->data) && !$reset) {
      $profile_fields = $cache->data;
    }
    else {
      // module_load_include('inc', 'field', 'field.info');
      $profile_fields = array();
      // Get the user fields from the field API
      $fields = field_info_instances('user', 'user');
      foreach ($fields as $field) {
        // Extract the table names from the storage details
        $info = field_info_field($field['field_name']);
        $current = current(array_keys($info['storage']['details']['sql']['FIELD_LOAD_CURRENT']));
        $revision = current(array_keys($info['storage']['details']['sql']['FIELD_LOAD_REVISION']));
        $profile_fields[$field['field_name']] = array('current' => $current, 'revision' => $revision);
      }
      cache_set('ngoc_user_profile_fields', $profile_fields, 'cache');
    }
  }
  return $profile_fields;
}


/**
 * Delete a row of field data.
 * @param $field_name string
 *   Database table name.
 * @param $uid int
 *   User uid.
 */
function _aclu_ngoc_trim_delete_user_field_data($field_name, $uid) {
  db_delete($field_name)
    ->condition('entity_type', 'user')
    ->condition('bundle', 'user')
    ->condition('entity_id', $uid)
    ->execute();
}

/***
 * Implements hook_salesforce_ngoc_batch_status_change().
 */
function aclu_ngoc_trim_salesforce_ngoc_batch_status_change(&$batch_upload_sobjects, &$changed_records) {
  $queue = DrupalQueue::get('ngocUsersSynced');
  foreach ($changed_records as $changed_record) {
    if (isset($changed_record->contact_sfid)) {
      $item = array(
        'sfid' => $changed_record->contact_sfid,
        'uid' => $batch_upload_sobjects[$changed_record->batch_upload_sfid]->fields->SB_User_Id__c,
      );
      watchdog('aclu_trim', 'queued item :sfid', array(':sfid' => $item['sfid']));
      // Add the uid of the synced contact to our queue for later processing.
      $queue->createItem($item);
    }
  }
}

function _mock_ngoc_batch_poll() {
  $record = array(
     'id' => '8',
     'batch_upload_sfid' => 'a1MW0000000NrL3MAK',
     'sf_status' => 'Committed',
     'drupal_id' => '8',
     'uid' => '777713',
     'did' => '77778',
     'module' => 'salesforce_donation',
     'delta' => 'donation',
     'contact_sfid' => '003W000000WFK9xIAH',
     'account_sfid' => '001W000000QD9JsIAL',
     'opportunity_sfid' => '006W0000006TBIMIA4',
     'created' => '1485963542',
     'lasted_polled' => NULL,
     'polling_attempts' => '0',
  );


  $batch = array (
  'a1MW0000000NrL8MAK' =>
  (object)(array(
     'type' => 'rC_Connect__Batch_Upload__c',
     'fields' =>
    (object)(array(
       'rC_Connect__Batch_Upload_Giving_Matched__c' => '006W0000006TBIgIAO',
       'rC_Connect__Batch_Upload_Account_Matched__c' => '001W000000QD9KbIAL',
       'rC_Connect__Batch_Upload_Contact_1_Matched__c' => '003W000000WFKAqIAP',
       'rC_Connect__Account_Status__c' => 'Inserted',
       'rC_Connect__Contact1_Status__c' => 'Inserted',
       'rC_Connect__Opportunity_Status__c' => 'Inserted',
       'rC_Connect__Payment_Method_Status__c' => 'Inserted',
       'rC_Connect__Batch_Upload_Status__c' => 'Committed',
       'SB_User_Id__c' => '777714',
       'SB_Donation_Id__c' => '77779',
    )),
     'Id' => 'a1MW0000000NrL8MAK',
  )),
  'a1MW0000000NoOwMAK' =>
  (object)(array(
     'type' => 'rC_Connect__Batch_Upload__c',
     'fields' =>
    (object)(array(
       'rC_Connect__Batch_Upload_Giving_Matched__c' => NULL,
       'rC_Connect__Batch_Upload_Account_Matched__c' => NULL,
       'rC_Connect__Batch_Upload_Contact_1_Matched__c' => NULL,
       'rC_Connect__Account_Status__c' => NULL,
       'rC_Connect__Contact1_Status__c' => NULL,
       'rC_Connect__Opportunity_Status__c' => NULL,
       'rC_Connect__Payment_Method_Status__c' => NULL,
       'rC_Connect__Batch_Upload_Status__c' => 'Flagged',
       'SB_User_Id__c' => '77778',
       'SB_Donation_Id__c' => '77775',
    )),
     'Id' => 'a1MW0000000NoOwMAK',
  )),
  'a1MW0000000NoOrMAK' =>
  (object)(array(
     'type' => 'rC_Connect__Batch_Upload__c',
     'fields' =>
    (object)(array(
       'rC_Connect__Batch_Upload_Giving_Matched__c' => NULL,
       'rC_Connect__Batch_Upload_Account_Matched__c' => NULL,
       'rC_Connect__Batch_Upload_Contact_1_Matched__c' => NULL,
       'rC_Connect__Account_Status__c' => NULL,
       'rC_Connect__Contact1_Status__c' => NULL,
       'rC_Connect__Opportunity_Status__c' => NULL,
       'rC_Connect__Payment_Method_Status__c' => NULL,
       'rC_Connect__Batch_Upload_Status__c' => 'Flagged',
       'SB_User_Id__c' => '77777',
       'SB_Donation_Id__c' => '77774',
    )),
     'Id' => 'a1MW0000000NoOrMAK',
  )),
  'a1MW0000000NoODMA0' =>
  (object)(array(
     'type' => 'rC_Connect__Batch_Upload__c',
     'fields' =>
    (object)(array(
       'rC_Connect__Batch_Upload_Giving_Matched__c' => NULL,
       'rC_Connect__Batch_Upload_Account_Matched__c' => NULL,
       'rC_Connect__Batch_Upload_Contact_1_Matched__c' => NULL,
       'rC_Connect__Account_Status__c' => NULL,
       'rC_Connect__Contact1_Status__c' => NULL,
       'rC_Connect__Opportunity_Status__c' => NULL,
       'rC_Connect__Payment_Method_Status__c' => NULL,
       'rC_Connect__Batch_Upload_Status__c' => 'Flagged',
       'SB_User_Id__c' => '77774',
       'SB_Donation_Id__c' => '77773',
    )),
     'Id' => 'a1MW0000000NoODMA0',
  )),
  'a1MW0000000NoNtMAK' =>
  (object)(array(
     'type' => 'rC_Connect__Batch_Upload__c',
     'fields' =>
    (object)(array(
       'rC_Connect__Batch_Upload_Giving_Matched__c' => NULL,
       'rC_Connect__Batch_Upload_Account_Matched__c' => NULL,
       'rC_Connect__Batch_Upload_Contact_1_Matched__c' => NULL,
       'rC_Connect__Account_Status__c' => NULL,
       'rC_Connect__Contact1_Status__c' => NULL,
       'rC_Connect__Opportunity_Status__c' => NULL,
       'rC_Connect__Payment_Method_Status__c' => NULL,
       'rC_Connect__Batch_Upload_Status__c' => 'Flagged',
       'SB_User_Id__c' => '3',
       'SB_Donation_Id__c' => '2',
    )),
     'Id' => 'a1MW0000000NoNtMAK',
  )),
  'a1MW0000000NoNjMAK' =>
  (object)(array(
     'type' => 'rC_Connect__Batch_Upload__c',
     'fields' =>
    (object)(array(
       'rC_Connect__Batch_Upload_Giving_Matched__c' => NULL,
       'rC_Connect__Batch_Upload_Account_Matched__c' => NULL,
       'rC_Connect__Batch_Upload_Contact_1_Matched__c' => NULL,
       'rC_Connect__Account_Status__c' => NULL,
       'rC_Connect__Contact1_Status__c' => NULL,
       'rC_Connect__Opportunity_Status__c' => NULL,
       'rC_Connect__Payment_Method_Status__c' => NULL,
       'rC_Connect__Batch_Upload_Status__c' => 'Flagged',
       'SB_User_Id__c' => '2',
       'SB_Donation_Id__c' => '1',
    )),
     'Id' => 'a1MW0000000NoNjMAK',
  )),
);
  $changed_records = array (
  0 =>
  (object)(array(
     'id' => '9',
     'batch_upload_sfid' => 'a1MW0000000NrL8MAK',
     'sf_status' => 'Committed',
     'drupal_id' => '9',
     'uid' => '777714',
     'did' => '77779',
     'module' => 'salesforce_donation',
     'delta' => 'donation',
     'contact_sfid' => '003W000000WFKAqIAP',
     'account_sfid' => '001W000000QD9KbIAL',
     'opportunity_sfid' => '006W0000006TBIgIAO',
     'created' => '1485964950',
     'lasted_polled' => NULL,
     'polling_attempts' => '0',
  )),
);
 aclu_ngoc_trim_salesforce_ngoc_batch_status_change($batch, $changed_records);
}
