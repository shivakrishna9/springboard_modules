<?php

/**
 * @file
 * Install routine for page wrappers module.
 *
 */

/**
 * Implementation hook_install().
 */
function page_wrappers_install() {
  // change the clone module's cloning method to save-edit cause that's the way we like it.
  variable_set('clone_method', 'save-edit');
  _page_wrappers_create_fields();
  _page_wrappers_create_file_entities();

  // Prepare the Page Wrappers directories.
  $tpl_dir = PAGE_WRAPPERS_TPL_DIR;
  $css_dir = PAGE_WRAPPERS_CSS_DIR;
  $js_dir = PAGE_WRAPPERS_JS_DIR;
  file_prepare_directory($tpl_dir, FILE_CREATE_DIRECTORY);
  file_prepare_directory($css_dir, FILE_CREATE_DIRECTORY);
  file_prepare_directory($js_dir, FILE_CREATE_DIRECTORY);
}

/**
 * Implementation of hook_uninstall().
 */
function page_wrappers_uninstall() {
  variable_del('page_wrapper_enabled_node_types');
  _page_wrappers_delete_nodes();
  _page_wrappers_delete_fields();

  node_type_delete('page_wrapper');
  field_purge_batch(1000);
}

/**
 * Implementation of hook_schema().
 */
function page_wrappers_schema() {
  $schema['page_wrappers'] = array(
    'description' => t('TODO: please describe this table!'),
    'fields' => array(
      'nid' => array(
        'description' => t('TODO: please describe this field!'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'template' => array(
        'description' => t('TODO: please describe this field!'),
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('nid'),
  );

  $schema['node_page_wrappers'] = array(
    'description' => t('TODO: please describe this table!'),
    'fields' => array(
      'nid' => array(
        'description' => t('Node nid.'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'wrapper_nid' => array(
        'description' => t('Nid of the Page Wrapper node.'),
        'type' => 'int',
        'not null' => TRUE,
      ),
      'ruleset' => array(
        'type' => 'varchar',
        'length' => '255',
        'description' => 'ID for this ruleset. A 1 signifies this as the default page wrapper',
        'default' => '1',
        'not null' => TRUE,
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Weight of assignment.',
      ),
    ),
    'indexes' => array(
      'nid' => array('nid'),
      'weight' => array('weight'),
      'nid_weight' => array('nid', 'weight'),
      'wrapper_nid' => array('wrapper_nid'),
    ),
  );

  return $schema;
}

/**
 * Node and associated field setup for Page Wrappers content type.
 */
function _page_wrappers_create_fields() {
  $t = get_t();

  // implement node type.
  if (!in_array('page_wrapper', node_type_get_names())) {
    $type = array(
      'type' => 'page_wrapper',
      'name' => $t('Page Wrapper'),
      'description' => $t('Allows a user to define custom page templates that can then be assigned to specific nodes.'),
      'base' => 'node_content',
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
      'title_label' => $t('Internal Title'),
      'node_submitted' => 0,
    );
    $type = node_type_set_defaults($type);
    node_type_save($type);
  }
  // build list of themes for the theme css select field's options
  $themes = list_themes();
  $themes_options = array();
  foreach ($themes as $theme) {
    $themes_options[$theme->name] = $theme->info['name'];
  }
  $fields = array(
    // theme css select field
    'theme_css' => array(
      'active' => 1,
      'cardinality' => -1,
      'deleted' => 0,
      'entity_types' => array(),
      'field_name' => 'page_wrappers_theme_css',
      'foreign keys' => array(),
      'indexes' => array(
        'value' => array(
          0 => 'value',
        ),
      ),
      'locked' => 0,
      'module' => 'list',
      'settings' => array(
        'allowed_values' => $themes_options,
      ),
      'translatable' => 0,
      'type' => 'list_text',
      '_instance' => array(
        'bundle' => 'page_wrapper',
        'default_value' => NULL,
        'deleted' => 0,
        'description' => '',
        'entity_type' => 'node',
        'field_name' => 'page_wrappers_theme_css',
        'label' => 'Include Theme CSS',
        'required' => 0,
        'settings' => array(
          'user_register_form' => FALSE,
        ),
        'widget' => array(
          'active' => 1,
          'module' => 'options',
          'settings' => array(),
          'type' => 'options_select',
          'weight' => 1,
        ),
      ),
    ),

    // css filefield
    'css_file_entity' => array(
      'field_name' => 'page_wrappers_css',
      'active' => 1,
      'cardinality' => -1,
      'deleted' => 0,
      'entity_types' => array(),
      'indexes' => array(
        'target_id' => array(
          0 => 'target_id',
        ),
      ),
      'locked' => 0,
      'module' => 'entityreference',
      'settings' => array(
        'handler' => 'base',
        'handler_settings' => array(
          'behaviors' => array(
            'views-select-list' => array(
              'status' => 0,
            ),
          ),
          'sort' => array(
            'type' => 'none',
          ),
          'target_bundles' => array(
            'page_wrappers_asset' => 'page_wrappers_asset',
          ),
        ),
        'target_type' => 'file',
      ),
      'translatable' => 0,
      'type' => 'entityreference',
      '_instance' => array(
        'bundle' => 'page_wrapper',
        'default_value_function' => '',
        'deleted' => 0,
        'description' => '',
        'display' => array(
          'default' => array(
            'label' => 'above',
            'module' => 'entityreference',
            'settings' => array(
              'link' => FALSE,
            ),
            'type' => 'entityreference_label',
            'weight' => 2,
          ),
          'teaser' => array(
            'label' => 'above',
            'settings' => array(),
            'type' => 'hidden',
            'weight' => 0,
          ),
        ),
        'entity_type' => 'node',
        'field_name' => 'page_wrappers_css',
        'label' => 'Upload a Stylesheet',
        'required' => 0,
        'settings' => array(
          'behaviors' => array(
            'prepopulate' => array(
              'status' => 0,
            ),
          ),
          'user_register_form' => FALSE,
        ),
        'widget' => array(
          'active' => 1,
          'module' => 'inline_entity_form',
          'settings' => array(
            'fields' => array(),
            'type_settings' => array(),
          ),
          'type' => 'inline_entity_form',
          'weight' => 31,
        ),
      ),
    ),

    // javascript filefield
    'js_filefield' => array(
      'field_name' => 'page_wrappers_js',
      'active' => 1,
      'cardinality' => -1,
      'deleted' => 0,
      'entity_types' => array(),
      'indexes' => array(
        'target_id' => array(
          0 => 'target_id',
        ),
      ),
      'locked' => 0,
      'module' => 'entityreference',
      'settings' => array(
        'handler' => 'base',
        'handler_settings' => array(
          'behaviors' => array(
            'views-select-list' => array(
              'status' => 0,
            ),
          ),
          'sort' => array(
            'type' => 'none',
          ),
          'target_bundles' => array(
            'page_wrappers_asset' => 'page_wrappers_asset',
          ),
        ),
        'target_type' => 'file',
      ),
      'translatable' => 0,
      'type' => 'entityreference',
      '_instance' => array(
        'bundle' => 'page_wrapper',
        'default_value_function' => '',
        'deleted' => 0,
        'description' => '',
        'display' => array(
          'default' => array(
            'label' => 'above',
            'module' => 'entityreference',
            'settings' => array(
              'link' => FALSE,
            ),
            'type' => 'entityreference_label',
            'weight' => 2,
          ),
          'teaser' => array(
            'label' => 'above',
            'settings' => array(),
            'type' => 'hidden',
            'weight' => 0,
          ),
        ),
        'entity_type' => 'node',
        'field_name' => 'page_wrappers_js',
        'label' => 'Upload a Script',
        'required' => 0,
        'settings' => array(
          'behaviors' => array(
            'prepopulate' => array(
              'status' => 0,
            ),
          ),
          'user_register_form' => FALSE,
        ),
        'widget' => array(
          'active' => 1,
          'module' => 'inline_entity_form',
          'settings' => array(
            'fields' => array(),
            'type_settings' => array(),
          ),
          'type' => 'inline_entity_form',
          'weight' => 31,
        ),
      ),
    ),

    // html template
    'html_template' => array(
      'field_name' => 'page_wrappers_html_template',
      'type' => 'text_with_summary',
      'cardinality' => 1,
      'settings' => array(),
      'entity_types' => array('node'),
      '_instance' => array(
        'field_name' => 'page_wrappers_html_template',
        'entity_type' => 'node',
        'bundle' => 'page_wrapper',
        'required' => TRUE,
        'label' => st('HTML Template'),
        'description' => st('HTML version of the email body.'),
        'widget' => array(
          'type' => 'text_with_summary',
          'weight' => 6,
          'settings' => array(),
        ),
      ),
    ),
  );

  foreach ($fields as $key => $values) {
    $instance = $values['_instance'];
    unset($values['_instance']);

    field_create_field($values);
    field_create_instance($instance);
  }
}

function _page_wrappers_delete_fields() {
  $fields = array(
    'page_wrappers_css',
    'page_wrappers_js',
    'page_wrappers_html_template',
    'page_wrappers_theme_css',
  );
  foreach ($fields as $field_name) {
    $field = field_info_instance('node', $field_name, 'email_wrapper');
    field_delete_instance($field);
    $field = field_info_field($field_name);
    field_delete_field($field);
  }
  drupal_set_message(t('Page Wrapper fields deleted.'));
}

function _page_wrappers_delete_nodes() {
  require_once 'page_wrappers.module';
  $nids = page_wrappers_get_nodes();
  node_delete_multiple($nids);
  drupal_set_message(t('Page Wrappers have been deleted.'));
}

function _page_wrappers_create_file_entities() {
  $file_type = new stdClass();
  $file_type->disabled = FALSE; /* Edit this to true to make a default file_type disabled initially */
  $file_type->api_version = 1;
  $file_type->type = 'page_wrappers_asset';
  $file_type->label = 'Page Wrappers Asset';
  $file_type->description = '@TODO'; // @TODO
  $file_type->mimetypes = array(
    0 => 'application/x-javascript',
    1 => 'text/css',
  );

  file_type_save($file_type);

  $fields = array(
    'pw_asset_title' => array(
      'active' => 1,
      'cardinality' => 1,
      'deleted' => 0,
      'entity_types' => array(),
      'field_name' => 'field_pw_asset_title',
      'foreign keys' => array(
        'format' => array(
          'columns' => array(
            'format' => 'format',
          ),
          'table' => 'filter_format',
        ),
      ),
      'indexes' => array(
        'format' => array(
          0 => 'format',
        ),
      ),
      'locked' => 0,
      'module' => 'text',
      'settings' => array(
        'max_length' => 255,
      ),
      'translatable' => 0,
      'type' => 'text',
      '_instance' => array(
        'bundle' => 'page_wrappers_asset',
        'default_value' => NULL,
        'deleted' => 0,
        'description' => 'Enter a title for this file that will make it easy to search for. If you leave this field blank, the name of the file you upload will be used.',
        'display' => array(
          'default' => array(
            'label' => 'none',
            'settings' => array(),
            'type' => 'hidden',
            'weight' => 1,
          ),
          'preview' => array(
            'label' => 'none',
            'settings' => array(),
            'type' => 'hidden',
            'weight' => 0,
          ),
          'teaser' => array(
            'label' => 'none',
            'settings' => array(),
            'type' => 'hidden',
            'weight' => 0,
          ),
        ),
        'entity_type' => 'file',
        'field_name' => 'field_pw_asset_title',
        'label' => 'Title',
        'required' => 0,
        'settings' => array(
          'text_processing' => 0,
          'user_register_form' => FALSE,
        ),
        'widget' => array(
          'active' => 1,
          'module' => 'text',
          'settings' => array(
            'size' => 60,
          ),
          'type' => 'text_textfield',
          'weight' => 0,
        ),
      ),
    ),
    'pw_asset_description' => array(
      'active' => 1,
      'cardinality' => 1,
      'deleted' => 0,
      'entity_types' => array(),
      'field_name' => 'field_pw_asset_description',
      'foreign keys' => array(
        'format' => array(
          'columns' => array(
            'format' => 'format',
          ),
          'table' => 'filter_format',
        ),
      ),
      'indexes' => array(
        'format' => array(
          0 => 'format',
        ),
      ),
      'locked' => 0,
      'module' => 'text',
      'settings' => array(),
      'translatable' => 0,
      'type' => 'text_long',
      '_instance' => array(
        'bundle' => 'page_wrappers_asset',
        'default_value' => NULL,
        'deleted' => 0,
        'description' => 'Enter a description for this file that will help others to understand its purpose. You may also use this space to make notes about how to best use this file',
        'display' => array(
          'default' => array(
            'label' => 'none',
            'settings' => array(),
            'type' => 'hidden',
            'weight' => 0,
          ),
          'preview' => array(
            'label' => 'none',
            'settings' => array(),
            'type' => 'hidden',
            'weight' => 0,
          ),
          'teaser' => array(
            'label' => 'none',
            'settings' => array(),
            'type' => 'hidden',
            'weight' => 0,
          ),
        ),
        'entity_type' => 'file',
        'field_name' => 'field_pw_asset_description',
        'label' => 'Description',
        'required' => 0,
        'settings' => array(
          'text_processing' => 0,
          'user_register_form' => FALSE,
        ),
        'widget' => array(
          'active' => 1,
          'module' => 'text',
          'settings' => array(
            'rows' => 5,
          ),
          'type' => 'text_textarea',
        ),
      ),
    ),
  );
  foreach ($fields as $key => $values) {
    $instance = $values['_instance'];
    unset($values['_instance']);

    field_create_field($values);
    field_create_instance($instance);
  }
}

function _page_wrappers_delete_file_entity_fields() {
  $fields = array(
    'field_pw_asset_description',
  );
  foreach ($fields as $field_name) {
    $field = field_info_instance('node', $field_name, 'page_wrappers_asset');
    field_delete_instance($field);
    $field = field_info_field($field_name);
    field_delete_field($field);
  }
  drupal_set_message(t('Page Wrapper Asset fields deleted.'));
}

function _page_wrappers_delete_file_entities() {
  // @TODO
  //require_once 'page_wrappers.module';
  //$nids = page_wrappers_get_nodes();
  //node_delete_multiple($nids);
  //drupal_set_message(t('Page Wrappers have been deleted.'));
}

/**
 * Remove the primary key and add an index
 */
function page_wrappers_update_7001() {
  db_drop_primary_key('node_page_wrappers');
  db_add_index('node_page_wrappers', 'wrapped_nid', array('nid'));
  db_add_field('node_page_wrappers', 'ruleset', array(
    'type' => 'varchar',
    'length' => '255',
    'description' => 'ID for this ruleset.',
    'default' => '1',
    'not null' => TRUE,
  ));
  db_add_field('node_page_wrappers', 'weight', array(
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
    'description' => 'Weight of assignment.',
  ));
  return array();
}

/**
 * Add indexes to tables.
 */
function page_wrappers_update_7002() {
  $ret = array();

  db_drop_index('node_page_wrappers', 'indexes');
  db_add_index('node_page_wrappers', 'nid', array('nid'));
  $ret[] = t('Renamed index "indexes" to "nid" on {node_page_wrappers} table.');


  db_add_index('node_page_wrappers', 'nid_weight', array('nid', 'weight'));
  db_add_index('node_page_wrappers', 'wrapper_nid', array('wrapper_nid'));
  db_add_index('node_page_wrappers', 'weight', array('weight'));
  $ret[] = t('Added additional indexes to {node_page_wrappers} table.');

  return implode("\n", $ret);
}

/**
 * Add option to include a theme's CSS on a page wrapper.
 */
function page_wrappers_update_7003() {
  $themes = list_themes();
  $themes_options = array();
  foreach ($themes as $theme) {
    $themes_options[$theme->name] = $theme->info['name'];
  }
  $field = array(
    'active' => 1,
    'cardinality' => -1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'page_wrappers_theme_css',
    'foreign keys' => array(),
    'indexes' => array(
      'value' => array(
        0 => 'value',
      ),
    ),
    'locked' => 0,
    'module' => 'list',
    'settings' => array(
      'allowed_values' => $themes_options,
    ),
    'translatable' => 0,
    'type' => 'list_text',
  );
  $field_instance = array(
    'bundle' => 'page_wrapper',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => 'Include all of the CSS from the selected theme in this page wrapper.',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'list',
        'settings' => array(),
        'type' => 'list_default',
        'weight' => 2,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'page_wrappers_theme_css',
    'label' => 'Include Theme CSS',
    'required' => 0,
    'settings' => array(
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'options',
      'settings' => array(),
      'type' => 'options_select',
      'weight' => 1,
    ),
  );

  field_create_field($field);
  field_create_instance($field_instance);
}

/**
 * @TODO - current out of scope is creating an update script to migrate the CSS/JS fields on page wrappers to the new
 * data model.

function page_wrappers_update_7004() {

}*/
