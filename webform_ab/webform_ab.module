<?php
/**
 * @file
 * Multivariate Testing
 *
 * Adds a content type for an Multivariate test of webforms.
 */

/**
 * @todo
 *  Implement notifications
 *    Fields were in place, but commented out: removed in ba3e048
 *  Option to start the test and lock down the edits
 *  Permissions: declare winner? Start/end test?
 */

// Active status, for webforms within a test
define('WEBFORM_AB_WEBFORM_STATUS_ACTIVE', 1);
// Win status for webforms within a test - only one webform per test
define('WEBFORM_AB_WEBFORM_STATUS_WINNER', 2);
// Retired status for webforms within a test - a different webform won
define('WEBFORM_AB_WEBFORM_STATUS_RETIRED', 3);

/**
 * Implements hook_node_info().
 */
function webform_ab_node_info() {
  return array(
    'webform_ab' => array(
      'name' => t('Multivariate Test'),
      'base' => 'webform_ab',
      'description' => t('A Multivariate test for Webforms'),
      'title_label' => t('Test Name'),
      'body_label' => t('Admin Description'),
      'locked' => TRUE,
    ),
  );
}

/**
 * Implements hook_permission().
 */
function webform_ab_permission() {
  return array(
    'administer webform_ab' => array(
      'title' => t('administer webform_ab'),
      'description' => t('Administer Multivariate Testing'),
    ),
    'reset webform_ab test data' => array(
      'title' => t('reset webform_ab test data'),
      'description' => t('Reset a Multivariate test'),
    ),
    'create webform_ab' => array(
      'title' => t('create webform_ab'),
      'description' => t('Create a Multivariate test'),
    ),
    'edit own webform_ab' => array(
      'title' => t('edit own webform_ab'),
      'description' => t('Edit your own Multivariate tests'),
    ),
    'edit any webform_ab' => array(
      'title' => t('edit any webform_ab'),
      'description' => t('Edit any Multivariate test'),
    ),
    'delete own webform_ab' => array(
      'title' => t('delete own webform_ab'),
      'description' => t('Delete your own Multivariate tests'),
    ),
    'delete any webform_ab' => array(
      'title' => t('delete any webform_ab'),
      'description' => t('Delete any Multivariate test'),
    ),
    'view own webform_ab reports' => array(
      'title' => t('view own webform_ab reports'),
      'description' => t('View your own Multivariate tests'),
    ),
    'view any webform_ab reports' => array(
      'title' => t('view any webform_ab reports'),
      'description' => t('View any Multivariate test'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function webform_ab_menu() {
  $items = array();
  $items['node/%webform_ab_menuitem/reports'] = array(
    'title' => 'Multivariate testing reports',
    'page callback' => 'webform_ab_test_reports',
    'page arguments' => array(1),
    'access callback' => 'webform_ab_can_view_reports',
    'access arguments' => array(1),
    'file' => 'webform_ab.admin.inc',
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%webform_ab_menuitem/reports/reports'] = array(
    'title' => 'Multivariate testing reports',
    'weight' => 0,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['node/%webform_ab_menuitem/webforms'] = array(
    'title' => 'Included webforms',
    'page callback' => 'webform_ab_test_webforms',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'file' => 'webform_ab.admin.inc',
    'weight' => 3,
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%webform_ab_menuitem/reset'] = array(
    'title' => 'Reset data',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webform_ab_clear_test_data_confirm', 1),
    'access arguments' => array('reset webform_ab test data'),
    'file' => 'webform_ab.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
  );
  $items['node/%webform_ab_menuitem/webforms/remove'] = array(
    'title' => 'Remove form',
    'page callback' => 'webform_ab_test_remove_webform',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'file' => 'webform_ab.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/content/webform_ab'] = array(
    'title' => 'Multivariate test settings',
    'description' => 'Settings for Multivariate tests',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webform_ab_admin_settings'),
    'access arguments' => array('administer webform_ab'),
    'file' => 'webform_ab.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_views_api().
 */
function webform_ab_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'webform_ab') . '/views',
  );
}

/**
 * Check if the current user can view the reports on a given Multivariate test 
 */
function webform_ab_can_view_reports($node) {
  global $user;
  $is_author = $user->uid == $node->uid;
  return (user_access('view own webform_ab reports', $user) && $is_author) || user_access('view any webform_ab reports', $user);
}

/**
 * Menu loader callback. Load a Multivariate Test node if the given nid is for
 * the right node type.
 */
function webform_ab_menuitem_load($nid) {
  if (!is_numeric($nid)) {
    return FALSE;
  }
  $node = node_load($nid);
  if (!isset($node->type) || $node->type != 'webform_ab') {
    return FALSE;
  }
  return $node;
}

/**
 * Implements hook_node_access().
 */
function webform_ab_node_access($node, $op, $account) {
  if (is_object($node)) {
    $is_author = $account->uid == $node->uid;
    switch ($op) {
      case 'create':
        return user_access('create webform_ab', $account);
        break;
      case 'update':
        return (user_access('edit own webform_ab', $account) && $is_author) || user_access('edit any webform_ab', $account);
        break;
      case 'delete':
        return (user_access('delete own webform_ab', $account) && $is_author) || user_access('delete any webform_ab', $account);
        break;
    }
  }
}

/**
 * Implements hook_form().
 * Return the form for admins to edit webform_ab nodes
 */
function webform_ab_form(&$node, $form_state) {
  ctools_include('dependent');
  // Add styling for the form
  drupal_add_css(drupal_get_path('module', 'webform_ab') . '/webform_ab.css');
  $type = node_type_get_type($node);
  $form['test_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Multivariate Test Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['test_settings']['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#size' => 40,
    '#maxlength' => 255,
    '#weight' => -5,
    '#default_value' => $node->title,
  );
  $form['test_settings']['body'] = array(
    '#type' => 'textarea',
    '#title' => check_plain($type->body_label),
    '#default_value' => !empty($node->body) ? $node->body : '',
    '#cols' => 60,
    '#rows' => 5,
    '#description' => t('Description for admin use. This is not displayed to the public.'),
  );
  $form['test_settings']['public_teaser'] = array(
    '#type' => 'textarea',
    '#title' => t('Public Teaser'),
    '#default_value' => !empty($node->public_teaser) ? $node->public_teaser : '',
    '#cols' => 60,
    '#rows' => 5,
    '#description' => t('Teaser for public use. This is is shown if this Multivariate Test node is shown in a ' .
      'list of nodes where only the teaser is displayed. This might be a description like, "Donate to our organization."'),
  );
  $form['test_settings']['webform_types'] = array(
    '#type' => 'radios',
    '#title' => t('Which types of webforms will this test use?'),
    '#description' => t('Once set, this cannot be changed.'),
    '#options' => module_invoke_all('webform_ab_get_webform_types'),
    '#default_value' => isset($node->webform_types) ? $node->webform_types : 'webform',
    '#required' => TRUE,
  );

  $form['win_thresholds'] = array(
    '#type' => 'fieldset',
    '#title' => t('Winning Thresholds'),
    '#description' => t('Before any of the win conditions are checked, all forms included in the test must first meet ' .
      'these lower thresholds.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#tree' => TRUE,
  );

  $filter_groups = array();

  // Get win condition plugins and show them as options
  $win_thresholds = _webform_ab_get_win_threshold_plugins();
  foreach ($win_thresholds as $plugin_key => $plugin) {
    // Gather data for form filtering:
    $filter_groups[$plugin['module']][] = array(
      'condition' => 'win_thresholds',
      'plugin_key' => $plugin_key,
    );
    // Add a checkbox to enable this win threshold
    $form['win_thresholds'][$plugin_key]['enable'] = array(
      '#type' => 'checkbox',
      '#title' => check_plain($plugin['title']),
      '#description' => check_plain($plugin['description']),
      '#default_value' => isset($node->win_thresholds[$plugin_key]),
    );
    // If this win threshold offers more options (as most do), add the form
    // elements for those
    if ($config_form_function = ctools_plugin_get_function($plugin, 'config form')) {
      // Decide on an ID for the fieldset wrapping the config options
      // CTools JS seems to make assumptions about what this should be, so
      // don't change it
      $options_div_id = str_replace('_', '-', 'edit-win-thresholds-' . $plugin_key . '-options');
      // Determine the selector for the Enable checkbox
      $enable_checkbox_id = str_replace('_', '-', 'edit-win-thresholds-' . $plugin_key . '-enable');
      // Create a fieldset for the config options and make it dependent on the
      // Enable checkbox for this win condition
      $form['win_thresholds'][$plugin_key]['options'] = array(
        '#type' => 'fieldset',
        '#title' => check_plain($plugin['title']) . ' ' . t('Options'),
        '#collapsible' => FALSE,
        // Need to set #input to true for dependent fields to work
        '#input' => TRUE,
        // Need an ID to use for hiding
        '#attributes' => array('id' => $options_div_id),
        // Add dependent field processing and rule
        '#process' => array('ctools_dependent_process'),
        '#dependency' => array($enable_checkbox_id => array('1')),
        // Need to wrap the fieldset in a div because the parent element is the
        // one hidden (so it will hide this div)
        '#prefix' => '<div>',
        '#suffix' => '</div>',
      );
      // Get the config form fields for this plugin
      $plugin_keys = isset($node->win_thresholds[$plugin_key]) ? $node->win_thresholds[$plugin_key] : '';
      $config_form = $config_form_function($plugin_keys);
      // ...and merge them into the fieldset
      $form['win_thresholds'][$plugin_key]['options'] = array_merge(
        $form['win_thresholds'][$plugin_key]['options'], $config_form);
    }
  }

  $form['win_conditions'] = array(
    '#type' => 'fieldset',
    '#title' => t('Winning Conditions'),
    '#description' => t('Conditions necessary for a form to win the test.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#tree' => TRUE,
  );
  // Get win condition plugins and show them as options
  $win_conditions = _webform_ab_get_win_condition_plugins();
  foreach ($win_conditions as $plugin_key => $plugin) {
    // Gather data for form filtering:
    $filter_groups[$plugin['module']][] = array(
      'condition' => 'win_conditions',
      'plugin_key' => $plugin_key,
    );
    // Add a checkbox to enable this win condition
    $form['win_conditions'][$plugin_key]['enable'] = array(
      '#type' => 'checkbox',
      '#title' => check_plain($plugin['title']),
      '#description' => check_plain($plugin['description']),
      '#default_value' => isset($node->win_conditions[$plugin_key]),
    );
    // If this win condition offers more options (as most do), add the form
    // elements for those
    if ($config_form_function = ctools_plugin_get_function($plugin, 'config form')) {
      // Decide on an ID for the fieldset wrapping the config options
      // CTools JS seems to make assumptions about what this should be, so
      // don't change it
      $options_div_id = str_replace('_', '-', 'edit-win-conditions-' . $plugin_key . '-options');
      // Determine the selector for the Enable checkbox
      $enable_checkbox_id = str_replace('_', '-', 'edit-win-conditions-' . $plugin_key . '-enable');
      // Create a fieldset for the config options and make it dependent on the
      // Enable checkbox for this win condition
      $form['win_conditions'][$plugin_key]['options'] = array(
        '#type' => 'fieldset',
        '#title' => check_plain($plugin['title']) . ' ' . t('Options'),
        '#collapsible' => FALSE,
        // Need to set #input to true for dependent fields to work
        '#input' => TRUE,
        // Need an ID to use for hiding
        '#attributes' => array('id' => $options_div_id),
        // Add dependent field processing and rule
        '#process' => array('ctools_dependent_process'),
        '#dependency' => array($enable_checkbox_id => array('1')),
        // Need to wrap the fieldset in a div because the parent element is the
        // one hidden (so it will hide this div)
        '#prefix' => '<div>',
        '#suffix' => '</div>',
      );
      // Get the config form fields for this plugin
      $plugin_keys = isset($node->win_conditions[$plugin_key]) ? $node->win_conditions[$plugin_key] : '';
      $config_form = $config_form_function($plugin_keys);
      // ...and merge them into the fieldset
      $form['win_conditions'][$plugin_key]['options'] = array_merge(
        $form['win_conditions'][$plugin_key]['options'], $config_form);
    }
  }

  // Hide win conditions and thresholds not associated with the currently selected webform type:
  $webform_types = module_invoke_all('webform_ab_get_webform_types');
  $target = ':input[name="webform_types"]';
  foreach ($filter_groups as $this_webform_type => $plugins) {
    foreach ($plugins as $plugin_data) {
      $condition = $plugin_data['condition']; $plugin_key = $plugin_data['plugin_key'];
      // Make the container a proper fieldset so states can be applied:
      $form[$condition][$plugin_key]['#type'] = 'fieldset';
      $form[$condition][$plugin_key]['#attributes'] = array('class' => array(str_replace(' ', '-', $condition) . '-container'));
      // Set the visible conditions:
      if ($this_webform_type != 'webform_ab') {
        $form[$condition][$plugin_key]['#states']['visible'][$target][] = array(
          'value' => str_replace('_ab', '', $this_webform_type));
      }
      // Set the invisible conditions:
      foreach ($webform_types as $webform_type => $type_label) {
        if ($webform_type . '_ab' != $this_webform_type && $this_webform_type != 'webform_ab') {
          $form[$condition][$plugin_key]['#states']['invisible'][$target][] = array(
            'value' => $webform_type);
        }
      }
    }
  }

  return $form;
}

/**
 * Implements hook_validate().
 * Check values from the node edit form
 */
function webform_ab_validate($node, &$form) {
  // Validate the winning thresholds
  // First: make sure at least one is selected
  $has_win_threshold = FALSE;
  if (!empty($node->win_thresholds) && is_array($node->win_thresholds)) {
    foreach ($node->win_thresholds as $plugin_key => $config) {
      // If this win condition is enabled, check if the plugin provides a
      // validation method that should be called
      if ($config['enable'] > 0) {
        $has_win_threshold = TRUE;
        $plugin = _webform_ab_get_win_threshold_plugin($plugin_key);
        if ($config_validation_function = ctools_plugin_get_function($plugin, 'config form validation')) {
          // Call the validate function. Pass in a field name prefix for use by
          // form_set_error in the validation function.
          // Note that the config options for the plugin are still in the
          // 'options' sub-array during this validation step. They are merged
          // up a level in the hook_nodeapi() presave
          $field_name_prefix = 'win_thresholds][' . $plugin_key . '][options][';
          $config_validation_function($config['options'], $field_name_prefix);
        }
      }
    }
  }

  // Throw an error if they don't have ANY winning threshold chosen
  if (!$has_win_threshold) {
    form_set_error('win_thresholds', t('Please select at least one winning threshold for the test.'));
  }

  // Validate the winning conditions
  // First: make sure at least one is selected
  $has_win_condition = FALSE;
  if (!empty($node->win_conditions) && is_array($node->win_conditions)) {
    foreach ($node->win_conditions as $plugin_key => $config) {
      // If this win condition is enabled, check if the plugin provides a
      // validation method that should be called
      if ($config['enable'] > 0) {
        $has_win_condition = TRUE;
        $plugin = _webform_ab_get_win_condition_plugin($plugin_key);
        if ($config_validation_function = ctools_plugin_get_function($plugin, 'config form validation')) {
          // Call the validate function. Pass in a field name prefix for use by
          // form_set_error in the validation function.
          // Note that the config options for the plugin are still in the
          // 'options' sub-array during this validation step. They are merged
          // up a level in the hook_nodeapi() presave
          $field_name_prefix = 'win_conditions][' . $plugin_key . '][options][';
          $config_validation_function($config['options'], $field_name_prefix);
        }
      }
    }
  }

  // Throw an error if they don't have ANY winning condition chosen
  if (!$has_win_condition) {
    form_set_error('win_conditions', t('Please select at least one winning condition for the test.'));
  }
}

/**
 * Implements hook_node_presave().
 */
function webform_ab_node_presave($node) {
  if ($node->type == 'webform_ab' && TRUE) {
    // Prep win thresholds
    if (!is_array($node->win_thresholds)) {
      $node->win_thresholds = array();
    }
    foreach ($node->win_thresholds as $plugin_key => $config) {
      // For enabled plugins, check if they have a save prep function
      if (isset($config['enable']) && ($config['enable'] > 0)) {
        // The options for each plugin come in as a sub-array ('options'),
        // which we actually want a level up
        if (is_array($node->win_thresholds[$plugin_key]['options'])) {
          $node->win_thresholds[$plugin_key] = $node->win_thresholds[$plugin_key]['options'];
        }
        // Load the plugin and see if it has a save prep function
        $plugin = _webform_ab_get_win_threshold_plugin($plugin_key);
        if ($save_prep_function = ctools_plugin_get_function($plugin, 'prep for save')) {
          // Config is passed byref, so use the full var name
          $save_prep_function($node->win_thresholds[$plugin_key]);
        }
      }
      // If this win condition is NOT enabled, remove it from the array
      else {
        unset($node->win_thresholds[$plugin_key]);
      }
    }

    // Prep win conditions
    if (!is_array($node->win_conditions)) {
      $node->win_conditions = array();
    }
    foreach ($node->win_conditions as $plugin_key => $config) {
      // For enabled plugins, check if they have a save prep function
      if ($config['enable'] > 0) {
        // The options for each plugin come in as a sub-array ('options'),
        // which we actually want a level up
        if (isset($node->win_conditions[$plugin_key]['options']) && is_array($node->win_conditions[$plugin_key]['options'])) {
          $node->win_conditions[$plugin_key] = $node->win_conditions[$plugin_key]['options'];
        }
        // Load the plugin and see if it has a save prep function
        $plugin = _webform_ab_get_win_condition_plugin($plugin_key);
        if ($save_prep_function = ctools_plugin_get_function($plugin, 'prep for save')) {
          // Config is passed byref, so use the full var name
          $save_prep_function($node->win_conditions[$plugin_key]);
        }
      }
      // If this win condition is NOT enabled, remove it from the array
      else {
        unset($node->win_conditions[$plugin_key]);
      }
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function webform_ab_node_delete($node) {
  if (TRUE) {
    // When a webform is deleted, remove it from any existing tests
    // Try to get webform node types
    $webform_types = webform_variable_get('webform_node_types');
    // If the webform node types is empty, assume it's only webform (from webform
    // 2.x)
    if (empty($webform_types)) {
      $webform_types = array('webform');
    }

    // If this is a webform node, delete Multivariate test records
    if (in_array($node->type, $webform_types)) {
      db_delete('webform_ab_forms')
        ->condition('webform_nid', $node->nid)
        ->execute();
      db_delete('webform_ab_hits')
        ->condition('webform_nid', $node->nid)
        ->execute();
      db_delete('webform_ab_conversion')
        ->condition('webform_nid', $node->nid)
        ->execute();
    }
  }
}

/**
 * Implements hook_insert().
 * Save new Webform Multivariate Test nodes. Just calls webform_ab_update
 */
function webform_ab_insert($node) {
  return webform_ab_update($node, TRUE);
}

/**
 * Implements hook_update().
 * Update existing or insert new Multivariate Test nodes
 */
function webform_ab_update($node, $is_insert = FALSE) {
  $record = array(
    'nid' => $node->nid,
    'webform_types' => $node->webform_types,
    'public_teaser' => $node->public_teaser,
  );
  if ($is_insert) {
    drupal_write_record('webform_ab', $record);
  }
  else {
    drupal_write_record('webform_ab', $record, 'nid');
  }

  // Save win threshold info
  // Remove old records first
  db_delete('webform_ab_win_thresholds')
    ->condition('test_nid', $node->nid)
    ->execute();
  // $node->win_thresholds has been prepped for saving already in
  // the hook_nodeapi() implementation
  foreach ($node->win_thresholds as $plugin_key => $config) {
    $row = array(
      'test_nid' => $node->nid,
      'plugin_key' => $plugin_key,
      'options' => $config,
    );
    drupal_write_record('webform_ab_win_thresholds', $row);
  }

  // Save win condition info
  // Remove old records first
  db_delete('webform_ab_win_conditions')
    ->condition('test_nid', $node->nid)
    ->execute();
  // $node->win_conditions has been prepped for saving already in
  // the hook_nodeapi() implementation
  foreach ($node->win_conditions as $plugin_key => $config) {
    $row = array(
      'test_nid' => $node->nid,
      'plugin_key' => $plugin_key,
      'options' => $config,
    );
    drupal_write_record('webform_ab_win_conditions', $row);
  }
}

/**
 * Implements hook_load().
 */
function webform_ab_load($nodes) {
  foreach ($nodes as $nid => $node) {
    $load = db_query('SELECT * FROM {webform_ab} WHERE nid = :nid', array(':nid' => $node->nid))->fetchObject();

    // Load the winning thresholds for this test
    $result = db_query('SELECT * FROM {webform_ab_win_thresholds} WHERE test_nid = :test_nid', array(':test_nid' => $node->nid));
    $load->win_thresholds = array();
    foreach ($result as $row) {
      $load->win_thresholds[$row->plugin_key] = unserialize($row->options);
    }

    // Load the winning conditions for this test
    $result = db_query('SELECT * FROM {webform_ab_win_conditions} WHERE test_nid = :test_nid', array(':test_nid' => $node->nid));
    $load->win_conditions = array();
    foreach ($result as $row) {
      $load->win_conditions[$row->plugin_key] = unserialize($row->options);
    }

    // Load the included webforms and info about them
    $included_webforms = array();

    $result = db_query('SELECT f.webform_nid, f.status, n.title ' .
      'FROM {webform_ab_forms} f ' .
      'LEFT JOIN {node} n ON n.nid = f.webform_nid ' .
      'WHERE f.test_nid = :test_nid ' .
      'ORDER BY f.status, n.title', array(':test_nid' => $node->nid));
    foreach ($result as $row) {
      $row = (array) $row;
      $included_webforms[$row['webform_nid']] = $row;
    }

    $result = db_query('SELECT webform_nid, COUNT(*) as hits ' .
      'FROM {webform_ab_hits} ' .
      'WHERE test_nid = :test_nid ' .
      'GROUP BY webform_nid', array(':test_nid' => $node->nid));
    foreach ($result as $row) {
      $row = (array) $row;
      if (isset($included_webforms[$row['webform_nid']])) {
        $included_webforms[$row['webform_nid']]['hits'] = $row['hits'];
      }
    }

    $result = db_query('SELECT webform_nid, COUNT(*) as conversions ' .
      'FROM {webform_ab_conversion} ' .
      'WHERE test_nid = :test_nid ' .
      'GROUP BY webform_nid', array(':test_nid' => $node->nid));
    foreach ($result as $row) {
      $row = (array) $row;
      if (isset($included_webforms[$row['webform_nid']])) {
        $included_webforms[$row['webform_nid']]['conversions'] = $row['conversions'];
      }
    }

    $load->included_webforms = $included_webforms;
    foreach ($load as $property => &$value) {
      $node->$property = $value;
    }
  }
}

/**
 * Implements hook_delete().
 * Delete all data for a test
 */
function webform_ab_delete(&$node) {
  db_delete('webform_ab')
    ->condition('nid', $node->nid)
    ->execute();
  db_delete('webform_ab_conversion')
    ->condition('test_nid', $node->nid)
    ->execute();
  db_delete('webform_ab_forms')
    ->condition('test_nid', $node->nid)
    ->execute();
  db_delete('webform_ab_hits')
    ->condition('test_nid', $node->nid)
    ->execute();
  db_delete('webform_ab_win_thresholds')
    ->condition('test_nid', $node->nid)
    ->execute();
  db_delete('webform_ab_win_conditions')
    ->condition('test_nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_view().
 */
function webform_ab_view(&$node, $view_mode) {
  // If the current user has permission to modify this test, show them the
  // overview page instead of directing them to one of the webforms in the test
  // If view_webform is set in the URL, don't show the overview
  if (node_access('update', $node) && (empty($_GET['view_webform']) || $_GET['view_webform'] != 1)) {
    // Remove the node clone link for webform_ab notes if the node_clone module is enabled:
    if (module_exists('clone')) {
      $js = '
        (function ($) {
          $("ul.action-links").each(function () {
            if ($(this).text().indexOf("Clone") >= 0) {
              $(this).hide();
            }
          });
        })(jQuery);
      ';
      drupal_add_js($js, array('type' => 'inline', 'scope' => 'footer', 'cache' => TRUE));
    }
    $type = node_type_get_type($node);
    $node->content['description'] = array(
      '#markup' => 'This is the admin overview of the Multivariate Test. If an unprivileged or anonymous user visits this same URL, ' .
        'they will be redirected to one of the webforms within the test.',
      '#weight' => -10,
      '#prefix' => '<p>',
      '#suffix' => '</p>',
    );
    $node->content['view_link'] = array(
      '#value' => l('View the test as a regular user would', $_GET['q'],
        array('query' => array('view_webform' => 1), 'absolute' => TRUE)),
      '#weight' => -9,
      '#prefix' => '<p>',
      '#suffix' => '</p>',
    );
    $node->content['test_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Multivariate Test Settings'),
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
      '#weight' => 0,
    );
    $node->content['test_settings']['title'] = array(
      '#type' => 'item',
      '#title' => check_plain($type->title_label),
      '#markup' => $node->title,
      '#weight' => 0,
    );
    $node->content['test_settings']['body'] = array(
      '#type' => 'item',
      '#title' => check_plain($type->body_label),
      '#markup' => isset($node->body) ? $node->body : '',
      '#weight' => 1,
    );
    $node->content['test_settings']['public_teaser'] = array(
      '#type' => 'item',
      '#title' => t('Public Teaser'),
      '#markup' => isset($node->public_teaser) ? $node->public_teaser : '',
      '#weight' => 1,
    );
    $webform_types = module_invoke_all('webform_ab_get_webform_types');
    $node->content['test_settings']['webform_types'] = array(
      '#type' => 'item',
      '#title' => t('Which types of webforms will this test use?'),
      '#markup' => $webform_types[$node->webform_types],
      '#weight' => 2,
    );
    $node->content['win_thresholds'] = array(
      '#type' => 'fieldset',
      '#title' => t('Winning Thresholds'),
      '#description' => t('Before any of the win conditions are checked, all forms included in the test must' .
        'first meet these lower thresholds.'),
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
      '#weight' => 10,
    );
    // List the win conditions in use on this test
    foreach ($node->win_thresholds as $plugin_key => $plugin_config) {
      $plugin = _webform_ab_get_win_threshold_plugin($plugin_key);
      // Get the summary from the plugin
      if ($summary_function = ctools_plugin_get_function($plugin, 'config summary')) {
        $summary = $summary_function($plugin_config);
      }
      else {
        $summary = '';
      }
      $node->content['win_thresholds'][$plugin_key] = array(
        '#type' => 'item',
        '#title' => $plugin['title'],
        '#description' => $plugin['description'],
        '#markup' => $summary,
      );
    }
    $node->content['win_conditions'] = array(
      '#type' => 'fieldset',
      '#title' => t('Winning Conditions'),
      '#description' => t('Conditions necessary for a form to win the test.'),
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
      '#weight' => 11,
    );
    // List the win conditions in use on this test
    foreach ($node->win_conditions as $plugin_key => $plugin_config) {
      $plugin = _webform_ab_get_win_condition_plugin($plugin_key);
      // Get the summary from the plugin
      if ($summary_function = ctools_plugin_get_function($plugin, 'config summary')) {
        $summary = $summary_function($plugin_config);
      }
      else {
        $summary = '';
      }
      $node->content['win_conditions'][$plugin_key] = array(
        '#type' => 'item',
        '#title' => $plugin['title'],
        '#description' => $plugin['description'],
        '#markup' => $summary,
      );
    }
    return $node;
  }

  // Only continue to a webform if there are webforms to choose from, and is
  // the full node view (not teaser)
  elseif (!empty($node->included_webforms)) {
    // If showing a teaser, don't redirect to the other form
    if ($view_mode == 'teaser') {
      // Don't show the body field - it's the admin description
      unset($node->content['body']);
      $node->content['public_teaser'] = array(
        '#markup' => $node->public_teaser,
      );
      return $node;
    }
    // Full node view: redirect to one of the included webforms
    elseif ($view_mode == 'full') {
      // Ensure the redirect is never cached
      drupal_page_is_cacheable(FALSE);
      // Pick query variables to pass along
      $query_vars = $_GET;
      unset($query_vars['q']);
      // If this test has a winner, send them there
      if (($winner_webform_id = _webform_ab_has_winner_already($node)) > 0) {
        // Save it to the $_SESSION so that it will be logged as a hit to the
        // form
        $_SESSION['webform_ab']['webform_for_tests'][$node->nid] = $winner_webform_id;
        // TODO $query_vars needs to be an array of keys and values instead of a string.
        drupal_goto('node/' . $winner_webform_id, array('query' => $query_vars));
      }
      // See if they already have a webform nid in their $_SESSION for this
      // test, and that it's still a valid webform nid for this test (in case
      // the webform was removed from the test)
      else {
        if (empty($_SESSION['webform_ab']['webform_for_tests'][$node->nid]) ||
          empty($node->included_webforms[$_SESSION['webform_ab']['webform_for_tests'][$node->nid]])) {
          // See if this user has hit this test before, and use the same
          // webform as the last time
          global $user;
          if ($user->uid > 0) {
            $previous_test_hit = db_query('SELECT webform_nid FROM {webform_ab_hits} ' .
              'WHERE test_nid = :test_nid AND uid = :uid',
              array(':test_nid' => $node->nid, ':uid' => $user->uid)
              )->fetchAssoc();
            if ($previous_test_hit['webform_nid'] > 0) {
              $webform_nid_to_view = $previous_test_hit['webform_nid'];
            }
          }

          // If the webform wasn't picked by a user's previous visit, pick
          // one at random
          if (empty($webform_nid_to_view)) {
            // Pick a random webform nid from the ones in this test
            $webform_nid_to_view = array_rand($node->included_webforms);
          }

          // Save it to the $_SESSION so this user always gets the same one
          $_SESSION['webform_ab']['webform_for_tests'][$node->nid] = $webform_nid_to_view;
        }
        // TODO $query_vars needs to be an array of keys and values instead of a string.
        drupal_goto('node/' . $_SESSION['webform_ab']['webform_for_tests'][$node->nid], array('query' => $query_vars));
      }
    }
  }
  else {
    // If this user is anonymous and no tests are active then prevent viewing of the webform_an node view page:
    global $user;
    if (!$user->uid) {
      drupal_set_message('The page you are trying to access is not available at this time.', 'warning');
      if (drupal_is_front_page()) {
        drupal_set_title('Access denied');
      }
      else {
        drupal_goto('<front>');
      }
    }
    $node->content['no_webforms'] = array(
      '#value' => t('There are no webforms in this Multivariate test.'),
    );
    return $node;
  }

  return $node;
}

/**
 * Check to see if the given node already has a declared winner webform
 */
function _webform_ab_has_winner_already($node_or_nid) {
  // If a node object was passed as the argument...
  if (is_object($node_or_nid) && !empty($node_or_nid->included_webforms)) {
    foreach ($node_or_nid->included_webforms as $webform_nid => $details) {
      // Check if this webform was already declared the winner
      if ($details['status'] == WEBFORM_AB_WEBFORM_STATUS_WINNER) {
        return $webform_nid;
      }
    }
  }
  // Node ID passed as argument
  elseif (!is_object($node_or_nid ) && $node_or_nid > 0) {
    // @todo Test this
    $webform_nid = db_query('SELECT webform_nid FROM {webform_ab_forms} ' .
      'WHERE test_nid = :test_nid AND status = :status',
      array(':test_nid' => $node_or_nid, ':status' => WEBFORM_AB_WEBFORM_STATUS_WINNER))->fetchField();
    if ($webform_nid > 0) {
      return $webform_nid;
    }
  }
  return FALSE;
}

/**
 * Implements hook_webform_ab_valid_webforms().
 * Return an array of webforms of the given form type that may be included in an
 * Multivariate Test.
 */
function webform_ab_webform_ab_valid_webforms($webform_types) {
  if ($webform_types == 'webform') {
    $result = db_query('SELECT n.nid, n.title FROM {node} n ' .
      'WHERE n.status > :status AND n.type = :type ORDER BY n.title',
      array(':status' => 0, ':type' => array('webform')));
    $forms = array();
    foreach ($result as $row) {
      $forms[] = $row;
    }
    return $forms;
  }
}


/**
 * Handles Multivariate test form delete confirmation on the admin content page
 * when bulk deletion is attempted:
 */
function webform_ab_form_node_admin_content_alter(&$form, &$form_state, $form_id) {
  if (!isset($form['#submit'][0]) || $form['#submit'][0] != 'node_multiple_delete_confirm_submit') {
    return;
  }

  // Gather a list of any Multivariate form actively being tested:
  $webform_types = webform_variable_get('webform_node_types');
  $webform_types_sql_list = '\'' . implode('\' , \'', array_filter($webform_types)) . '\'';
  $forms_being_ab_tested = array();
  $distinct_webform_nids = array();
  $distinct_webform_ab_nids = array();
  $deletion_nodes_nid_title_map = array();
  foreach ($form['nodes'] as $nid => $webform_data) {
    if (!is_numeric($nid)) {
      continue;
    }
    $deletion_nodes_nid_title_map[$nid] = $webform_data['#suffix'];
    $parent_webform_ab_query = db_query(
      "SELECT w.test_nid webform_ab_nid, n.title webform_ab_title, w.webform_nid " .
      "FROM {webform_ab_forms} w, {node} n " .
      "WHERE w.test_nid = n.nid AND w.webform_nid = :nid_pending_deletion",
      array(
        ':nid_pending_deletion' => $nid,
      )
    );
    foreach ($parent_webform_ab_query as $webform_ab_data) {
      if (!in_array($webform_ab_data->webform_nid, $distinct_webform_nids)) {
        $distinct_webform_nids[] = $webform_ab_data->webform_nid;
      }
      if (!in_array($webform_ab_data->webform_ab_nid, $distinct_webform_ab_nids)) {
        $distinct_webform_ab_nids[] = $webform_ab_data->webform_ab_nid;
      }
      $webform_ab_link = l($webform_ab_data->webform_ab_title,
        'springboard/node/' . $webform_ab_data->webform_ab_nid . '/included-forms',
        array('attributes' => array('target' => '_blank')));
      $webforms_testing_data[] = $webform_ab_data;
    }
  }

  // If no webforms are being deleted then do nothing:
  if (empty($distinct_webform_nids)) {
    return;
  }

  // Display a message detailing the issue:
  $description = t('WARNING:') . '<br />' .
    t('The') . ' ' . format_plural(count($distinct_webform_nids), 'node', 'following nodes') . ' ' .
    t('you are attempting to delete') . ' ' .
    format_plural(count($distinct_webform_nids), 'belongs', 'belong') . ' ' . t('to') . ' ' .
    format_plural(count($distinct_webform_ab_nids), 'an active Multivariate test', '@count active Multivariate tests') . ' ' .
    t('and deletion will result in a loss of data:') . '<br /><br />';
  foreach ($webforms_testing_data as $this_webform_data) {
    $webform_ab_link = l($this_webform_data->webform_ab_title,
      'springboard/node/' . $this_webform_data->webform_ab_nid . '/included-forms',
      array('attributes' => array('target' => '_blank'))
    );
    $webform_link = l(strip_tags($deletion_nodes_nid_title_map[$this_webform_data->webform_nid]),
      'node/' . $this_webform_data->webform_nid, array('attributes' => array('target' => '_blank')));
    $description .= $webform_link . ' ' . t('is part of') . ' ' . t('Multivariate Test') . ' ' .
      $webform_ab_link . '.<br />';
  }
  $description .= '<br />';
  $form['confirm_ab_test_form_deletion'] = array(
    '#type' => 'fieldset',
    '#weight' => -9999, // Ensure this warning appears at the top of the form.
    '#description' => $description,
  );

  // Add a checkbox which toggles the visibility of the submit button on use:
  $form['confirm_ab_test_form_deletion']['ab_confirmation'] = array(
    '#type' => 'checkbox',
    '#title' => t('I understand') . ' ' .
      format_plural(count($distinct_webform_nids), 'this node\'s', 'these nodes\'') . ' ' .
      t('Multivariate test data will be lost upon deletion.'),
  );
  $form['actions']['submit']['#states'] = array(
    'invisible' => array(
      ':input[name="ab_confirmation"]' => array('checked' => FALSE),
    ),
    'visible' => array(
      ':input[name="ab_confirmation"]' => array('checked' => TRUE),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Require further confirmation if a user reaches the "delete confirmation" page
 * for a webform or donation_form node that is part of a webform_ab node.
 *
 * This is to prevent Multivariate testing data from being unintentionally lost.
 */
function webform_ab_form_node_delete_confirm_alter(&$form, $form_state) {
  if (!isset($form['#node']->nid) || !isset($form['#node']->type) ||
      !in_array($form['#node']->type, webform_variable_get('webform_node_types'))) {
    return;
  }

  // Add a checkbox for further confirmation if this is part of a webform_ab node:
  $parent_webform_ab_query = db_query(
    "SELECT n.nid, n.title FROM {webform_ab_forms} w, {node} n " .
    "WHERE w.test_nid = n.nid AND w.webform_nid = :nid_pending_deletion",
    array(
      ':nid_pending_deletion' => $form['#node']->nid
    )
  );
  foreach ($parent_webform_ab_query as $webform_ab_data) {
    $webform_ab_link = l($webform_ab_data->title,
      'springboard/node/' . $webform_ab_data->nid . '/included-forms',
      array('attributes' => array('target' => '_blank')));
    $form['confirm_ab_test_form_deletion'] = array(
      '#type' => 'fieldset',
      '#weight' => -9999, // Ensure this warning appears at the top of the form.
      '#description' => t('WARNING:') . '<br />' .
        t('The form you are attempting to delete is part of a ' .
        'Multivariate test, ') . $webform_ab_link . t(', and deleting it will result in a loss of ' .
        'the data associated with its use within this test!'),
    );
    $form['confirm_ab_test_form_deletion']['ab_confirmation'] = array(
      '#type' => 'checkbox',
      '#title' => t('I understand this node\'s Multivariate test data will be lost upon deletion.'),
    );
    // Hide the submit button until the user clicks the checkbox to confirm deletion:
    $form['actions']['submit']['#states'] = array(
      'disabled' => array(
        ':input[name="ab_confirmation"]' => array('checked' => FALSE),
      ),
      'enabled' => array(
        ':input[name="ab_confirmation"]' => array('checked' => TRUE),
      ),
    );
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Hide reference to webform_ab on node clone settings, since it is not compatible:
 */
function webform_ab_form_clone_settings_alter(&$form, &$form_state, $form_id) {
  if (isset($form['publishing']['clone_reset_webform_ab'])) {
    unset($form['publishing']['clone_reset_webform_ab']);
  }
  if (isset($form['omit']['clone_omitted']['#default_value']['webform_ab'])) {
    unset($form['omit']['clone_omitted']['#options']['webform_ab']);
  }
}

/**
 * Implements hook_form_alter().
 * Log a hit to the webform
 */
function webform_ab_form_alter(&$form, &$form_state, $form_id) {
  if (isset($_SESSION['webform_ab'])) {
    if (is_array($_SESSION['webform_ab']['webform_for_tests'])) {
      foreach ($_SESSION['webform_ab']['webform_for_tests'] as $test_nid => $webform_nid) {
        $test_webform_id = 'webform_client_form_' . $webform_nid;
        if ($test_webform_id == $form_id) {
          // Determine if this hits and conversions should be logged
          if (webform_ab_should_log_hits()) {
            $form['#submit'][] = 'webform_ab_webform_submit';
            $form['test_nid'] = array(
              '#type' => 'hidden',
              '#value' => $test_nid,
            );
            $form['webform_nid'] = array(
              '#type' => 'hidden',
              '#value' => $webform_nid,
            );

            global $user;
            $log_hit = TRUE;
            // If this form load is an AJAX call or post-submit, don't log a hit
            if (!empty($form_state['storage']) || !empty($form_state['post'])) {
              $log_hit = FALSE;
            }
            // If repeat hits from a user should be ignore, check if this user
            // has already hit the form
            elseif (variable_get('webform_ab_ignore_repeat_hits', '1') > 0) {
              if ($user->uid > 0) {
                $existing_hit = db_query('SELECT hit_id FROM {webform_ab_hits} ' .
                  'WHERE test_nid = :test_nid ' .
                  'AND webform_nid = :webform_nid ' .
                  'AND uid = :uid',
                  array(':test_nid' => $test_nid, ':webform_nid' => $webform_nid, ':uid' => $user->uid )
                  )->fetchAssoc();
              }
              else {
                $existing_hit = db_query('SELECT hit_id FROM {webform_ab_hits} ' .
                  'WHERE test_nid = :test_nid ' .
                  'AND webform_nid = :webform_nid ' .
                  'AND session_id = :session_id',
                  array(':test_nid' => $test_nid, ':webform_nid' => $webform_nid, ':session_id' => session_id() )
                  )->fetchAssoc();
              }
              if ($existing_hit['hit_id'] > 0) {
                $log_hit = FALSE;
              }
            }

            // If the hit should be logged, do so
            if ($log_hit) {
              $record = array(
                'test_nid' => $test_nid,
                'webform_nid' => $webform_nid,
                'time' => REQUEST_TIME,
                'uid' => $user->uid,
                'session_id' => session_id(),
              );
              drupal_write_record('webform_ab_hits', $record);
              _webform_ab_check_for_win($test_nid);
            }
            break;
          }
        }
      }
    }
  }
}

/**
 * Handle the submission of a webform that is part of a test. Log the
 * conversion if appropriate.
 */
function webform_ab_webform_submit($form, &$form_state) {
  // Determine if this conversion should be logged
  if (webform_ab_should_log_hits()) {
    $test_nid = $form_state['values']['test_nid'];
    $test_node = node_load($test_nid);
    $conversion_check_results = module_invoke_all('webform_ab_validate_conversion', $test_node->webform_types, $test_node, $form_state);

    // Loop over the returned values from the hook and log a conversion if any
    // of them returned TRUE
    foreach ($conversion_check_results as $val) {
      if ($val === TRUE) {
        $record = array(
          'test_nid' => $form_state['values']['test_nid'],
          'webform_nid' => $form_state['values']['webform_nid'],
          'sid' => $form_state['values']['details']['sid'],
        );
        drupal_write_record('webform_ab_conversion', $record);
        // Allow other modules to act on webform submission
        module_invoke_all('webform_ab_conversion', $test_node, $form_state['values']);
        break;
      }
    }

    // Check if a form should be declared the winner in this Multivariate Test
    _webform_ab_check_for_win($form_state['values']['test_nid']);
  }
}

/**
 * Implements hook_webform_ab_validate_conversion().
 * If the Multivariate Test is using standard webforms, just return TRUE, since a form
 * submission counts as a conversion
 */
function webform_ab_webform_ab_validate_conversion($webform_types, $test_node, $form_state) {
  if ($webform_types == 'webform') {
    return TRUE;
  }
}

/**
 * Check if the given Multivariate Test has a winning webform
 *
 * This function checks to see if a webform has already been declared the
 * winner.
 *
 * If not, it calls the win check function on each win condition plugin that's
 * in use on this Multivariate Test
 */
function _webform_ab_check_for_win($test_nid) {
  // Check if there is already a winner, and gather a list of forms that have
  // reached the minimum number of hits
  $winner_found = _webform_ab_has_winner_already($test_nid);

  // If there is no winner yet, see if any webforms have reached the
  // minimum_hits threshhold and ask other modules if any of those webforms has
  // won
  if (!$winner_found) {
    /**
     * Load the test node, and force a reload (so that it's not pulled from
     * cache). When this is checked immediately after a conversion, the cached
     * node in node_load() will be out of date by one conversion, which will
     * cause the winner to be declared later.
     */
    $node = node_load($test_nid, NULL, TRUE);

    // Check win thresholds to make sure that all webforms meet the thresholds
    // before checking the win conditions
    $meets_thresholds = TRUE;
    foreach ($node->included_webforms as $webform_nid => $details) {
      // Check each threshold in use on the Multivariate Test node
      foreach ($node->win_thresholds as $plugin_key => $plugin_config) {
        // Load the plugin details from
        $plugin = _webform_ab_get_win_threshold_plugin($plugin_key);
        if ($win_check = ctools_plugin_get_function($plugin, 'check criteria')) {
          // Load the config for this plugin from the node
          $plugin_config = $node->win_thresholds[$plugin_key];
          // Run the check on this win threshold
          if (!$win_check($plugin_config, $details, $node)) {
            // Did NOT pass this threshold, so the win conditions should NOT be
            // checked.
            $meets_thresholds = FALSE;
            continue 2;
          }
        }
      }
    }
    // If any of the thresholds failed, don't run the win conditions
    if (!$meets_thresholds) {
      return FALSE;
    }

    // Check win conditions each included webform
    foreach ($node->included_webforms as $webform_nid => $details) {
      // Check each condition in use on the Multivariate Test node
      foreach ($node->win_conditions as $plugin_key => $plugin_config) {
        // Load the plugin details from
        $plugin = _webform_ab_get_win_condition_plugin($plugin_key);
        if ($win_check = ctools_plugin_get_function($plugin, 'check criteria')) {
          // Load the config for this plugin from the node
          $plugin_config = $node->win_conditions[$plugin_key];
          // Run the win check on this win condition
          if (!$win_check($plugin_config, $details, $node)) {
            // Did NOT pass this conditon, so don't bother checking the rest:
            // skip out of both foreach loops and check the next webform
            continue 2;
          }
        }
      }

      // If processing gets this far in the outer loop, the form passed all win
      // checks. Save this form as the winner, log the win, etc.
      _webform_ab_process_winner($node, $details);
    }
  }
}

/**
 * Process a test-winning form
 *
 * @param $test_node
 *   Webform Multivariate test node
 * @param $webform_node_details
 *   Array with details about the winning webform
 */
function _webform_ab_process_winner($test_node, $webform_node_details) {
  // Log the win
  watchdog('webform_ab', 'Winner declared in Multivariate test !testname: !winner',
    array(
    '!testname' => l($test_node->title, 'node/' . $test_node->nid),
    '!winner' => l($webform_node_details['title'], 'node/' . $webform_node_details['webform_nid']),
  ), WATCHDOG_NOTICE);

  // Save the winning webform to the DB
  db_update('webform_ab_forms')
  ->fields(array(
    'status' => WEBFORM_AB_WEBFORM_STATUS_WINNER,
    'win_time' => REQUEST_TIME,
  ))
  ->condition('test_nid', $test_node->nid)
  ->condition('webform_nid', $webform_node_details['webform_nid'])
  ->execute();

  // Update the status on the other forms to be retired
  db_update('webform_ab_forms')
  ->fields(array(
    'status' => WEBFORM_AB_WEBFORM_STATUS_RETIRED,
    'win_time' => 0,
  ))
  ->condition('test_nid', $test_node->nid)
  ->condition('webform_nid', $webform_node_details['webform_nid'], '!=')
  ->execute();
}

/**
 * Implements hook_webform_ab_get_webform_types().
 */
function webform_ab_webform_ab_get_webform_types() {
  return array('webform' => 'Standard Webform');
}

/**
 * Determine if hits/conversions from the current user should be logged
 * The admin form at admin/settings/webform_ab allows admins to choose roles and
 * IPs to exclude from logging
 * Returns true if hits/conversions SHOULD be logged, and false if not
 *
 * @return  bool  Returns true if hits/conversions SHOULD be logged, and
 *                false if not
 */
function webform_ab_should_log_hits() {
  global $user;
  $ips = variable_get('webform_ab_ignore_hits_from_ips', '');
  $roles = variable_get('webform_ab_ignore_hits_from_roles', '');
  $ignore_bots = variable_get('webform_ab_ignore_search_bot_hits', '1');

  // Check for search engine bots.
  if ($ignore_bots && webform_ab_detect_search_bot(filter_input(INPUT_SERVER, 'HTTP_USER_AGENT'))) {
    return FALSE;
  }

  // Check the user roles
  if ($roles != '') {
    // Convert the array of roles (which are role_id => 0 or 1) to a flat array
    // of role IDs that should be excluded
    $roles_to_exclude = array();
    foreach ($roles as $role_id => $enabled) {
      if ($enabled > 0) {
        $roles_to_exclude[] = $role_id;
      }
    }

    // Loop over the user's roles and see if any are excluded
    foreach ($user->roles as $role_id => $role_name) {
      if (in_array($role_id, $roles_to_exclude)) {
        // This role should not have hits/conversions logged, so return false
        return FALSE;
      }
    }
  }

  // Check the user IP
  if ($ips != '') {
    $user_ip = $_SERVER['REMOTE_ADDR'];
    // Split IPs by new line and comma
    $ips_to_exclude = preg_split("/\\n|,/", $ips);
    // Trim off any spaces
    array_walk($ips_to_exclude, 'trim_byref');
    // See if the user's IP is excluded
    if (in_array($user_ip, $ips_to_exclude)) {
      return FALSE;
    }
  }

  // User didn't qualify for any of the exceptions, so their hits/conversions
  // should be recorded
  return TRUE;
}

// Define a trim function for use with array_walk()
if (!function_exists('trim_byref')) {
  function trim_byref(&$string) {
    $string = trim($string);
  }
}

/******************************************************************************
 * CTools Plugin Support
 */

/**
 * Implements hook_ctools_plugin_type().
 */
function webform_ab_ctools_plugin_type() {
  $plugins['win_conditions'] = array();
  $plugins['win_thresholds'] = array();
  return $plugins;
}

/**
 * Implements hook_ctools_plugin_directory().
 * Tell ctools where this module's plugins live
 */
function webform_ab_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'webform_ab') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Win thresholds
 */
/**
 * Get an array of all win threshold plugins
 */
function _webform_ab_get_win_threshold_plugins() {
  ctools_include('plugins');
  return ctools_get_plugins('webform_ab', 'win_thresholds');
}

/**
 * Get a particular win condition plugin
 */
function _webform_ab_get_win_threshold_plugin($plugin_key) {
  ctools_include('plugins');
  return ctools_get_plugins('webform_ab', 'win_thresholds', $plugin_key);
}

/**
 * Implements hook_ctools_plugin_TYPE().
 * Tell ctools a bit about the win_thresholds plugin type
 */
function webform_ab_ctools_plugin_win_thresholds() {
  return array(
    'use hooks' => TRUE,
    'cache' => TRUE,
  );
}

/**
 * Win conditions
 */
/**
 * Get an array of all win condition plugins
 */
function _webform_ab_get_win_condition_plugins() {
  ctools_include('plugins');
  return ctools_get_plugins('webform_ab', 'win_conditions');
}

/**
 * Get a particular win condition plugin
 */
function _webform_ab_get_win_condition_plugin($plugin_key) {
  ctools_include('plugins');
  return ctools_get_plugins('webform_ab', 'win_conditions', $plugin_key);
}

/**
 * Implements hook_ctools_plugin_TYPE().
 * Tell ctools a bit about the win_conditions plugin type
 */
function webform_ab_ctools_plugin_win_conditions() {
  return array(
    'use hooks' => TRUE,
    'cache' => TRUE,
  );
}

/**
 * Determines if a given user agent belongs to a search engine bot.
 *
 * @param string $user_agent
 *   The user agent string to test.
 *
 * @return bool
 *   TRUE if a search engine bot is detected.
 */
function webform_ab_detect_search_bot($user_agent) {
  $bot_user_agents_cache = cache_get('webform_ab_search_bot_user_agents');

  if (!empty($bot_user_agents_cache)) {
    $bot_user_agents = $bot_user_agents_cache->data;
  }
  else {
    $file_path = drupal_get_path('module', 'webform_ab') . '/includes/search_bot_user_agent_fragments.txt';
    $bot_user_agents = file($file_path);
    cache_set('webform_ab_search_bot_user_agents', $bot_user_agents);
  }

  reset($bot_user_agents);

  if (!empty($user_agent)) {
    foreach ($bot_user_agents as $user_agent_string) {
      if (stripos($user_agent, trim($user_agent_string)) !== FALSE) {
        return TRUE;
      }
    }
  }

  return FALSE;
}
