<?php

/**
 * @file
 * Provides installation for Springboard.
 */

/**
 * Implements hook_install().
 */
function springboard_install() {
  // Set the variable to provide configure button on settings page.
  variable_set('springboard_needs_config', TRUE);
  // Add a message about configuring Springboard.
  drupal_set_message(st('The Springboard module was successfully enabled. !link',
    array('!link' => l(st('Please configure Springboard now.'), 'admin/springboard/options/springboard'))));
}

/**
 * Uninstall the springboard_sf_status table in favor of hook based panes.
 */
function springboard_update_7000() {
  // If we used to be a Springboard profile install, switch to standard.
  if (variable_get('install_profile', '') == 'springboard') {
    variable_set('install_profile', 'standard');
  }
  // Drop the old pane table if it exists, we're moving to hooks.
  if (db_table_exists('springboard_sf_status')) {
    db_drop_table('springboard_sf_status');
  }
  return array();
}

/**
 * Add the Admin field_group to the user entity & move standard fields under it.
 */
function springboard_update_7001() {
  if (!module_exists('field_group')) {
    $t = get_t();
    throw new DrupalUpdateException($t('Springboard update 7001 requires the Field Group module. Install this module and run the update again.'));
  }

  module_load_include('inc', 'springboard', 'springboard.admin');
  // Check for an existing or disabled field group to set update message.
  $existing = field_group_load_field_group('group_profile_admin', 'user', 'user', 'form');
  if (!empty($existing->disabled)) {
    $existing = FALSE;
  }

  springboard_add_admin_field_group_to_user_entity();

  return !$existing ? t('The admin field group has been added to the user entity.') : t('The admin field group already exists on the user entity.');
}

/**
 * Enable new Springboard Dashboard panes.
 */
function springboard_update_7002() {
  module_load_include('module', 'springboard');
  springboard_enable_new_panes();
}

/**
 * Add device information fields to user profile.
 */
function springboard_update_7003() {
  // Most of this code is adapted from springboard_admin_config_profile()
  module_load_include('inc', 'springboard', 'springboard.admin');

  $device_field_names = array('sbp_device_type', 'sbp_device_name', 'sbp_device_os', 'sbp_device_browser');

  // Add device info fields to user profile.
  $profile_fields = _springboard_default_user_profile();
  foreach ($profile_fields as $profile_field) {
    // Skip default user profile fields that aren't device info fields.
    if (!in_array($profile_field['field_name'], $device_field_names)) {
      continue;
    }
    $field = array(
      'field_name' => $profile_field['field_name'],
      'cardinality' => 1,
      'type' => $profile_field['type'],
      'settings' => array(),
    );
    field_create_field($field);
    $instance = array(
      'entity_type' => 'user',
      'bundle' => 'user',
    );
    $instance = array_merge($profile_field, $instance);
    field_create_instance($instance);
  }

  // Add device info fields to admin field group on user entity.
  $field_group = field_group_load_field_group('group_profile_admin', 'user', 'user', 'form');
  if (!empty($field_group)) {
    $field_group->children[] = 'sbp_device_type';
    $field_group->children[] = 'sbp_device_name';
    $field_group->children[] = 'sbp_device_os';
    $field_group->children[] = 'sbp_device_browser';
    ctools_export_crud_save('field_group', $field_group);
  }

  // Add device info fields to Market Source / user map.
  $market_source_to_user_map = variable_get('market_source_to_user_map');
  $market_source_to_user_map['sbp_device_type'] = 'device_type';
  $market_source_to_user_map['sbp_device_name'] = 'device_name';
  $market_source_to_user_map['sbp_device_os'] = 'device_os';
  $market_source_to_user_map['sbp_device_browser'] = 'device_browser';
  variable_set('market_source_to_user_map', $market_source_to_user_map);
}

/**
 * Change sbp_referrer and sbp_initial_referrer to textareas.
 */
function springboard_update_7004() {

  $fields = array(
    'sbp_referrer',
    'sbp_initial_referrer',
  );

  foreach ($fields as $field_name) {

    $data_table = 'field_data_' . $field_name;
    $revision_table = 'field_revision_' . $field_name;
    $value_field = $field_name . '_value';

    if (db_table_exists($data_table)) {
      // Change the field_config table entry.
      db_update('field_config')
        ->fields(array('type' => 'text_long'))
        ->condition('field_name', $field_name)
        ->execute();

      // Change the field storage tables.
      $textarea_spec = array(
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
      );
      db_change_field($data_table, $value_field, $value_field, $textarea_spec);
      db_change_field($revision_table, $value_field, $value_field, $textarea_spec);

      // Change the field_config_instance settings so that the
      // textarea shows up in the admin ui.
      $result = db_query("Select entity_type, bundle FROM {field_config_instance} WHERE field_name = :name", array(':name' => $field_name));
      foreach ($result as $instance) {
        $instance_info = field_info_instance($instance->entity_type, $field_name, $instance->bundle);
        $instance_info['widget']['type'] = 'text_textarea';
        field_update_instance($instance_info);
      }
    }
  }
  // Clear caches.
  field_cache_clear();
}

