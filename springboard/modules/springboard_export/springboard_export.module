<?php

/**
 * Implements hook_views_query_alter().
 */
function springboard_export_views_query_alter(&$view, &$query) {
  // dpm($view->exposed_input);
  //dpm($query->orderby);
  // Only proceed if the drush command has flagged this as a data export:
  if (!isset($view->is_sb_export) || !$view->is_sb_export) {
    return;
  } 

  $drush_field_map = array();
  if (isset($view->drush_field_map) && is_array($view->drush_field_map)) {
    $drush_field_map = $view->drush_field_map;
  }

  // Apply sort and order if specified by the drush command:
  if (isset($view->drush_order) && isset($drush_field_map[$view->drush_order])) {
    $sort = isset($view->drush_sort) ? $view->drush_sort : 'asc';
    $order_by = $drush_field_map[$view->drush_order]['table'] . '.' . $drush_field_map[$view->drush_order]['field']; 
    /* $view->query->orderby = array(array(
      'field' => $order_by,
      'direction' => strtoupper($sort),
    )); */
    // If the drush command specifies an order then apply the view's default order secondarily:
    //array_unshift($view->query->orderby, $order_info);
  }

   //echo "\n\n" . print_r($query->orderby, 1) . "\n\n";
}

/**
 * Defines how the actions export view query should be altered for each drush field.
 */
function _springboard_export_action_drush_to_drupal_field_map() {
  $prefix = 'users_webform_submissions__field_data'; // For clarity
  $map = array(
    'action_name'         => array('table' => 'node', 'field' => 'title', 'op' => '='),
    'action_type'         => array('table' => 'node', 'field' => 'type', 'op' => 'LIKE'),
    'cid'                 => array('table' => $prefix . '_sbp_cid', 'field' => 'sbp_cid_value', 'op' => 'LIKE'),
    'contact'             => array('table' => $prefix . '_sbp_last_name', 'field' => 'sbp_last_name_value', 'op' => 'LIKE'),
    'contact_id'          => array('table' => $prefix . '_sbp_salesforce_contact_id', 'field' => 'sbp_salesforce_contact_id_value', 'op' => 'LIKE'),
    'created_at'          => array('table' => 'sba_message', 'field' => 'created', 'op' => 'LIKE'),
    'device_browser'      => array('table' => $prefix . '_sbp_device_browser', 'field' => 'sbp_device_browser_value', 'op' => 'LIKE'),
    'device_name'         => array('table' => $prefix . '_sbp_device_name', 'field' => 'sbp_device_name_value', 'op' => 'LIKE'),
    'device_os'           => array('table' => $prefix . '_sbp_device_os', 'field' => 'sbp_device_os_value', 'op' => 'LIKE'),
    'device_type'         => array('table' => $prefix . '_sbp_device_type', 'field' => 'sbp_device_type_value', 'op' => 'LIKE'),
    'first_name'          => array('table' => $prefix . '_sbp_first_name', 'field' => 'sbp_first_name_value', 'op' => 'LIKE'),
    'form_id'             => array('table' => 'node', 'field' => 'nid', 'op' => '='),
    'initial_referrer'    => array('table' => $prefix . '_sbp_initial_referrer', 'field' => 'sbp_initial_referrer_value', 'op' => 'LIKE'),
    'last_name'           => array('table' => $prefix . '_sbp_last_name', 'field' => 'sbp_last_name_value', 'op' => 'LIKE'),
    'legislative_issues'  => array('table' => 'taxonomy_term_data_node', 'field' => 'tid', 'op' => '='),
    'ip_address'          => array('table' => 'webform_submissions', 'field' => 'remote_addr', 'op' => 'LIKE'),
    'mail'                => array('table' => 'users_webform_submissions', 'field' => 'mail', 'op' => 'LIKE'),
//  'messages_created'    // Data not available; needs Mongo DB.
//  'message_targets'     // Data not available; needs Mongo DB.
    'ms'                  => array('table' => $prefix . '_sbp_ms', 'field' => 'sbp_ms_value', 'op' => 'LIKE'),
    'organization_issues' => array('table' => 'taxonomy_term_data_node', 'field' => 'tid', 'op' => '='), 
    'referrer'            => array('table' => $prefix . '_sbp_referrer', 'field' => 'sbp_referrer_value', 'op' => 'LIKE'),
    'search_engine'       => array('table' => $prefix . '_sbp_search_engine', 'field' => 'sbp_search_engine_value', 'op' => 'LIKE'),
    'search_string'       => array('table' => $prefix . '_sbp_search_string', 'field' => 'sbp_search_string_value', 'op' => 'LIKE'), 
    'submitted_at'        => array('table' => 'webform_submissions', 'field' => 'submitted', 'op' => '='),
    'submission_id'       => array('table' => 'webform_submissions', 'field' => 'sid', 'op' => '='),
    'updated_at'          => array('table' => 'sba_message', 'field' => 'changed', 'op' => 'LIKE'),
    'user_agent'          => array('table' => $prefix . '_sbp_user_agent', 'field' => 'sbp_user_agent_value', 'op' => 'LIKE'),
  );

  // Add value alteration function where appropriate:
  $map['created_at']['preprocess'] = '_springboard_export_strtotime';
  $map['legislative_issues']['preprocess'] = '_springboard_export_get_legislative_issues_tid';   
  $map['organization_issues']['preprocess'] = '_springboard_export_get_organization_issues_tid';   
  return $map;
}

/**
 * Defines how the actions export view query should be altered for each drush field.
 */
function _springboard_export_donation_drush_to_drupal_field_map() {
  $prefix = 'users_fundraiser_donation__field_data'; // For clarity and brevity
  $map = array(
    'address'          => array('table' => $prefix . '_sbp_address', 'field' => 'sbp_address_value', 'op' => 'LIKE'),
    'address_line_2'   => array('table' => $prefix . '_sbp_address_line_2', 'field' => 'sbp_address_line_2_value', 'op' => 'LIKE'),
    'commerce_order_total' => array('table' => 'commerce_order_fundraiser_donation__field_data_commerce_order_total', 'field' => 'commerce_order_total_amount', 'op' => '='),
//    'amount'           => array('table' => 'fundraiser_donation', 'field' => 'amount', 'op' => '='),
    'city'             => array('table' => $prefix . '_sbp_city', 'field' => 'sbp_city_value', 'op' => 'LIKE'),
    'contact_id'       => array('table' => $prefix . '_sbp_salesforce_contact_id', 'field' => 'sbp_salesforce_contact_id_value', 'op' => 'LIKE'),
    'country'          => array('table' => $prefix . '_sbp_country', 'field' => 'sbp_country_value', 'op' => '='),
    'currency'         => array('table' => 'fundraiser_donation', 'field' => 'currency', 'op' => '='),
    'created_at'       => array('table' => 'fundraiser_donation', 'field' => 'created', 'op' => '='),
    'device_browser'   => array('table' => $prefix . '_sbp_device_browser', 'field' => 'sbp_device_browser_value', 'op' => 'LIKE'),
    'device_name'      => array('table' => $prefix . '_sbp_device_name', 'field' => 'sbp_device_name_value', 'op' => 'LIKE'),
    'device_os'        => array('table' => $prefix . '_sbp_device_os', 'field' => 'sbp_device_os_value', 'op' => 'LIKE'),
    'device_type'      => array('table' => $prefix . '_sbp_device_type', 'field' => 'sbp_device_type_value', 'op' => 'LIKE'),
    'donation_id'      => array('table' => 'fundraiser_donation', 'field' => 'did', 'op' => '='),
    'email'            => array('table' => 'commerce_order_fundraiser_donation', 'field' => 'mail', 'op' => 'LIKE'),
    'first_name'       => array('table' => $prefix . '_sbp_first_name', 'field' => 'sbp_first_name_value', 'op' => 'LIKE'),
    'last_name'        => array('table' => $prefix . '_sbp_last_name', 'field' => 'sbp_last_name_value', 'op' => 'LIKE'),
    'form_id'          => array('table' => 'fundraiser_donation', 'field' => 'nid', 'op' => '='),
    'gateway'          => array('table' => 'fundraiser_donation', 'field' => 'gateway', 'op' => 'LIKE'),
    'internal_name'    => array('table' => 'node_fundraiser_donation__field_data_field_fundraiser_internal_name',
      'field' => 'field_fundraiser_internal_name_value', 'op' => 'LIKE'),
    'ip_address'       => array('table' => 'commerce_order_fundraiser_donation', 'field' => 'hostname', 'op' => 'LIKE'),
    'order_id'         => array('table' => 'commerce_order_fundraiser_donation', 'field' => 'order_id', 'op' => '='),
    'referrer'         => array('table' => $prefix . '_sbp_referrer', 'field' => 'sbp_referrer_value', 'op' => 'LIKE'),
    'initial_referrer' => array('table' => $prefix . '_sbp_initial_referrer', 'field' => 'sbp_initial_referrer_value', 'op' => 'LIKE'),
    'search_engine'    => array('table' => $prefix . '_sbp_search_engine', 'field' => 'sbp_search_engine_value', 'op' => 'LIKE'),
    'search_string'    => array('table' => $prefix . '_sbp_search_string', 'field' => 'sbp_search_string_value', 'op' => 'LIKE'),
    'state'            => array('table' => $prefix . '_sbp_state', 'field' => 'sbp_state_value', 'op' => '='),
    'status'           => array('table' => 'fundraiser_donation', 'field' => 'status', 'op' => '='),
    'submission_id'    => array('table' => 'webform_submissions_fundraiser_donation', 'field' => 'sid', 'op' => '='),
    'transaction_id'   => array('table' => 'fundraiser_donation', 'field' => 'txn_id', 'op' => '='),
    'date_filter_min'  => array('table' => '', 'field' => '', 'op' => ''),
    'date_filter_max'  => array('table' => '', 'field' => '', 'op' => ''),
    'next_charge_min'  => array('table' => '', 'field' => '', 'op' => ''),
    'next_charge_max'  => array('table' => '', 'field' => '', 'op' => ''),
    'is_recurring'     => array('table' => 'fundraiser_sustainers', 'field' => 'master_did', 'op' => '='),
    'updated_at'       => array('table' => 'fundraiser_donation', 'field' => 'changed', 'op' => '='),
    'user_agent'       => array('table' => $prefix . '_sbp_user_agent', 'field'  => 'sbp_user_agent_value', 'op' => 'LIKE'),
    'zip'              => array('table' => $prefix . '_sbp_zip', 'field' => 'sbp_zip_value', 'op' => '='),
  );

  // Add value alterations where appropriate:
  $map['is_recurring']['preprocess'] = '_springboard_export_process_is_recurring';
  $map['date_filter_min']['preprocess'] = '_springboard_export_process_date_filter_min';
  $map['date_filter_max']['preprocess'] = '_springboard_export_process_date_filter_max';
  $map['next_charge_min']['preprocess'] = '_springboard_export_process_next_charge_min';
  $map['next_charge_max']['preprocess'] = '_springboard_export_process_next_charge_max';
  return $map;
}

/**
 * Helper functions to apply date filtering:
 */
function _springboard_export_process_next_charge_min(&$value, &$filter) {
  $filter['table'] = '';
  $filter['field'] = "DATE_FORMAT(ADDTIME(FROM_UNIXTIME(fundraiser_sustainers.next_charge), SEC_TO_TIME(-18000)), '%m/%d/%Y') >= " .
    ":fundraiser_sustainers_next_charge";
  $value = array(
    ':fundraiser_sustainers_next_charge' => $value,
  );
  $filter['op'] = 'formula';
}
function _springboard_export_process_next_charge_max(&$value, &$filter) {
  $filter['table'] = '';
  $filter['field'] = "DATE_FORMAT(ADDTIME(FROM_UNIXTIME(fundraiser_sustainers.next_charge), SEC_TO_TIME(-18000)), '%m/%d/%Y') <= " .
    ":fundraiser_sustainers_next_charge1";
  $value = array(
    ':fundraiser_sustainers_next_charge1' => $value,
  );
  $filter['op'] = 'formula';
}
function _springboard_export_process_date_filter_min(&$value, &$filter) {
  $filter['table'] = '';
  $filter['field'] = "DATE_FORMAT(ADDTIME(FROM_UNIXTIME(commerce_order_fundraiser_donation.created), SEC_TO_TIME(-18000)), '%m/%d/%Y') >= " .
    ":commerce_order_date_filter";
  $value = array(
    ':commerce_order_date_filter' => $value,
  );
  $filter['op'] = 'formula';
}
function _springboard_export_process_date_filter_max(&$value, &$filter) {
  $filter['table'] = '';
  $filter['field'] = "DATE_FORMAT(ADDTIME(FROM_UNIXTIME(commerce_order_fundraiser_donation.created), SEC_TO_TIME(-18000)), '%m/%d/%Y') <= " .
    ":commerce_order_date_filter1";
  $value = array(
    ':commerce_order_date_filter1' => $value,
  );
  $filter['op'] = 'formula';
}


/**
 * Helper function to convert yes/no is_recurring values into the desired filtering:
 */
function _springboard_export_process_is_recurring(&$value, &$filter) {
  if ($value == 'yes') {
    $filter['op'] = 'IS NOT NULL';
  }
  elseif ($value == 'no') {
    $filter['op'] = 'IS NULL';
  }
  // This filter's options are operator-based, with the value always being NULL:
  $value = NULL;
}

/**
 * Helper function to convert strings to timestamps, while still accepting the filter param:
 */
function _springboard_export_strtotime(&$string, &$filter) {
  $string = strtotime($string);
}

/**
 * Helper vocabulary-specific functions to return the term ID for a term name:
 */
function _springboard_export_get_legislative_issues_tid(&$term_name, &$filter) {
  $terms = taxonomy_get_term_by_name($term_name, 'sba_legislative_issues'); 
  if (is_array($terms)) {
    $term = array_shift($terms);
  }
  if (isset($term->tid)) {
    $term_name = $term->tid; 
  }
  $term_name = '';
}
function _springboard_export_get_organization_issues_tid(&$term_name, &$filter) {
  $term = taxonomy_get_term_from_name($term_name, 'sba_organization_issues'); 
  if (is_array($terms)) {
    $term = array_shift($terms);
  }
  if (isset($term->tid)) {
    $term_name = $term->tid;   
  }
  $term_name = '';
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Attach csv export-related jQuery and CSS
 */
function springboard_export_form_views_exposed_form_alter(&$form, &$form_state) {
  if (!isset($form['#id'])) {
    return;
  }

  // Add JS and CSS to the node-specific action results tab:
  if ($form['#id'] == 'views-exposed-form-sba-action-submissions-page-1') {
    drupal_add_css('//maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.css', array('type' => 'external'));
    $form['#attached']['css'][] = drupal_get_path('module', 'springboard_export') . '/css/springboard_export.css';
    $form['#attached']['js'][] = drupal_get_path('module', 'springboard_export') . '/js/springboard_export.js';
    // Apply any filtering and sorting done to the view prior to export:
    $view_data = array('source_view' => 'sba_action_submissions');
    if (isset($form_state['input']) && is_array($form_state['input'])) {
      foreach ($form_state['input'] as $key => $value) {
        if (empty($value)) {
          continue;
        }
        switch ($key) {
          case 'sort':
            $view_data['sort'] = $value;
            break;
          case 'order':
            $view_data['order'] = $value;
            break;
          default:
            $view_data[$key] = $value;
            break;
        }
      }
    }
  
    // Attached CSS and jQuery related to the exposed filters:
    $form['#attached']['js'][] = array(
      'type' => 'setting',
      'data' => array('sbExposedFilters' => $view_data),
    );
  } // End actions export
  elseif ($form['#id'] == 'views-exposed-form-sbv-donations-page' || $form['#id'] == 'views-exposed-form-sbv-donations-page-2') {
    // Alter data filter formats:
    $form['next_charge']['min']['#date_format'] = 'm/d/Y';
    $form['next_charge']['max']['#date_format'] = 'm/d/Y';
    $form['date_filter']['min']['#date_format'] = 'm/d/Y';
    $form['date_filter']['max']['#date_format'] = 'm/d/Y';

    // Pass filtering and sorting data to jQuery:
    $order = ''; $sort = '';
    if (isset($_GET['order'])) {
      $sort = isset($_GET['sort']) ? $_GET['sort'] : 'asc';
      $order = $_GET['order'];
    }
    $form['#attached']['js'][] = array(
      'type' => 'setting',
      'data' => array(
        'sbViewDataOrder' => $order,
        'sbViewDataSort' => $sort,
      ),
    );
    
    $form['#attached']['css'][] = drupal_get_path('module', 'springboard_views') . '/css/springboard_views.css';
    $form['#attached']['js'][] = drupal_get_path('module', 'springboard_views') . '/js/springboard_views.js';
  } // End donations export

  drupal_add_css('//maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.css', array('type' => 'external'));
  $form['#attached']['css'][] = drupal_get_path('module', 'springboard_export') . '/css/springboard_export.css';
  $form['#attached']['js'][] = drupal_get_path('module', 'springboard_export') . '/js/springboard_export.js';  
}

/**
 * Implements hook_menu().
 */
function springboard_export_menu() {
  $items = array();
  $items['springboard-export-queue-ajax'] = array(
    'title' => 'AJAX callback',
    'page callback' => '_springboard_export_queue_data_export',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * jQuery CSV Download button callback.
 *
 * This enqueues a CSV download request along with any filtering or sorting.
 */
function _springboard_export_queue_data_export() {
  if (!isset($_POST) || empty($_POST)) {
    drupal_json_output(array('status' => 'fail'));
    return;
  }
  $data = array();
  if (isset($_POST['export_params'])) {
    $data = $_POST['export_params'];
    // Exclude empty values:
    foreach ($data as $key => $value) {
      if (empty($value)) {
        unset($data[$key]);
      }
    }
  }
  if (isset($data['source_view'])) {
    unset($data['source_view']);
  }
  if (isset($_POST['status']) && !empty($_POST['status'])) {
    $data['status'] = $_POST['status'];
  }
  if (isset($_POST['internal_name']) && !empty($_POST['internal_name'])) {
    $data['internal_name'] = $_POST['internal_name'];
  }
  if (isset($_POST['recurs']) && !empty($_POST['recurs'])) {
    $data['recurs'] = $_POST['recurs'];
  }
  if (isset($_POST['date_range_min']) && !empty($_POST['date_range_min'])) {
    $data['transaction_date']['min'] = $_POST['date_range_min'];
  }
  if (isset($_POST['date_range_max']) && !empty($_POST['date_range_max'])) {
    $data['transaction_date']['max'] = $_POST['date_range_max'];
  }
  if (isset($_POST['next_charge_min']) && !empty($_POST['next_charge_min'])) {
    $data['next_charge_date']['min'] = $_POST['next_charge_min'];
  }
  if (isset($_POST['next_charge_max']) && !empty($_POST['next_charge_max'])) {
    $data['next_charge_date']['max'] = $_POST['next_charge_max'];
  }
  if (isset($_POST['order']) && !empty($_POST['order'])) {
    $data['order'] = $_POST['order'];
  }
  if (isset($_POST['sort']) && !empty($_POST['sort'])) {
    $data['sort'] = $_POST['sort'];
  }
  watchdog('springboard_export', 'CSV export request: ' . json_encode($data));

  global $user;
  $recipients = variable_get('springboard_export_recipients', array());
  if (isset($user->mail) && !empty($user->mail)) {
    $recipients[] = $user->mail;
  }

  // Queue the data export job:
  $success = TRUE;
  $success = springboard_dw_csv_export_insert('Drupal', $data, $recipients);

  // Return status to jQuery:
  drupal_json_output(array('status' => $success ? 'success' : 'fail'));
}

/**
 * Helper function which returns an array that maps data warehouse field keys 
 * to the export donation view's fields used for filtering and sorting:
 */
function _springboard_export_drush_donations_export_dw_key_map() {
  return array(
    'status' => 'status',
    'internal_name' => 'field_fundraiser_internal_name_value',
    'transaction_date' => 'date_filter',
    'next_charge_date' => 'next_charge',
    'recurs' => 'recurs',
  );
}
