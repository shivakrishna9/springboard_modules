<?php

/**
 * Implementation of hook_menu().
 */
function mytube_menu() {
  $out['admin/config/content/mytube'] = array(
    'title' => 'MyTube Settings',
    'description' => 'Configure appearance of Flash videos, thumbnails, and descriptions.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mytube_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer mytube'),
    'type' => MENU_NORMAL_ITEM
  );
  return $out;
}

/**
 * Implementation of hook_perm().
 */
function mytube_permission() {
  return array(
    'administer mytube' => array(
      'title' => t('Administer MyTube'),
      'restrict access' => TRUE,
      'description' => t('Allow access to global MyTube settings page')
    )
  );
}

/**
 * Implementation of hook_init().
 */
function mytube_init() { 
  // Add global JavaScript and CSS files.
  $MODULEDIR = drupal_get_path("module", "mytube");
  drupal_add_css("$MODULEDIR/mytube.css", "module");
  drupal_add_js(array('mytube' => array('enable_js_api' => variable_get('mytube_enable_js_api', 0))), 'setting');
  drupal_add_js("$MODULEDIR/mytube.js", 'file');
}

/**
 * Implementation of hook_help().
 */
function mytube_help($path, $arg) {
  $output = '';
  switch($path) {
    case "admin/help#mytube":
      $output = '<p>' . t('MyTube prevents Flash content from automatically loading by replacing it with user-activated, locally-hosted thumbnails. This protects users\' privacy because it prevents automatic remote requests and <a href="https://www.eff.org/deeplinks/2009/09/new-cookie-technologies-harder-see-and-remove-wide">Flash cookies</a>. Effectively, until the user clicks "Play" no remote sites will receive statistics about the user having visited your web page from user-embedded Flash videos. For viewers, the experience is much like having <a href="https://addons.mozilla.org/en-US/firefox/addon/433/">Flashblock</a> enabled for your entire site. Additionally, without automatically loading embedded content (such as Flash), content on your site will load faster, making it more accessible to users with old computers or slow internet connections. Since many of the embeds are modified to autoplay when finally loaded, users will not necessarily have to &quot;double-click&quot; to load videos, and the process will be transparent for those who are not technically-inclined or detail-oriented, especially when custom thumbnails are set.', array(
        '@flashcookies' => 'https://www.eff.org/deeplinks/2009/09/new-cookie-technologies-harder-see-and-remove-wide',
        '@flashblock' => 'https://addons.mozilla.org/en-US/firefox/addon/433/'
      )) . '</p>';
      //$filter = mytube_filter_info(); // Lookup name for input filter
      //$filter_name = $filter["mytube"]["title"]; // Undefined filter name
      $filter_name = "MyTube";
      $filter[0] = "MyTube";
      $output .= '<p>' . t('After installing the module, administrators should enable "@filtername" for any <a href="@inputformats">input formats</a> that will allow embeds. It is <em>strongly</em> recommended that administrators then enable the HTML Filter and arrange it before MyTube, especially if relatively anonymous users are allowed to submit embed code; failure to do so means it may be possible for users to inject arbitrary scripts in using embeds. MyTube should not conflict with the HTML Filter, but the appropriate tags should be allowed; any tags the administrator wishes to restrict (such as <code>&lt;iframe&gt;</code> tags) can be restricted without breaking MyTube\'s ability to filter other authorized tags. For similar security reasons, MyTube will automatically implement the HTML Corrector filter, whether that filter is enabled or not. If enabled, the HTML Corrector will be run twice.', array(
        '@filtername' => $filter[0],
        '@inputformats' => url('admin/config/content/formats')
      )) . "</p>";
      $output .= "<p>" . t('Beyond this initial setup, MyTube should require little if any configuration, but offers several <a href="@options">customizable options</a> for appearance on its settings page. All <code>&lt;embed&gt;</code>, <code>&lt;param&gt;</code>, and <code>&lt;object&gt;</code> tags passed through the @filtername filter will be replaced with MyTube thumbnails. For individual videos, a custom thumbnail can be added by adding <code>thumb="$relative_directory"</code> to the first affected tag. Default thumbnails for YouTube&trade; and Vimeo&trade; videos are downloaded to <code>@filepath</code> automatically and cannot be overridden.', array(
        '@options' => url('admin/config/content/mytube'),
        '@filtername' => $filter_name,
        '@filepath' => 'sites/default/files/mytube',
      )) . '</p>';
      $output .= '<p><strong>Note:</strong> During testing, Internet Explorer has failed to properly display Flash content loaded in MyTube-affected videos. This appeared to be due to a problem with the way that Microsoft Internet Explorer renders JavaScript and Flash, but has not recently been reproduced.</p><h3>Input format guidelines:</h3>';
      $output .= _mytube_tips(0, 0, TRUE);
      break;
  }
  return $output;
}

/**
 * Implementation of hook_theme().
 */
function mytube_theme() {
  return array(
    'mytube_instance' => array(
      'template' => 'mytube-instance',
      'variables' => array(
        'thumb' => NULL,
        'play_icon' => NULL,
        'width' => 0,
        'height' => 0,
        'mytube_extra_class' => NULL,
        'mytube_style' => NULL,
        'escaped_embed' => NULL,
        'privacy_url' => NULL,
        'privacy_text' => NULL
      ),
    ),
  );
}

/**
 * Admin settings list, helper for hook_menu
 */
function mytube_admin_settings() {
  
  $form['mytube_text'] = array(
    '#type' => 'textfield',
    '#title' => "'Privacy info' text",
    '#default_value' => variable_get('mytube_text', ''),
    '#description' => t('Optional: Customize privacy info description below thumbnail. Use <code>!</code><code>embed</code> and <code>!</code><code>domain</code> for embed link and top-level domain, respectively.'),
  );
  $form['mytube_url'] = array(
    '#type' => 'textfield',
    '#title' => "'Privacy info' link target",
    '#default_value' => variable_get('mytube_url', ''),
    '#description' => t('Specify path where \'Privacy info\' link points to. If left blank, link will point to <a href="@eff">EFF page</a>.', array('@eff' => 'https://www.eff.org/deeplinks/2008/02/embedded-video-and-your-privacy'))
  );
  $form['mytube_ytparams'] = array(
    '#type' => 'textfield',
    '#title' => "Custom YouTube parameters",
    '#default_value' => variable_get('mytube_ytparams', ''),
    '#description' => t('Parameters for <a href="@google">customizing</a> YouTube videos. Note: <code>autoplay=1</code> is added automatically.', array('@google' => 'http://code.google.com/apis/youtube/player_parameters.html'))
  );
  $form['mytube_trusted_domains'] = array(
    '#type' => 'textarea',
    '#title' => "Trusted domains",
    '#default_value' => variable_get('mytube_trusted_domains', ''),
    '#description' => t('Domains whose content MyTube should allow through instead of filtering, one per line. For example: example.com, myotherdomain.org'),
  );
  $form['mytube_default_width'] = array(
    '#type' => 'textfield',
    '#title' => "Default width",
    '#default_value' => variable_get('mytube_default_width', ''),
    '#description' => t('Width for all MyTube videos and thumbnails. Default is 320 if left empty.'),
    '#size' => 10,
    '#maxlength' => 4
  );
  $form['mytube_default_height'] = array(
    '#type' => 'textfield',
    '#title' => "Default height",
    '#default_value' => variable_get('mytube_default_height', ''),
    '#description' => t('Height for all MyTube videos and thumbnails. Default is 240 if left empty.'),
    '#size' => 10,
    '#maxlength' => 4
  );
  $form['mytube_allow_custom_size'] = array(
    '#type' => 'checkbox',
    '#title' => 'Users can override default video sizes.',
    '#default_value' => variable_get('mytube_allow_custom_size', 0),
    '#description' => t('If checked, users will be able to set their own width and height for embedded videos in the <code>&lt;embed&gt;</code> tags. If not, the default values will be taken from the fields above (or MyTube defaults if not defined) for the thumbnails. MyTube will then make a <abbr title="Content where width/height are in an unrecognized format or missing will be left alone; thumbnail width/height will still be enforced." class="mytubehelp">best-effort attempt</abbr> to replace all width and height values with the same defaults.')
  );
  $form['mytube_allow_remote_thumb'] = array(
    '#type' => 'checkbox',
    '#title' => 'Users may embed remote images.',
    '#default_value' => variable_get('mytube_allow_remote_thumb', 0),
    '#description' => t('If checked, users will be able to set <abbr class="mytubehelp" title="Hosted somewhere else, i.e. not on this server.">remote</abbr> thumbs with the <code>thumb=</code> attribute. Since such remote thumbs would send ' . l(t("referer headers"), "https://secure.wikimedia.org/wikipedia/en/wiki/HTTP_referer") . ', it could defeat the purpose of MyTube. If unchecked, remote images in MyTube objects will be replaced with the <a href="@default">default.gif</a> thumbnail.', array(
      '@referer' => url('https://secure.wikimedia.org/wikipedia/en/wiki/HTTP_referer'),
      '@default' => url(drupal_get_path("module","mytube") . "/default.gif")
    ))
  );
  $form['mytube_enable_js_api'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable the <a href="https://developers.google.com/youtube/js_api_reference">YouTube Javascript API</a>.'),
    '#default_value' => variable_get('mytube_enable_js_api', 0),
    '#description' => t('If checked, the iFrame Player API code will be loaded asynchronously and the API will be instantiated when a video thumbnail is clicked.')
  );
  return system_settings_form($form);
}

/**
 * Implements hook_filter_info(). 
 */
function mytube_filter_info() {
  $filters['mytube'] = array(
    'title' => t('MyTube Filtering'),
    'description' => t("Replace embeds with clickable thumbnails and caption, preventing remote requests without user consent."),
//    'default settings' => array(      'mytube_text' => 'This embed will serve content from <a rel="nofollow" href="!embed">!domain</a>',      'mytube_url' => 'https://www.eff.org/deeplinks/2008/02/embedded-video-and-your-privacy',      'mytube_ytparams' => '',      'mytube_ie_message' => '',      'mytube_default_width' => 320,      'mytube_default_height' => 240,      'mytube_allow_custom_size' => false;      'mytube_allow_remote_thumb' => false;    ),
    'process callback' => '_mytube',
    'settings callback' => '_mytube_settings',
    'tips callback' => '_mytube_tips',
    'cache' => TRUE,
  );
  return $filters;
}

/**
 * Callback for mytube_filter_info
 */
function _mytube($text = "", $format = -1) {
  // Close all HTML tags.
  $text = _mytube_close_tags($text);
  return _mytube_process($text);
}

function _mytube_tips ($filter, $format, $long = FALSE) {
  if (!$long)
    return t("Embeds like YouTube and iframes will be prevented from grabbing visitors' data without their permission.");
  else
  {
    $privacy_url = variable_get("mytube_url","");
    if ($privacy_url == ""){$privacy_url="https://www.eff.org/deeplinks/2008/02/embedded-video-and-your-privacy";}
    $privacy_text = variable_get("mytube_text","");
    if ($privacy_text == ""){$privacy_text=t("This embed will serve content from")." <em><a rel=\"nofollow\" href=\"\$complete_embed_url\" onclick=\"return false;\">\$top-level_domain</a></em><br />";}
    else {$privacy_text=str_replace("!embed","\$complete_embed_url",$privacy_text); 
      $privacy_text=str_replace("!domain","\$top-level_domain",$privacy_text);}
    $output = "<p>".t("Embed code, such as YouTube&trade; embeds, or anything with")." <code>&lt;embed&gt;</code>, <code>&lt;object&gt;</code>, or <code>&lt;iframe&gt;</code> ".t("in it (usually pasted from somewhere), will automatically be replaced with user-clickable thumbnails. An example of such code is that from a video sharing or hosting website, offering to allow visitors to &quot;share&quot; or &quot;embed&quot; the video they just watched. By replacing these tags with clickable thumbnails, which in turn replace themselves with the original tags when clicked on by a viewer, we can prevent the Flash content from automatically loading, which would raise certain ".l(t("privacy concerns"),$privacy_url).".</p>");
    $output .= "<p>".t("By default, the correct thumbnails are automatically fetched from youtube.com for YouTube&trade; embeds, and stored locally so no remote request is made by a reader, and privacy is preserved. Any other source of embed must be specified by placing a")." <code>thumb=</code> ".t("attribute in the first tag. If no thumbnail is specified, the system default thumbnail, shown below, will be used instead. Adding the")." <code>thumb=</code> ".t("attribute tells Drupal where to find the image, and that image will be shown instead of the default thumbnail.");
    if (variable_get("mytube_allow_remote_thumb",0))$output.=t(" You may use thumbnails from remote sites by entering in the full URL."); // Give useful instructions
    else {$output .= t(" Thumbnails may not be linked from remote sites; all thumbnails must be hosted on this server.");
        if (module_exists("upload")){
          if (user_access("upload files")) // based on current relevant permissions
            $output.=t(" Users wishing to use such custom thumbnails should upload them as attachments.");
          else $output.=t(" You should contact the administrator for specific instructions on hosting your thumbnails.");
        }else $output.=t(" You should contact the administrator for specific instructions on hosting your thumbnails.");
    }
    $output .= t(" Note, if a thumbnail would normally be downloaded automatically, such as for <code>youtube.com</code>, you cannot customize it. This is done to prevent deliberately misleading video thumbnails and cannot be overridden by an administrator.")."</p>";
    $output .= "<div class=\"mytube\" style=\"position:relative;width:320px;\"><img width=\"320\" height=\"240\" src=\"".url(drupal_get_path("module","mytube")."/default.gif")."\" class=\"mytubethumb\"><img style=\"top: 90px; left: 130px;position:absolute;width:60px;height:65px;z-index:5;\" class=\"mytubeplay\" src=\"".url(drupal_get_path("module","mytube")."/play.png")."\">";
$output .= "<div class=\"mytubetext\" style=\"font-size:10px;line-height:10px;\">".l(t("Privacy info."),$privacy_url)." $privacy_text</div></div>";
    $output .= "<p>".t("Depending on the webmaster's settings, you may be able to set a custom width and height in the same way. If no recognizable width or height is provided in the embed code, the system defaults")." <u>".t("will override")."</u> ".t("whatever was in the original embed code.")."</p>";
    $output .= t("Example").": <code>&lt;object <b style=\"color:red;\">width</b>=&quot;<u>640</u>&quot; <b style=\"color:blue;\">height</b>=&quot;<u>385</u>&quot; <b style=\"color:green;\">thumb</b>=&quot;".l("sites/default/files"."/mytube/yt_VL3cetAodLc.jpg",drupal_get_path("module","mytube")."/yt_example.jpg")."&quot; style=&quot;text-decoration:underline;&quot;>"."sites/default/files"."/mytube/yt_VL3cetAodLc.jpg</a>&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://www.youtube-nocookie.com/v/VL3cetAodLc&hl=en_US&fs=1&&quot;&gt;&lt;/param&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot;&gt;&lt;/param&gt;&lt;param name=&quot;allowscriptaccess&quot; value=&quot;always&quot;&gt;&lt;/param&gt;&lt;embed src=&quot;http://www.youtube-nocookie.com/v/VL3cetAodLc&hl=en_US&fs=1&&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot; width=&quot;640&quot; height=&quot;385&quot;&gt;&lt;/embed&gt;&lt;/object&gt;</code>";
    $output .= "<p>".t("All affected embedded objects will be appended with the caption shown above, alerting users that by clicking the thumbnail they are consenting to have remote content served and acknowledging the consequential privacy issues. The caption has a link pointing viewers to more information, and may also display where the content will be served from.")."</p>";
    return $output;
  }
}


/*
 *  Helper for mytube_filter()
 */
function _mytube_process($text) {
  $width = (int)check_plain(variable_get("mytube_default_width", ""));
  if($width == 0) {
    // Width not defined in MyTube configuration
    $width = "320";
  }
  $height = (int)check_plain(variable_get("mytube_default_height", ""));
  if($height == 0) {
    // Height not defined in MyTube
    $height="240";
  }
  // % values are invalid input for width/height
  $text = preg_replace('/width="?[0-9]{0,}%"?/', "width=\"$width\"", $text);
  // so replace with system defaults
  $text = preg_replace('/height="?[0-9]{0,}%"?/', "height=\"$height\"", $text);
  // If not allowed to use custom width/height
  if (!variable_get("mytube_allow_custom_size",0)) {
    // Overwrite width and height with system defaults
    $text = preg_replace('/width=[\'"]?[0-9]{2,}p?[xt]?.?[\'"]?/', "width=\"$width\"", $text);
    $text = preg_replace('/height=[\'"]?[0-9]{2,}p?[xt]?.?[\'"]?/', "height=\"$height\"", $text);
    // Some smarty-pants decided to put DIV tags inside an object tag! So, we have to filter stylesheets too...
    $text = preg_replace('/width:[\s0-9]{1,}[p%]?[xt]?/', "width:$width", $text);
    $text = preg_replace('/height:[\s0-9]{1,}[p%]?[xt]?/', "height:$height", $text);
  }
  $tags_to_replace = array("object", "iframe", "embed");
  // have we got any bad tags here?
  foreach ($tags_to_replace as $tag) {
    $indexes = _mytube_find_all_instances("<$tag", $text);
    if ($indexes) {
      // we must work backwards, from the end of the text up to the beginning
      rsort($indexes);
      foreach ($indexes as $i) {
        _mytube_process_instance($text, $tag, $i);
      }
    }
  }
  return $text;
}

/**
 *  Find all occurrences of a given string inside a larger string
 *  Return an array of all indexes
 */
function _mytube_find_all_instances($needle, $hay) {
  $p = stripos($hay, $needle);
  $out = false;
  while (!($p === false)) {
    // we must distinguish between (0) and (false)
    $out[] = $p;
    $p = stripos($hay, $needle, $p + 1);
  }
  if (is_array($out))
    return $out;
  else
    return false;
}

/**
 *  @param text Text to filter
 *  @param tag Tag to filter
 *  @param i Index of tag to filter
 */
function _mytube_process_instance(&$text, $tag, $i) {
  // find tag closure
  $closure_index = stripos($text, "</$tag", $i);
  // get the actual tail-end of the embed code (since the index is the start of the closure tag, not the end of it)
  $closure = $closure_index + strlen($tag) + 3;
  // capture the embed code
  $embedded = substr($text, $i, ($closure - $i));
  $embedded = str_replace("\n", " ", $embedded); // Deals with newlines
  // determine what code if any should this embed be replaced with
  $newcode = _mytube_replaceembed($embedded, $tag);
  if ($newcode) {
    // excise the embed
    _mytube_str_excise($text, $i, $closure);
    // insert replacement code
    _mytube_str_insert($text, $newcode, $i);
  }
}

/**
 *  Adapted from http://us.php.net/manual/en/function.substr.php#61458
 *  @param insertstring - the string you want to insert
 *  @param intostring - the string you want to insert it into
 *  @param offset - the offset
 */
function _mytube_str_insert(&$intostring, $insertstring, $offset) {
  $part1 = substr($intostring, 0, $offset);
  $part2 = substr($intostring, $offset);
  $part1 = $part1 . $insertstring;
  $intostring = $part1 . $part2;
}

/**
 *  Excise a substring
 *  @param text - String to excise
 *  @param start - Index to begin excision
 *  @param end - Index to end excision
 */
function _mytube_str_excise(&$text, $start, $end) {
  $part1 = substr($text, 0, $start);
  $part2 = substr($text, $end);
  $text = $part1 . $part2;
}

/**
 *  Determine what code should replace an embed codestring
 *  @param embedded - Embed string to check
 *  @param tag - The tag that defines this embed string
 */
function _mytube_replaceembed($embedded, $tag) {
  $out = "";
  if (isset($_SERVER['HTTPS']))
    $PROTOCOL = 'https://';
  else
    $PROTOCOL = 'http://';
  $embed_url = _mytube_embed_url($embedded, $tag);
  if (!$embed_url) {
    $embed_url = "http://www.example.com/";
  }
  // Bug in parse_url causes problems for URL of form "//$HOST/$PATH" (defined in RFC 3986)
  $parseable_embed_url = preg_replace("[^//]", $PROTOCOL, $embed_url);
  $embed_urlinfo = parse_url($parseable_embed_url);
  $embed_domain = _mytube_toplevel($embed_urlinfo['host']);

  $tagtext = substr($embedded, 0, strpos($embedded, ">"));
  $atts = _mytube_html_tag_atts($tagtext);
  $full_size_iframe = 0;

  if (isset($atts['privacy-url']) && $atts['privacy-url'] != "") {
    $privacy_url =  $atts['privacy-url'];
    $parseable_privacy_url = preg_replace("[^//]", $PROTOCOL, $privacy_url);
    $privacy_urlinfo = parse_url($parseable_privacy_url);
    $privacyurl_domain = _mytube_toplevel($privacy_urlinfo['host']); 
    $check_embed_domain = $privacyurl_domain;
    $full_size_iframe = 1;
  } else {
    $privacy_url = $embed_url;
    $check_embed_domain = $embed_domain;
  }

  // If this video is from a trusted domain, let it through unmodified.
  $trusted_domains = variable_get('mytube_trusted_domains');
  if (is_numeric(strpos($trusted_domains, $check_embed_domain))) {
    return;
  }

  // first, find the thumbnail
  $thumb = _mytube_thumb($embedded, $parseable_embed_url, $embed_domain);
  if ($full_size_iframe) {
    // Don't use the mytube video variables to determine height and width
    $width = "100%";
    $height = "100%";
    $mytube_override_class = "other-embed";
    $mytube_style = "width: " . $atts['width'] . "px; height: " . $atts['height'] . "px;";
  } else {
    $mytube_override_class = "default-embed";
    $width = (int)check_plain(variable_get("mytube_default_width", ""));
    if($width == 0) {
      $width = 320;
    }
    $height = (int)check_plain(variable_get("mytube_default_height", ""));
    if($height == 0) {
      $height = 240;
    }
    if (variable_get("mytube_allow_custom_size", 0)) {
      // Search multiple tags for width/height attributes
      foreach (array("embed", "object", "iframe") as $tag) {
        $start_embed = strpos($embedded, "<$tag", 0);
        $end_embed = strpos($embedded, ">", $start_embed);
        $embed_tag = substr($embedded, $start_embed + 1, $end_embed);
        // Remove units from width/height
        $embed_tag = preg_replace('/="?.?p[xt].?"?/', "", $embed_tag);
        $atts = _mytube_html_tag_atts($embed_tag);
        if(!$atts){$atts = array();}
        if(array_key_exists("width", $atts)) {
          $width = preg_replace("/p?[xt]?/", "", $atts['width']);
        }
        if(array_key_exists("height", $atts)) {
          $height = preg_replace("/p?[xt]?/", "", $atts['height']);
        }
      }
    }
    $mytube_style = "width: " . $width . "px;";
  }

  // determine the output html
  $privacy_url = variable_get("mytube_url", "");
  if ($privacy_url == "") {
    $privacy_url = "https://www.eff.org/deeplinks/2008/02/embedded-video-and-your-privacy";
  }
  $privacy_text = filter_xss_admin(variable_get("mytube_text", ""));
  if ($privacy_text == "") {
    $privacy_text = t('This embed will serve content from') . ' <em><a rel="nofollow" href="' . url($privacy_url) . '">' . check_plain($check_embed_domain) . '</a></em><br />';
  }
  else {
    $privacy_text = str_replace("!embed", $privacy_url, $privacy_text);
    $privacy_text = str_replace("!domain", $check_embed_domain, $privacy_text);
    $privacy_text = filter_xss_admin($privacy_text);
  }
  $play_icon = str_replace('?q=', '', url(drupal_get_path('module', 'mytube') . '/play.png'));

  // Modify the code-to-be-revealed if necessary.
  _mytube_fixembedded($embedded, $embed_url, $embed_domain, $width, $height, $full_size_iframe);

  $variables = array(
    'thumb' => $thumb,
    'play_icon' => $play_icon,
    'width' => $width,
    'height' => $height,
    'mytube_extra_class' => $mytube_override_class,
    'mytube_style' => $mytube_style,
    'escaped_embed' => rawurlencode($embedded),
    'privacy_url' => $privacy_url,
    'privacy_text' => $privacy_text,
  );
  $out = theme('mytube_instance', $variables);

  return $out;
}

/**
 *  Find the URL an embed will pull data from
 *  @param embedded - Embed string to check
 *  @param tag - The tag that defines this embed string
 */
function _mytube_embed_url($embedded, $tag = false) {
  switch ($tag) {
    case 'object':
      // the <object> tag uses an internal <embed> tag
      // the external url is in the <embed> tag's 'src' attribute
      $embedtag_start = strpos($embedded, "<embed", 0);
      if ($embedtag_start < 1) {
        // No embed tag, let's look for the correct param tag instead
        $name_first = preg_match('|<param[\w\s]+value=["\'][\w:/\.\?\&%;=-]{0,}["\'][\s\w]+name=["\']movie["\'][\s\w]*/?>|', $embedded, $tagtext); // if (<param name="movie" value="$SRC">), tagtext will have our tag.
        // else tagtext must be (<param value="$SRC" name="movie">) so find that
        if (!$name_first) {
          $test = preg_match('|<param[\w\s]+name=["\']movie["\'][\s\w]+value=["\'][\w:/\.\?\&%;=-]{0,}["\'][\s\w]*/?>|', $embedded, $tagtext);
          if (!$test) { // Invalid URL or tag; couldn't parse out URL.
            return false;
          }
        }
        $atts = _mytube_html_tag_atts($tagtext[0] . ">");
        // Find $SRC from <param> tag
        $url = $atts['value'];
      }
      else {
        $embedtag_end = strpos($embedded, ">", $embedtag_start);
        $tagtext = substr($embedded, $embedtag_start + 1, ($embedtag_end - $embedtag_start));
        $atts = _mytube_html_tag_atts($tagtext);
        $url = $atts['src'];
      }
      break;
    case 'iframe':
    case 'embed':
      $tagtext = substr($embedded, 0, strpos($embedded, ">"));
      $atts = _mytube_html_tag_atts($tagtext);
      $url = $atts['src'];
      break;
  }
  return $url;
}

/**
 * Find all attributes in a given tag, and return an array of said attributes
 */
function _mytube_html_tag_atts($string) {
  $rex = '{([^\s]*?)=[\'"](.*?)[\'"]}s';
  // No attributes found, possibly invalid input
  if (!preg_match($rex, $string)) {
    // Look for attributes not surrounded with quotes
    $rex = '{([^\s]*?)=(.*?)\s}s';
  }
  $c = preg_match_all($rex, $string, $matches);
  $i = 0;
  while ($i < $c) {
    $out[$matches[1][$i]] = $matches[2][$i];
    $i++;
  }
  return $out;
}

/**
 * return a domain name's top-level alias
 * (e.g. "eff.org" instead of "www.eff.org"
 */
function _mytube_toplevel($host) {
  $firstdot = strrpos($host, ".");
  $chop = substr($host, 0, $firstdot);
  $seconddot = strrpos($chop, ".");
  if ($seconddot){
    $out = substr($host, $seconddot + 1);
  }
  else {
    $out = $host;
  }
  if ($out == "example.com") {
    return "unknown";
  }
  else {
    return $out;
  }
}

/**
 * find and/or fetch thumbnail for an embed
 */
function _mytube_thumb($e, $url = false, $domain = false) {
  // search for user-provided "thumb" attribute
  $tagendpos = strpos($e, ">");
  $tagtext = substr($e, 1, $tagendpos);
  $atts = _mytube_html_tag_atts($tagtext);
  if (!$atts) {
    $atts = array();
  }
  // no url has been passed in either, so let's parse it from embed
  if (!$url) { // Couldn't figure out URL, so use example.com instead of failing later on
    $url = _mytube_embed_url($e);
  }
  // no domain has been passed in, so let's parse it from url
  if (!$domain) {
    $urlinfo = parse_url($url);
    $domain = _mytube_toplevel($urlinfo['host']);
  }
  // The user has provided us a thumb= attribute
  if (array_key_exists("thumb", $atts)) {
    $out = $atts['thumb'];
    // Matches HTTP or HTTPS protocols
    $rex = "/https?:\/\//";
    // Check for matches
    preg_match($rex, $out, $matches);
    // Should return false if array is empty
    if (!($matches)) {
      // Not HTTP/HTTPS, so try FTP
      $rex = "/ftp:\/\//";
      preg_match($rex, $out, $matches);
    }
    // We detected a remote thumbail
    if ($matches) {
      // Check if user is allowed to use remote thumbs
      if (!variable_get("mytube_allow_remote_thumb", 0)) {
        // If not, use included default.gif instead
        $out = drupal_get_path("module", "mytube") . "/default.gif";
      }
    }
    else {
      $out = str_replace("?q=", "", url($out));
    }
  }
  // This is a YouTube embed,
  elseif ($domain == "youtube.com") {
    // so let's fetch the thumbnail automatically.
    $out = url(_mytube_download_thumb($url));
    // Couldn't find thumbnail
    if ($out == url("")) {
      $out = str_replace("?q=", "", url(drupal_get_path("module", "mytube") . "/default.gif"));
    }
  }
  else if ($domain == "youtube-nocookie.com") {
    $out = url(_mytube_download_thumb($url));
    // Couldn't find thumbnail
    if ($out == url("")) {
      $out = str_replace("?q=", "", url(drupal_get_path("module", "mytube") . "/default.gif"));
    }
  }
  else if ($domain == "vimeo.com") {
    $out = url(_mytube_download_thumb($url));
    // Couldn't find thumbnail
    if ($out == url(""))
      $out = str_replace("?q=", "", url(drupal_get_path("module", "mytube") . "/default.gif"));
  }
  else if ($domain == "metacafe.com") {
    $out = url(_mytube_download_thumb($url));
    // Couldn't find thumbnail
    if ($out == url(""))
      $out = str_replace("?q=", "", url(drupal_get_path("module", "mytube") . "/default.gif"));
  }
  else { // no user-specified thumbnail, use a default image
    $MODULEDIR = drupal_get_path("module", "mytube");
    $out = str_replace("?q=", "", url($MODULEDIR . "/default.gif"));
  }
  return $out;
}

/**
 * return the thumbnail path for a supported video source,
 * fetching and processing the new image if necessary
 */
function _mytube_download_thumb($url) {
  $URLINFO = parse_url($url);
  $TOPLEVEL = _mytube_toplevel($URLINFO['host']);
  $TMPDIR = file_directory_temp();
  switch($TOPLEVEL) {
    case "youtube.com":
      $PREFIX = "yt";
      if (preg_match("{youtube.com/v/([^\?|\&|\s]*)}si", $url, $matches) > 0) {
      $vid = $matches[1];
      $fetchme = "http://i.ytimg.com/vi/$vid/0.jpg";
      } // New iframe format
      else {
        preg_match("{youtube.com/embed/([^\?|\&|\s]*)}si", $url, $matches);
        $vid = $matches[1];
        $fetchme = "http://i.ytimg.com/vi/$vid/0.jpg";
      }
      break;
    case "youtube-nocookie.com":
      $PREFIX = "yt";
      if (preg_match("{youtube-nocookie.com/v/([^\?|\&|\s]*)}si", $url, $matches) > 0) {
      $vid = $matches[1];
      $fetchme = "http://i.ytimg.com/vi/$vid/0.jpg";
      } // New iframe format
      else {
        preg_match("{youtube-nocookie.com/embed/([^\?|\&|\s]*)}si", $url, $matches);
        $vid = $matches[1];
        $fetchme = "http://i.ytimg.com/vi/$vid/0.jpg";
      }
      break;
    case "metacafe.com":
      $PREFIX = "mc";
      preg_match("/www.metacafe.com\/fplayer\/([^\?|\&|\s]*)/si", $url, $matches);
      $pieces = preg_split("/\//", $matches[1]);
      $vid = $pieces[0];
      $fetchme = "http://s.mcstatic.com/thumb/embed/$vid.jpg";
      // MetaCafe is embeding a YouTube thumbnail, so we download from YouTube directly
      if (strpos($vid, "yt-")) {
        $vid = preg_replace("yt-", "", $vid);
        $fetchme = "http://i.ytimg.com/vi/$vid/0.jpg";
      }
      else if (strpos($vid, "-") == 2) {
        return false;
      }
      break;
    case "vimeo.com":
      $PREFIX = "v";
      if (strrpos($url, "clip_id=")) {
        // Substring after first '?'
        $flashvars = preg_split("/\?/", $url);
        // Find clip_id=XXX
        preg_match("/clip_id=[0-9]+/", $flashvars[1], $matches);
        // Isolate value for clip_id
        $vid = str_replace("clip_id=", "", $matches[0]);
      }
      // This must be Vimeo's new iframe embed
      else {
        $split = preg_split("|/video/|", $url);
        $vid = $split[1];
        $tmp = preg_match('/[0-9]+/', $vid, $matches);
        $vid = $matches[0];
      }
      if ($vid == "" || !$vid)
        return false;
      $TMPDIR = file_directory_temp();
      $filepath = file_default_scheme() . "/mytube";
      if (file_exists("$filepath/v_$vid.jpg")) {
        return "$filepath/v_$vid.jpg";
      }
      // Fetch an XML file from vimeo.com, which will tell us where the thumbnail is
      if (!file_exists("$TMPDIR/$vid.xml")) {
        _mytube_download("http://vimeo.com/moogaloop/load/clip:$vid/embed/?param_server=vimeo.com&param_fullscreen=1&param_show_title=1&param_show_byline=1&param_clip_id=$vid&param_autoplay=1&param_color=00ADEF&param_show_portrait=1&param_loop=0&context_id=null", "$TMPDIR/$vid.xml", false); // Download the XML, using clip_id
      }
      $xml = file("$TMPDIR/$vid.xml");
      if (!is_array($xml))
        return false;
      // Read downloaded XML, line by line
      foreach ($xml as $number => $line) {
        if (preg_match("/<thumbnail>[\d\D\/_\.]*<\/thumbnail>/", $line, $matches)) {
          // Found a thumbnail URL, quit searching
          break;
        }
      }
      $fetchme = preg_replace("/<\/?thumbnail>/", "", $matches[0]);
      break;
    default: // Unsupported video source
      return false;
      break;
  }
  $MODULEDIR = drupal_get_path("module", "mytube");
  $FILEDIR = "sites/default/files/mytube";
  file_prepare_directory($FILEDIR, true);
  $filename = "$PREFIX" . "_$vid.jpg";
  $filepath = $FILEDIR . "/$filename";
  if (file_exists($filepath)) {
    // thumb for this video has already been generated
    $out = $filepath;
  }
  else {
    // fetch the file
    $ok = _mytube_download($fetchme, "$TMPDIR/$filename");
    if ($ok){
      $ok &= copy("$TMPDIR/$filename", $filepath);
    }
    if ($ok) {
      $out = $filepath;
    }
    else {
      // there has been an error
      $out = false;
    }
  }
  return $out;
}


/**
 *  Accepts a YouTube URL
 *  Extracts the YTID
 */
function _mytube_ytid($url_input) {
  // FIXME: This below regex should also account for youtube-nocookie, instead of relying on this other function to swap it out
  $url = str_replace("youtube-nocookie", "youtube", $url_input);

  // @see media_youtube/includes/MediaInternetYouTubeHandler.inc
  //      MediaInternetYouTubeHandler::parse()
  // http://youtube.com/watch/*
  // http://youtube.com/embed/*
  // http://youtube.com/v/*
  // http://youtube.com/?v=*
  // http://youtu.be/*
  // http://gdata.youtube.com/feeds/api/videos/*
  $patterns = array(
    '@youtube\.com/watch[#\?].*?v=([^"\& ]+)@i',
    '@youtube\.com/embed/([^"\&\? ]+)@i',
    '@youtube\.com/v/([^"\&\? ]+)@i',
    '@youtube\.com/\?v=([^"\& ]+)@i',
    '@youtu\.be/([^"\&\? ]+)@i',
    '@gdata\.youtube\.com/feeds/api/videos/([^"\&\? ]+)@i',
  );

  foreach ($patterns as $pattern) {
    preg_match($pattern, $url_input, $matches);
    if (isset($matches[1])) {
      return $matches[1];
    }
  }
}

/**
 *  Given ordinary embedcode, try to improve it
 *  Currently, all this does is add the AutoPlay attribute to YouTube embeds
 *  In the future, other embedcode-improvements can live in this function too
 */
function _mytube_fixembedded(&$embedded, $embed_url, $embed_domain, $width, $height, $full_size_iframe) {
  if ($full_size_iframe) {
    $embedded = preg_replace('/(\<iframe.*width=\")(.*?)(\".*?\>)/', '${1}100%${3}', $embedded);
    $embedded = preg_replace('/(\<iframe.*height=\")(.*?)(\".*?\>)/', '${1}100%${3}', $embedded);
    return;
  } 
  // Add autoplay attribute
  switch ($embed_domain) {
    case "youtube.com":
    case "youtube-nocookie.com":
      $ytparams = str_replace('"',"&quot;", trim(variable_get("mytube_ytparams", "")));
      $ytparams = str_replace('?', '', $ytparams);
      if (!empty($ytparams) && strpos($ytparams, '&') !== 0) {
        $ytparams = '&' . $ytparams;
      }

      $embedded = _mytube_add_param($embed_url, "autoplay=1" . $ytparams, $embedded);
      $embedded = str_replace("autoplay=0", "autoplay=1", $embedded);
      break;
    case "mtvnservices.com":
      $embedded = str_replace($embed_url, $embed_url . "&autoPlay=true", $embedded);
      $embedded = str_replace("autoPlay=false", "autoPlay=true", $embedded); break;
    case "vimeo.com":
      $embedded = _mytube_add_param($embed_url, "autoplay=1", $embedded); break;
    case "google.com":
      // There are other Google embeds besides videos, so we need to distinguish VIDEO.google.com
      if (preg_match("/^http:\/\/video.google.com\//", $embed_url, $matches))
        $embedded = _mytube_add_param($embed_url, "autoplay=1", $embedded);
      break;
    case "ebaumsworld.com":
      $embedded = _mytube_add_param($embed_url, "autostart=true", $embedded); break;
    case "myspace.com":
      $embedded = str_replace($embed_url, $embed_url . ",ap=1", $embedded);
      break;
    case "metacafe.com":
      $embedded = str_replace("autoPlay=no", "autoPlay=yes", $embedded); break;
  }
}

/**
 * Standard method of appending a URL with GET data. Doesn't work in all cases.
 */
function _mytube_add_param($url, $param, $embed) {
  if (strpos($url, '?'))
    return str_replace($url, "$url&$param", $embed);
  else
    return str_replace($url, "$url?$param", $embed);
}
/**
 * Download a file from $url and store it in $destination
 */
function _mytube_download($url, $destination, $preview = false) {
  $request = drupal_http_request($url);
  if ($request->code == 200) {
    $fp = fopen($destination, "w");
    fwrite($fp, $request->data);
    fclose($fp);
    return true;
  }
  else {
    watchdog("mytube", "Failed to download file. ".$request->error);
    return false;
  }
}

/**
 * Borrowed from filter module to replicate HTML tag closing.
 */
function _mytube_close_tags($text) {
  return filter_dom_serialize(filter_dom_load($text));
}
