diff --git a/mytube-instance.tpl.php b/mytube-instance.tpl.php
new file mode 100644
index 0000000..7ed8206
--- /dev/null
+++ b/mytube-instance.tpl.php
@@ -0,0 +1,9 @@
+<div class="mytube" style="width: <?php print $width; ?>px;">
+  <div class="mytubetrigger" id="mytube<?php print $index; ?>">
+    <img width="<?php print $width; ?>" height="<?php print $height; ?>" class="mytubethumb" alt="mytubethumb" src="<?php print str_replace('?q=', '', $thumb); ?>" />
+    <img src="<?php print $play_icon; ?>" class="mytubeplay" alt="play" style="top: <?php print (int)$height / 2 - 30; ?>px; left: <?php print (int)$width / 2 - 30; ?>px;" />
+  </div><!--mytubetrigger-->
+  <div class="mytubetext" id="mytubetext<?php print $index; ?>">
+    <?php print l(t('Privacy info.'), $privacy_url) . filter_xss_admin(" $privacy_text"); ?>
+  </div>
+</div>
diff --git a/mytube.module b/mytube.module
index c165bbe..3c7393e 100644
--- a/mytube.module
+++ b/mytube.module
@@ -72,6 +72,26 @@ function mytube_help($path, $arg) {
 }
 
 /**
+ * Implementation of hook_theme().
+ */
+function mytube_theme() {
+  return array(
+    'mytube_instance' => array(
+      'template' => 'mytube-instance',
+      'variables' => array(
+        'thumb' => NULL,
+        'play_icon' => NULL,
+        'width' => 0,
+        'height' => 0,
+        'index' => 0,
+        'privacy_url' => NULL,
+        'privacy_text' => NULL
+      ),
+    ),
+  );
+}
+
+/**
  * Admin settings list, helper for hook_menu
  */
 function mytube_admin_settings() {
@@ -346,67 +366,67 @@ function _mytube_replaceembed($embedded, $tag) {
   $embed_url = preg_replace("[^//]", $PROTOCOL, $embed_url);
   $embed_urlinfo = parse_url($embed_url);
   $embed_domain = _mytube_toplevel($embed_urlinfo['host']);
-    // first, find the thumbnail
-    $thumb = _mytube_thumb($embedded, $embed_url, $embed_domain);
-    $width = (int)check_plain(variable_get("mytube_default_width", ""));
-    if($width == 0) {
-      $width = 320;
-    }
-    $height = (int)check_plain(variable_get("mytube_default_height", ""));
-    if($height == 0) {
-      $height = 240;
-    }
-    if (variable_get("mytube_allow_custom_size", 0)) {
-        // Search multiple tags for width/height attributes
-      foreach (array("embed", "object", "iframe") as $tag) {
-        $start_embed = strpos($embedded, "<$tag", 0);
-        $end_embed = strpos($embedded, ">", $start_embed);
-        $embed_tag = substr($embedded, $start_embed + 1, $end_embed);
-        // Remove units from width/height
-        $embed_tag = preg_replace('/="?.?p[xt].?"?/', "", $embed_tag);
-        $atts = _mytube_html_tag_atts($embed_tag);
-        if(!$atts){$atts = array();}
-        if(array_key_exists("width", $atts)) {
-          $width = preg_replace("/p?[xt]?/", "", $atts['width']);
-        }
-        if(array_key_exists("height", $atts)) {
-          $height = preg_replace("/p?[xt]?/", "", $atts['height']);
-        }
+  // first, find the thumbnail
+  $thumb = _mytube_thumb($embedded, $embed_url, $embed_domain);
+  $width = (int)check_plain(variable_get("mytube_default_width", ""));
+  if($width == 0) {
+    $width = 320;
+  }
+  $height = (int)check_plain(variable_get("mytube_default_height", ""));
+  if($height == 0) {
+    $height = 240;
+  }
+  if (variable_get("mytube_allow_custom_size", 0)) {
+      // Search multiple tags for width/height attributes
+    foreach (array("embed", "object", "iframe") as $tag) {
+      $start_embed = strpos($embedded, "<$tag", 0);
+      $end_embed = strpos($embedded, ">", $start_embed);
+      $embed_tag = substr($embedded, $start_embed + 1, $end_embed);
+      // Remove units from width/height
+      $embed_tag = preg_replace('/="?.?p[xt].?"?/', "", $embed_tag);
+      $atts = _mytube_html_tag_atts($embed_tag);
+      if(!$atts){$atts = array();}
+      if(array_key_exists("width", $atts)) {
+        $width = preg_replace("/p?[xt]?/", "", $atts['width']);
+      }
+      if(array_key_exists("height", $atts)) {
+        $height = preg_replace("/p?[xt]?/", "", $atts['height']);
       }
     }
-    // determine the output html
-    $privacy_url = variable_get("mytube_url", "");
-    if ($privacy_url == "") {
-      $privacy_url = "https://www.eff.org/deeplinks/2008/02/embedded-video-and-your-privacy";
-    }
-    $privacy_text = filter_xss_admin(variable_get("mytube_text", ""));
-    if ($privacy_text == "") {
-      $privacy_text = t('This embed will serve content from') . ' <em><a rel="nofollow" href="' . url($embed_url) . '">' . check_plain($embed_domain) . '</a></em><br />';
-    }
-    else {
-      $privacy_text = str_replace("!embed", $embed_url, $privacy_text);
-      $privacy_text = str_replace("!domain", $embed_domain, $privacy_text);
-      $privacy_text = filter_xss_admin($privacy_text);
-    }
-    $MODULEDIR = drupal_get_path("module", "mytube");
-    $_mytube_index++;
-    $out  = "<div class='mytube' style='width:$width" . "px;'>";
-    $out .= "<div class='mytubetrigger' id='mytube$_mytube_index'>";
-    $out .= "<img width='$width' height='$height' class='mytubethumb' src='";
-    $out .= str_replace("?q=","",$thumb) . "' alt='mytubethumb' />";
-    /*
-     * Note to webmasters: If you replace play.png, change this 1 line for proper display.
-     * // TODO: Make this a configurable option.
-     * ((int)$width / 2 - 30) should be ((int)$width / 2 - (WIDTH_OF_YOUR_REPLACEMENT / 2))
-     * ((int)$height / 2 - 30) should be ((int)$width / 2 - (HEIGHT_OF_YOUR_REPLACEMENT / 2))
-     */
-    $out .= "<img src='" . str_replace("?q=", "", url($MODULEDIR . "/play.png")) . "' class='mytubeplay' alt='play' style='top:" . ((int)$height / 2 - 30) . "px;left:" . ((int)check_plain($width) / 2 - 30) . "px;' />";
-    $out .= "</div><!--mytubetrigger-->";
-    $out .= "<div class='mytubetext' id='mytubetext$_mytube_index'>" . l(t('Privacy info.'), $privacy_url) . filter_xss_admin(" $privacy_text") . "</div></div>";
-    // modify the code-to-be-revealed if necessary
-    _mytube_fixembedded($embedded, $embed_url, $embed_domain, $width, $height);
-    // pass the code-to-be-revealed to the JavaScript
-    $_mytube_embedcodes[$_mytube_index] = $embedded;
+  }
+  // determine the output html
+  $privacy_url = variable_get("mytube_url", "");
+  if ($privacy_url == "") {
+    $privacy_url = "https://www.eff.org/deeplinks/2008/02/embedded-video-and-your-privacy";
+  }
+  $privacy_text = filter_xss_admin(variable_get("mytube_text", ""));
+  if ($privacy_text == "") {
+    $privacy_text = t('This embed will serve content from') . ' <em><a rel="nofollow" href="' . url($embed_url) . '">' . check_plain($embed_domain) . '</a></em><br />';
+  }
+  else {
+    $privacy_text = str_replace("!embed", $embed_url, $privacy_text);
+    $privacy_text = str_replace("!domain", $embed_domain, $privacy_text);
+    $privacy_text = filter_xss_admin($privacy_text);
+  }
+  $play_icon = str_replace('?q=', '', url(drupal_get_path('module', 'mytube') . '/play.png'));
+  $_mytube_index++;
+
+  $variables = array(
+    'thumb' => $thumb,
+    'play_icon' => $play_icon,
+    'width' => $width,
+    'height' => $height,
+    'index' => $_mytube_index,
+    'privacy_url' => $privacy_url,
+    'privacy_text' => $privacy_text,
+  );
+  $out = theme('mytube_instance', $variables);
+
+  // modify the code-to-be-revealed if necessary
+  _mytube_fixembedded($embedded, $embed_url, $embed_domain, $width, $height);
+  // pass the code-to-be-revealed to the JavaScript
+  $_mytube_embedcodes[$_mytube_index] = $embedded;
+
   return $out;
 }
 
