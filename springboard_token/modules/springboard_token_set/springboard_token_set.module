<?php

/**
 * Implements hook_menu().
 */
function springboard_token_set_menu() {
  $items = array();
  $items['admin/config/content/tokens'] = array(
    'title' => 'Springboard Tokens',
    'description' => 'Manage tokens.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('springboard_token_set_tokens_admin_form'),
    'access arguments' => array('administer springboard'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 0,
  );
 /* $items['admin/config/content/token-set-fields'] = array(
    'title' => 'Springboard Token Fields',
    'description' => 'Enable/disable tokens for a given form field.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('springboard_token_set_fields_admin_form'),
    'access arguments' => array('administer springboard'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 0,
  ); */
  $items['admin/config/content/token-sets'] = array(
    'title' => 'Springboard Token Sets',
    'description' => 'Manage tokens within token sets.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('springboard_token_set_sets_admin_form'),
    'access arguments' => array('administer springboard'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 0,
  );
  $items['admin/config/content/token-sets/add'] = array(
    'title' => 'Create token set',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('springboard_token_set_add_token_set_admin_form'),
    'access arguments' => array('administer springboard'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/content/token-sets/delete'] = array(
    'title' => 'Delete token set',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('springboard_token_set_delete_token_set_admin_form'),
    'access arguments' => array('administer springboard'),
    'type' => MENU_CALLBACK,
  );
  $items['sb-admin-token-add-ajax'] = array(
    'page callback' => '_springboard_token_set_admin_add_token_ajax',
    'access arguments' => array('administer springboard'),
    'type' => MENU_CALLBACK,
  );
  $items['sb-admin-token-delete-ajax'] = array(
    'page callback' => '_springboard_token_set_admin_delete_token_ajax',
    'access arguments' => array('administer springboard'),
    'type' => MENU_CALLBACK,
  );
  $items['sb-token-set-ajax'] = array(
    'page callback' => '_springboard_token_set_ajax_fetch',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Token set field manager form.
 */
function springboard_token_set_fields_admin_form($form, &$form_state) {
  $form = array();
  // Loop over existing settings

  // Add AJAXified fields for adding/removing a default token set to a field:
  $form['token-fields']['add-mapping'] = array(
    '#type' => 'container',
  );
  $form['token-fields']['add-mapping']['form_id'] = array(
    '#type' => 'select',
    '#title' => 'Target form',
    '#options' => array('- Select a form -'),
  );
  $form['token-fields']['add-mapping']['field_key'] = array(
    '#type' => 'select',
    '#disabled' => TRUE,
    '#title' => 'Target field',
    '#options' => array('- Select a form field -'),
  );
  $form['token-fields']['add-mapping']['token_set'] = array(
    '#type' => 'select',
    '#title' => 'Desired token set',
    '#options' => array('- Select a Token Set -'),
  );
  $form['token-fields']['add-mapping']['token_add'] = array(
    '#type' => 'button',
    '#value' => 'Enable',
  );
  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function springboard_token_set_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  $entity_type = $form['#instance']['entity_type'];
  $bundle = $form['#instance']['bundle'];
  $field_name = $form['#instance']['field_name'];

  $token_sets = springboard_token_set_get_sets();

  $token_set_options = array(
    0 => 'None',
  );
  foreach ($token_sets as $token_set) {
    $token_set_options[$token_set->tsid] = $token_set->name;
  }

  $form['token_set'] = array(
    '#title' => t('Manage Token Set'),
    '#type' => 'fieldset',
    '#collapsible' => FALSE,
  );

  $form['token_set']['token_set_id'] = array(
    '#type' => 'select',
    '#title' => t('Use token set'),
    '#description' => t('Please select the token set available to this field; setting this to "None" removes the tokens widget from this field.'),
    '#options' => $token_set_options,
    '#default_value' => springboard_token_set_get_token_set($entity_type, $bundle, $field_name) ,
  );

  $form['#submit'][] = 'springboard_token_set_save_field';
}

/**
 * Submit handler for field token set ID.
 */
function springboard_token_set_save_field($form, &$form_state) {
  $entity_type = $form['#instance']['entity_type'];
  $bundle = $form['#instance']['bundle'];
  $field_name = $form['#instance']['field_name'];
  $tsid = $form_state['values']['token_set_id'];

  // Insert this token set if it does not exist; otherwise update it:
  $exists_query = db_query("SELECT tsid FROM {springboard_token_set_entity_fields} " .
    "WHERE entity_type = :entity_type AND bundle = :bundle AND field_name = :field_name",
    array(':entity_type' => $entity_type, ':bundle' => $bundle, ':field_name' => $field_name));
  foreach ($exists_query as $exists) {
    db_query("UPDATE {springboard_token_set_entity_fields} SET tsid = :tsid " .
      "WHERE entity_type = :entity_type AND bundle = :bundle AND field_name = :field_name",
      array(':entity_type' => $entity_type, ':bundle' => $bundle, ':field_name' => $field_name, ':tsid' => $tsid));
    return; 
  }
  db_query("INSERT INTO {springboard_token_set_entity_fields} (tsid, entity_type, bundle, field_name) " .
    "VALUES(:tsid, :entity_type, :bundle, :field_name)",
    array(':entity_type' => $entity_type, ':bundle' => $bundle, ':field_name' => $field_name, ':tsid' => $tsid));
}

/**
 * Implements hook_form_alter()
 */
function springboard_token_set_form_alter(&$form, &$form_state, $form_id) {
  // Only alter the form if we're editing content.
  if (!isset($form['#entity_type'])) {
    return;
  }

  // TODO: Check user access for ability to use tokens.
  $fields = field_info_instances($form['#entity_type'], $form['#bundle']);

  // Store token set and field data for JS settings.
  $token_sets = array();

  foreach ($fields as $field) {
    $entity_type = $field['entity_type'];
    $bundle = $field['bundle'];
    $field_name = $field['field_name'];

    // Check for a token set ID associated with the current field.
    $tsid = springboard_token_set_get_token_set($entity_type, $bundle, $field_name);

    if ($tsid != 0) {
      // If this token set hasn't been loaded yet, load and store tokens.
      if (!isset($token_sets[$tsid])) {
        $tokens = springboard_token_set_get_tokens($tsid);
        $token_sets[$tsid] = $tokens;
      }

      // Store a reference to token set ID in the field attributes.
      $form[$field_name]['#attributes']['data-token-set-id'] = $tsid;
    }
  }

  // Add the jQuery and CSS for the token UI:
  springboard_token_set_attach_token_ui($form, $token_sets);
}

/**
 * Page callback for tokens admin form.
 */
function springboard_token_set_tokens_admin_form($form, &$form_state) {
  $tokens = springboard_token_set_get_tokens();

  $form = array();

  $form['tokens'] = array(
    '#type' => 'container',
    '#tree' => TRUE,
  );

  foreach ($tokens as $token) {
    $form['tokens']['token-' . $token->tid] = array(
      '#type' => 'container',
    );

    $form['tokens']['token-' . $token->tid]['tid'] = array(
      '#type' => 'hidden',
      '#default_value' => $token->tid,
    );

    $form['tokens']['token-' . $token->tid]['token'] = array(
      '#type' => 'textfield',
      '#disabled' => TRUE,
      '#size' => 40,
      '#default_value' => $token->token,
    );

    $form['tokens']['token-' . $token->tid]['token_description'] = array(
      '#type' => 'textfield',
      '#default_value' => $token->token_description,
    );

    $form['tokens']['token-' . $token->tid]['delete'] = array(
      '#type' => 'checkbox',
      '#title' => 'Remove token',
    );
  }

  $form['submit-button'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );

  $form['#submit'] = array('springboard_token_set_tokens_admin_form_submit');

  $form['#attached']['css'] = array(
    'data' => drupal_get_path('module', 'springboard_token_set') . '/css/springboard_token_set_admin.css',
    'type' => 'file',
  );

  return $form;
}

/**
 * Submit handler for tokens admin form.
 */
function springboard_token_set_tokens_admin_form_submit($form, $form_state) {
  foreach ($form_state['values']['tokens'] as $submitted_token) {
    if ($submitted_token['delete'] == 1) {
      springboard_token_set_delete_token($submitted_token['tid']);
    }
    else {
      springboard_token_set_update_token($submitted_token['tid'], $submitted_token['token'], $submitted_token['token_description']);
    }
  }
}

/**
 * Page callback for token sets admin form.
 */
function springboard_token_set_sets_admin_form($form, &$form_state) {
  $token_sets = springboard_token_set_get_sets();

  $form = array();

  $form['add-token-set'] = array(
    '#markup' => l('+ Add token set', 'admin/config/content/token-sets/add', array(
      'query' => array('destination' => 'admin/config/content/token-sets'),
      'attributes' => array('class' => array('add-token-set')))
    ),
  );

  $form['token-sets'] = array(
    '#type' => 'container',
    '#tree' => TRUE,
  );

  foreach ($token_sets as $token_set) {
    $form['token-sets']['token-set-' . $token_set->tsid] = array(
      '#type' => 'fieldset',
      '#title' => $token_set->name,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );

    $tokens = springboard_token_set_get_tokens($token_set->tsid);

    // Column labels:
    $form['token-sets']['token-set-' . $token_set->tsid]['labels'] = array(
      '#markup' =>
        '<div class="token-labels">' .
          '<span class="token-label">Token</span>' .
          '<span class="token-label">Token description</span>' .
        '</div>',
    );

    foreach ($tokens as $token) {
      $form['token-sets']['token-set-' . $token_set->tsid][$token->token] = array(
        '#type' => 'container',
      );
      $form['token-sets']['token-set-' . $token_set->tsid][$token->token]['token'] = array(
        '#type' => 'textfield',
        '#disabled' => TRUE,
        '#default_value' => $token->token,
      );
      $form['token-sets']['token-set-' . $token_set->tsid][$token->token]['token_description'] = array(
        '#type' => 'textfield',
        '#disabled' => TRUE,
        '#default_value' => $token->token_description,
      );
      $form['token-sets']['token-set-' . $token_set->tsid][$token->token]['delete'] = array(
        '#markup' => '<a href="#" class="remove-token-link" tsid="' . $token_set->tsid . '" tid="' . $token->tid . '">Remove token</a>',
      );
    }

    // Add tokens to a token set via AJAX submit:
    $form['token-sets']['token-set-' . $token_set->tsid]['add-token'] = array(
      '#type' => 'container',
    );
    $form['token-sets']['token-set-' . $token_set->tsid]['add-token']['new_token'] = array(
      '#type' => 'textfield',
      '#attributes' => array('class' => array('token-machine'), 'tsid' => $token_set->tsid),
    );
    $form['token-sets']['token-set-' . $token_set->tsid]['add-token']['new_token_description'] = array(
      '#type' => 'textfield',
      '#attributes' => array('class' => array('token-description'), 'tsid' => $token_set->tsid),
    );
    $form['token-sets']['token-set-' . $token_set->tsid]['add-token']['add-button'] = array(
      '#type' => 'button',
      '#attributes' => array('class' => array('add-token-button'), 'tsid' => $token_set->tsid),
      '#value' => 'Add token',
    );

    // Token set deletion:
    $form['token-sets']['token-set-' . $token_set->tsid]['delete-token-set'] = array(
      '#markup' => l('Delete token set', 'admin/config/content/token-sets/delete/' . $token_set->tsid, array(
        'query' => array('destination' => 'admin/config/content/token-sets'),
        'attributes' => array('class' => array('delete-token-set')))
      ),
    );
  }

  $form['#attached']['css'] = array(
    'data' => drupal_get_path('module', 'springboard_token_set') . '/css/springboard_token_set_admin.css',
    'type' => 'file',
  );
  $form['#attached']['js'] = array(
    'data' => drupal_get_path('module', 'springboard_token_set') . '/js/springboard_token_set_admin.js',
    'type' => 'file',
  );
  return $form;
}

/**
 * Page callback for "add token set" admin form.
 */
function springboard_token_set_add_token_set_admin_form($form, &$form_state) {
  $form['add-token-set'] = array(
    '#type' => 'fieldset',
  );
  $form['add-token-set']['token-set-name'] = array(
    '#type' => 'textfield',
    '#title' => 'Token set name',
    '#description' => 'Please enter a human-readable name for this token set.',
    '#maxlength' => '64',
    '#required' => TRUE,
  );
  $form['add-token-set']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save token set',
    '#suffix' => l('Cancel', 'admin/config/content/token-sets'),
  );
  return $form;
}

/**
 * Form validation handler for "add token set" admin form.
 */
function springboard_token_set_add_token_set_admin_form_validate($form, &$form_state) {
  // Make sure the new token set's name is unused:
  $new_name = trim($form_state['values']['token-set-name']);
  $name_query = db_query("SELECT name FROM {springboard_token_sets} WHERE name LIKE :name",
    array(':name' => $new_name));
  foreach ($name_query as $result) {
    form_set_error('token-set-name', t('A token set called ":name" already exists! Please enter an unused name for this token set.', array(':name' => $result->name)));
  }
}

/**
 * Form submit handler for "Add token set" admin form.
 */
function springboard_token_set_add_token_set_admin_form_submit($form, &$form_state) {
  $new_name = trim($form_state['values']['token-set-name']);
  db_query("INSERT INTO {springboard_token_sets} (name) VALUES(:name)", array(':name' => $new_name));
  drupal_set_message('Token set "' . $new_name . '" has been created!');
}

/**
 * Page callback for "Delete token set" admin form.
 */
function springboard_token_set_delete_token_set_admin_form($form, &$form_state) {
  $arg5 = arg(5);
  if (!is_numeric($arg5)) {
    drupal_set_message('The token set ID is expected but not present in the URL.');
    return array();
  }
  $tsid = $arg5;
  $token_set_name = db_query("SELECT name FROM {springboard_token_sets} WHERE tsid = :tsid", array(':tsid' => $tsid))
    ->fetchField();
  drupal_set_title(t('Are you sure you want to delete token set "' . $token_set_name . '"?'));
  $form['delete-token-set']['submit'] = array(
    '#prefix' => '<div id="ts-delete-blurb">This action cannot be undone.</div><br />',
    '#suffix' => l('Cancel', 'admin/config/content/token-sets'),
    '#type' => 'submit',
    '#value' => 'Delete',
  );
  return $form;
}

/**
 * Form submit for the token set deletion form:
 */
function springboard_token_set_delete_token_set_admin_form_submit($form, &$form_state) {
  $arg5 = arg(5);
  if (!is_numeric($arg5)) {
    drupal_set_message('The token set ID is expected but not present in the URL.');
    return array();
  }
  $tsid = $arg5;

  $token_set_name = db_query("SELECT name FROM {springboard_token_sets} WHERE tsid = :tsid", array(':tsid' => $tsid))
    ->fetchField();

  // Delete records mapping tokens to this token set:
  db_query("DELETE FROM {springboard_token_set_tokens} WHERE tsid = :tsid", array(':tsid' => $tsid));

  // Also delete any tokens no longer associated with any token sets:
  db_query("DELETE FROM {springboard_tokens} WHERE tid NOT IN (SELECT tid FROM {springboard_token_set_tokens})");

  // Finally, delete the token set itself:
  db_query("DELETE FROM {springboard_token_sets} WHERE tsid = :tsid LIMIT 1", array(':tsid' => $tsid));

  drupal_set_message('Token set "' . $token_set_name . '" has been deleted!');
}


/**
 * Gets an array of field types that can be used with tokens.
 *
 * @return array
 *   Array of tokenable field types.
 */
function springboard_token_get_field_types() {
  return array(
    'textarea',
    'textfield',
  );
}

/**
 * Adds a new token set.
 *
 * @param string $name
 *   The name of the token set.
 *
 * @return int
 *   The ID of the new token set.
 */
function springboard_token_set_add_set($name) {
  $tsid = db_insert('springboard_token_sets')
    ->fields(array('name' => $name))
    ->execute();

  return $tsid;
}

/**
 * Adds a new token.
 *
 * @param string $token_type
 *   The token type.
 * @param string $token
 *   The token.
 * @param string $token_description
 *   The token description.
 */
function springboard_token_set_add_token($token_type, $token, $token_description) {
  $tid = db_insert('springboard_tokens')
    ->fields(array(
      'token_type' => $token_type,
      'token' => $token,
      'token_description' => $token_description,
    ))
    ->execute();

  return $tid;
}

/**
 * Add the label for a new token type.
 *
 * @param $token_type
 *   The machine name of the token type.
 * @param $label
 *   The human-readable label of the token type.
 */
function springboard_token_set_add_token_type($token_type, $label) {
  db_insert('springboard_token_types')
    ->fields(array(
      'token_type' => $token_type,
      'label' => $label,
    ))
    ->execute();
}

/**
 * Updates an existing token.
 *
 * @param int $tid
 *   The token ID.
 * @param string $token
 *   The token.
 * @param string $token_description
 *   The token description.
 */
function springboard_token_set_update_token($tid, $token, $token_description) {
  if (empty($token)) {
    return;
  }

  $token_parts = explode(':', str_replace('[', '', str_replace(']', '', $token)));

  db_update('springboard_tokens')
    ->fields(array(
      'token_type' => $token_parts[0],
      'token' => $token,
      'token_description' => $token_description,
    ))
    ->condition('tid', $tid)
    ->execute();
}

/**
 * Adds a token to an existing token set.
 *
 * @param int $tsid
 *   The ID of the token set.
 * @param int $tid
 *   The ID of the token.
 */
function springboard_token_set_add_token_to_set($tsid, $tid) {
  db_insert('springboard_token_set_tokens')
    ->fields(array(
      'tsid' => $tsid,
      'tid' => $tid,
    ))
    ->execute();
}

/**
 * Removes a token from a token set.
 *
 * @param int $tsid
 *   The ID of the token set.
 * @param int $tid
 *   The ID of the token.
 */
function springboard_token_set_remove_token_from_set($tsid, $tid) {
  db_delete('springboard_token_set_tokens')
    ->condition('tsid', $tsid)
    ->condition('tid', $tid)
    ->execute();
}

/**
 * Gets all token sets.
 *
 * @return array
 *   Array of token sets.
 */
function springboard_token_set_get_sets() {
  $token_sets = db_select('springboard_token_sets', 'ts')
    ->fields('ts', array('tsid', 'name'))
    ->execute()
    ->fetchAll();

  return $token_sets;
}

/**
 * Gets a token set by ID.
 *
 * @param int $tsid
 *   The ID of the token set.
 *
 * @return object
 *   The token set.
 */
function springboard_token_set_get_set($tsid) {
  $token_set = db_select('springboard_token_sets', 'ts')
    ->fields('ts', array('tsid', 'name'))
    ->condition('tsid', $tsid, '=')
    ->execute()
    ->fetchObject();

  return $token_set;
}

/**
 * Gets tokens for a given token set ID, or all tokens if $tsid is empty.
 *
 * @param int $tsid
 *   The ID of the token set. Optional.
 *
 * @return array
 *   Array of tokens.
 */
function springboard_token_set_get_tokens($tsid = NULL) {
  $query = db_select('springboard_tokens', 't');
  $query->join('springboard_token_set_tokens', 'tst', 't.tid = tst.tid');
  $query->join('springboard_token_types', 'ttype', 't.token_type = ttype.token_type');
  $query->fields('t', array('tid', 'token', 'token_description'));
  $query->addField('ttype', 'label', 'token_type');

  if (!empty($tsid)) {
    $query->condition('tst.tsid', $tsid, '=');
  }

  $query->orderBy('t.token_type', 'ASC');

  $result = $query->execute();

  return $result->fetchAll();
}

/**
 * Deletes a token and any references from token sets.
 *
 * @param string $tid
 *   The ID of the token.
 */
function springboard_token_set_delete_token($tid) {
  // Delete the token.
  db_delete('springboard_tokens')
    ->condition('tid', $tid)
    ->execute();

  // Delete references from token sets.
  db_delete('springboard_token_set_tokens')
    ->condition('tid', $tid)
    ->execute();
}

/**
 * Gets the token set ID associaed with a given entity field.
 * 0 is returned if no token set is associated with the target field.
 *
 * @param $entity_type
 *   The target field's entity type.
 * @param $bundle
 *   The target field's entity bundle.
 * @param $field_name
 *   The target field's machine name.
 */
function springboard_token_set_get_token_set($entity_type, $bundle, $field_name) {
  $tsid_query = db_query("SELECT tsid FROM {springboard_token_set_entity_fields} WHERE " .
    "entity_type = :entity_type AND bundle = :bundle AND field_name = :field_name",
    array(':entity_type' => $entity_type, ':bundle' => $bundle, ':field_name' => $field_name));
  foreach ($tsid_query as $tsid_data) {
    return $tsid_data->tsid;
  }
  return 0;
}

/**
 * Returns an array of all available token sets and their IDs, ordered alphabetically.
 */
function springboard_token_set_get_token_sets_list() {
  $token_set_query = db_query("SELECT tsid, name FROM {springboard_token_sets} ORDER BY name");
  $token_set_data = array();
  foreach ($token_set_query as $result) {
    $token_set_data[$result->tsid] = $result->name;
  }
  return $token_set_data;
}

/**
 * Add the token UI JS and CSS to a particular form.
 *
 * @param $form
 *   The form in question.
 * @param $token_sets
 *   The token data to be used by jQuery.
 */
function springboard_token_set_attach_token_ui(&$form, $token_sets) {
  if (empty($form['#attached']['js'])) {
    $form['#attached']['js'] = array();
  }
  $form['#attached']['js'] = array(
    'data' => drupal_get_path('module', 'springboard_token_set') . '/js/springboard_token_set.js',
    'type' => 'file',
  );
  $form['#attached']['js'][] = array(
    'data' => array(
      'token_sets' => $token_sets,
      'token_sets_list' => springboard_token_set_get_token_sets_list(),
    ),
    'type' => 'setting',
  );
  $form['#attached']['css'] = array(
    'data' => drupal_get_path('module', 'springboard_token_set') . '/css/springboard_token_set.css',
    'type' => 'file',
  );
}

/**
 * AJAX callback for fetching a token set's data.
 *
 * @param $tsid
 *   The ID of the token set data to return.
 */
function _springboard_token_set_ajax_fetch($tsid) {
  $output_data = array();
  if (!empty($tsid)) {
    $token_set_data = springboard_token_set_get_tokens($tsid != 'all' ? $tsid : NULL);
    foreach ($token_set_data as $token_data) {
      $output_data[] = (array) $token_data;
    }
  }
  drupal_json_output($output_data);
}

/**
 * AJAX callback for removing a token from a token set on the token set manager form.
 * The token's record will also be deleted if it is not used in any other token sets.
 */
function _springboard_token_set_admin_delete_token_ajax() {
  // Ensure required data is present:
  if (!isset($_POST['tsid']) || !is_numeric($_POST['tsid']) || !isset($_POST['tid']) || !is_numeric($_POST['tid'])) {
    echo 'There was a problem with the removal of this token!';
    return;
  }
  $tid = $_POST['tid']; $tsid = $_POST['tsid'];
  // Remove this token from its token set:
  db_query("DELETE FROM {springboard_token_set_tokens} WHERE tid = :tid AND tsid = :tsid",
    array(':tid' => $tid, ':tsid' => $tsid));

  // Delete this token if it is not being used anywhere:
  db_query("DELETE FROM {springboard_tokens} WHERE tid = :tid AND tid NOT IN (SELECT tid FROM {springboard_token_set_tokens})",
    array(':tid' => $tid));

  // Tell jQuery the operation was successful:
  echo 'success';
}

/**
 * AJAX callback for adding a new token to a token set on the token set manager form.
 */
function _springboard_token_set_admin_add_token_ajax() {
  // Ensure required data is present:
  if (!isset($_POST['tsid']) || !is_numeric($_POST['tsid'])) {
    echo 'There was a problem with creating this token!';
    return;
  }
  else if (!isset($_POST['token_machine']) || empty($_POST['token_machine'])) {
    echo 'Please enter the token, for example: [donation:foo]';
    return;
  } 
  else if (!isset($_POST['token_descr']) || empty($_POST['token_descr'])) {
    echo 'Please enter a description for this token.';
    return;
  }
  $tsid = $_POST['tsid'];
  $token_machine = check_plain($_POST['token_machine']); $token_machine = trim($token_machine);
  $token_descr = check_plain($_POST['token_descr']); $token_descr = trim($token_descr);
  $token_descr = str_replace('&#039;', "'", $token_descr);

  // Validate token format:
  if (strpos($token_machine, ':') === FALSE
    || strpos($token_machine, '[') !== 0
    || strpos($token_machine, ']') !== (strlen($token_machine) - 1)
  ) {
    echo 'Please ensure the token format is correct; for example: [foo:bar]';
    return;
  }

  // Get the token type:
  $token_type_data = str_replace(array('[', ']'), '', $token_machine);
  $token_data = explode(':', $token_type_data);
  if (!is_array($token_data) || !isset($token_data[0]) || empty($token_data[0]) || strpos($token_data[0], ':') !== FALSE) {
    echo 'Please ensure the token format is correct; for example: [foo:bar]';
    return;
  }
  $token_type = strtolower($token_data[0]);

  // Make sure this token type exists:
  $type_query = db_query("SELECT token_type FROM {springboard_token_types} WHERE token_type = :token_type",
    array(':token_type' => $token_type));
  $type_exists = FALSE;
  foreach ($type_query as $result) {
    $type_exists = TRUE;
  }
  if (!$type_exists) {
    echo 'Please enter a valid token type; for example, "donation" is the token type for [donation:foo]';
    return;
  }

  // If this token already exists then get its token ID; otherwise, create it and then get the token ID:
  $exists_query = db_query("SELECT tid FROM {springboard_tokens} WHERE token = :token", array(':token' => $token_machine));
  foreach ($exists_query as $result) {
    $tid = $result->tid;
  }
  if (!isset($tid)) {
    // Create the token if it doesn't already exist:
    db_query("INSERT INTO {springboard_tokens} (token_type, token, token_description) " .
      "VALUES(:token_type, :token_machine, :token_descr)", array(
        ':token_type' => $token_type, 
        ':token_machine' => $token_machine,
        ':token_descr' => $token_descr,
      ));
    // Get the token ID for the newly inserted token:
    $tid_query = db_query("SELECT tid FROM {springboard_tokens} WHERE token = :token_machine",
      array(':token_machine' => $token_machine));
    foreach ($tid_query as $result) {
      $tid = $result->tid;
    }
  }

  // Check if this token is already associated with the target token set:
  $ts_map_query = db_query("SELECT tid FROM {springboard_token_set_tokens} WHERE tsid = :tsid AND tid = :tid",
    array(':tsid' => $tsid, ':tid' => $tid));
  foreach ($ts_map_query as $result) {
    echo 'Token ' . $token_machine . ' already belongs to this token set!';
    return;
  }
  // Map the token to the target token set:
  db_query("INSERT INTO {springboard_token_set_tokens} (tsid, tid) VALUES(:tsid, :tid)", array(
    ':tsid' => $tsid,
    ':tid' => $tid,
  ));

  // Tell jQuery the tid of the newly added token row:
  echo $tid;
}
