<?php

/**
 * @file
 * This module provides functionality for replacing the ask amounts on a donation with values from a secure query variable.
 */

/**
 * Implements hook_init().
 */
function dynamic_gift_strings_init() {
  // check for the presence of the af query string parameter and we're on a node page
  if (isset($_GET['gs']) && arg(0) == 'node' && is_numeric(arg(1))) {
    $gs = $_GET['gs'];
    $nid = arg(1);
    // see if the gift string is expired
    if (!secure_prepopulate_is_expired($gs)) {
      if ($fields = secure_prepopulate_decrypt_qs($gs)) {
        $_SESSION['dynamic_gift_string_values'][$nid] = $fields; // Coder: This is ok.
        // see if we need to expire the query string
        $never_expire = variable_get('dynamic_gift_strings_never_expire', 1);
        if (!$never_expire) {
          secure_prepopulate_expire($gs);
        }
      }
    }
  }
}

/**
 * Implements hook_menu().
 */
function dynamic_gift_strings_menu() {
  $items = array();
  $items['admin/config/system/secure-prepopulate/test-generator'] = array(
    'title' => 'Test Generator',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dynamic_gift_strings_test_url_generator_form'),
    'access arguments' => array('administer secure pre-populate'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 9999,
  );
  return $items;
}

/**
 * The Test URL generation form.
 */
function dynamic_gift_strings_test_url_generator_form($form, &$form_state) {
  drupal_set_title('Secure Prepopulate Test Generator');
  $form = array();

  // Do not display the form if either the Encryption Key or Initialization vector are missing:
  $encryption_key = variable_get('secure_prepopulate_key', '');
  $init_vector = variable_get('secure_prepopulate_iv', '');
  if (!$encryption_key || !$init_vector) {
    $form['missing_fields'] = array(
      '#type' => 'markup',
      '#markup' => t('Please ensure both the Encryption Key and the Initialization Vector are set on the Secure Prepopulate settings page.'),
    );
    return $form;
  }


  $form_defaults = _dynamic_gift_string_get_test_generator_defaults();
  $target_form_prefix = variable_get('dync_gift_test_get_url_prefix', 'springboard/node/2');
  // List the test URLs:
  $form['test_urls'] = array(
    '#title' => t('Test URLs:'),
    '#type' => 'fieldset',
    '#description' => _dynamic_gift_string_generate_test_urls($target_form_prefix),
  );

  // Allow the secure prepopulate used in the test URLs to be changed:
  $form['sec_pop_values'] = array(
    '#title' => t('Secure-Prepopulate Test Values'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $sec_pop_vals = variable_get('sec_pop_test_gen_values', $form_defaults['secure_prepopulate']);
  foreach ($sec_pop_vals as $form_key => $default_value) {
    $form['sec_pop_values'][$form_key] = array(
     '#title' => $form_key,
     '#type' => 'textfield',
     '#default_value' => $default_value,
    );
  }

  // Allow the dynamic gift string values used in the test URLs to be changed:
  $form['dyn_gift_values'] = array(
    '#title' => t('Dynamic Gift String Test Values'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $dyn_gift_vals = variable_get('dyn_gift_test_gen_values', $form_defaults['dynamic_gift_strings']);
  $dyn_gift_descrs = array(
    'amounts' => t('Enter the ask amounts to be used as a comma-delimited; for example: 27,200,3000'),
    'recurring_amounts' => t('Enter the recurring ask amounts to be used as a comma-delimited list; for example: 27,200,3000'),
  );
  foreach ($dyn_gift_vals as $form_key => $default_value) {
    $form['dyn_gift_values'][$form_key] = array(
      '#title' => $form_key,
      '#type' => 'textfield',
      '#default_value' => $default_value,
    );
    if (isset($dyn_gift_descrs[$form_key])) {
      $form['dyn_gift_values'][$form_key]['#description'] = $dyn_gift_descrs[$form_key];
    }
  }

  $form['test_url_prefix'] = array(
    '#title' => 'Target form path',
    '#type' => 'textfield',
    '#default_value' => $target_form_prefix,
    '#required' => TRUE,
    '#description' => 'The path of the form to be tested; for example: springboard/node/2',
  );

  $form['submit'] = array(
    '#value' => t('Update Test URLs'),
    '#type' => 'submit',
  );
  return $form;
}

/**
 * Generate and display test URLs using tokens derived from test values set on the test generator form.
 */
function _dynamic_gift_string_generate_test_urls($target_form_prefix) {
  module_load_include('inc', 'secure_prepopulate', 'secure_prepopulate.admin');
  $form_defaults = _dynamic_gift_string_get_test_generator_defaults();
  $sec_pop_vals = variable_get('sec_pop_test_gen_values', $form_defaults['secure_prepopulate']);
  $dyn_gift_vals = variable_get('dyn_gift_test_gen_values', $form_defaults['dynamic_gift_strings']);
  $urls = array();
  $output = '';

  // Define test URLs
  $test_url_options = array();
  $test_url_options[] = array(
    'descr' => t('Secure Prepopulate section information + ask amounts with default + recurring amounts with default'),
    'exclude_fields' => array());
  $test_url_options[] = array(
    'descr' => t('Secure Prepopulate section information + ask amounts with default + recurring amounts without default'),
    'exclude_fields' => array('recurring_default')); 
  $test_url_options[] = array(
    'descr' => t('Secure Prepopulate section information + ask amounts with default + no recurring amounts'),
    'exclude_fields' => array('recurring_amounts', 'recurring_default')); 
  $test_url_options[] = array(
    'descr' => t('Secure Prepopulate section information + ask amounts without default + recurring amounts with default'),
    'exclude_fields' => array('default_amount'));
  $test_url_options[] = array(
    'descr' => t('Secure Prepopulate section information + ask amounts without default + recurring amounts without default'),
    'exclude_fields' => array('default_amount', 'recurring_default')); 
  $test_url_options[] = array(
    'descr' => t('Secure Prepopulate section information + ask amounts without default + no recurring amounts'),
    'exclude_fields' => array('default_amount', 'recurring_amounts', 'recurring_default'));
  $test_url_options[] = array(
    'descr' => t('Secure Prepopulate section information + no ask amounts + recurring amounts with default'),
    'exclude_fields' => array('amounts', 'default_amount'));
  $test_url_options[] = array(
    'descr' => t('Secure Prepopulate section information + no ask amounts + recurring amounts without default'),
    'exclude_fields' => array('amounts', 'default_amount', 'recurring_default')); 
  $test_url_options[] = array(
    'descr' => t('Secure Prepopulate section information only'),
    'exclude_fields' => array('amounts', 'default_amount', 'recurring_amounts', 'recurring_default'));

  // Generate the token for secure populate fields:
  if ($af = secure_prepopulate_generate_af_string($sec_pop_vals)) {
    $sec_pop_token = substr($af, 3);
  }

  // Generate the dynamic gift strings tokens for each test link, then render the link:
  foreach ($test_url_options as $options) {
    $test_options = $dyn_gift_vals;
    foreach ($options['exclude_fields'] as $exclude_field) {
      if (isset($test_options[$exclude_field])) {
        unset($test_options[$exclude_field]);
      }
    }
    if ($gs = secure_prepopulate_generate_gs_string($test_options)) {
      $dyn_gift_token = substr($gs, 3);
      $output .= '<a href="/' .  $target_form_prefix . '?gs=' . $dyn_gift_token . '&af=' . $sec_pop_token . '">' . $options['descr'] . '</a><br />';
    }
  }

  return $output;
}


/**
 * For submit function for the test url generator.
 */
function dynamic_gift_strings_test_url_generator_form_submit($form, &$form_state) {
  $form_keys = _dynamic_gift_string_get_test_generator_defaults();
  $new_sec_pop_defaults = array();
  foreach ($form_keys['secure_prepopulate'] as $key => $default_value) {
    if (isset($form_state['values'][$key])) {
      $new_sec_pop_defaults[$key] = $form_state['values'][$key];
    }
  }
  variable_set('sec_pop_test_gen_values', $new_sec_pop_defaults);

  $new_dyn_gift_defaults = array();
  foreach ($form_keys['dynamic_gift_strings'] as $key => $default_value) {
    if (isset($form_state['values'][$key])) {
      $new_dyn_gift_defaults[$key] = $form_state['values'][$key];
    }
  }
  variable_set('dyn_gift_test_gen_values', $new_dyn_gift_defaults);
  variable_set('dync_gift_test_get_url_prefix', $form_state['values']['test_url_prefix']);

  drupal_set_message('Test generator values have been updated.');
}

/**
 * Implmentation of hook_form_alter().
 */
function dynamic_gift_strings_form_alter(&$form, &$form_state, $form_id) {
  // make sure the node has a webform
  if (strstr($form_id, 'webform_client_form')) {
    $node = $form['#node'];
    if ($node->type == 'donation_form') {
      if (isset($_SESSION['dynamic_gift_string_values'][$node->nid])
         && is_array($_SESSION['dynamic_gift_string_values'][$node->nid])) { // Coder: This is ok.
        $component_hierarchy = _fundraiser_webform_parse_components($node->nid, $node->webform['components']);
        $gs = $_SESSION['dynamic_gift_string_values'][$node->nid]; // Coder: This is ok.
        if (!empty($gs['amounts'])) {
          // create an array of amounts to replace the defaults
          $amounts = _dynamic_gift_strings_parse_amounts($gs['amounts'], $node->show_other_amount, $node->nid);
          // grab the default
          $default = !empty($gs['default']) ? $gs['default'] : NULL;
          // parse out the form components so we can find the 'amount' field
          $amount_field = &_fundraiser_webform_find_field($form, $component_hierarchy['amount']);
          // make sure we have the field and a good array of amounts
          if ($amount_field && $amounts) {
            // we want to preserve the "other amount" option if present in the original form.
            if (isset($amount_field["#options"]['other'])) {
              $amounts['other'] = t('Other');
            }
            $amount_field['#options'] = $amounts;

            // Set the default if available and in the options.
            if (is_numeric($default) && isset($amount_field['#options'][$default])) {
              $amount_field['#default_value'] = $default;
            }
            // Unset if the default value isn't set nor in the options.
            else {
              unset($amount_field['#default_value']);
            }
          }
        }
        // Might there be recurring ask amounts too?
        if (module_exists('fundraiser_sustainers') && isset($gs['recurring_amounts'])
          && isset($node->recurring_setting) && $node->recurring_setting != 'never'  // Not relevant if non-recurring form.
          && !($node->recurring_setting == 'user_choice' && empty($node->recurring_dual_ask_amounts))  // Not relevant if user-choice form that only uses the one-time ask amounts.
        ) {
          $recurring_amounts = _dynamic_gift_strings_parse_amounts($gs['recurring_amounts'], $node->recurring_show_other_amount, $node->nid);
          $recurring_default = !empty($gs['recurring_default']) ? $gs['recurring_default'] : NULL;
          // parse out the form components so we can find the 'amount' field
          $field_name = ($node->recurring_setting == 'always') ? 'amount' : 'recurring_amount';
          if (!empty($component_hierarchy[$field_name])) {
            // make sure we have the field and a good array of amounts
            $recurring_amount_field = &_fundraiser_webform_find_field($form, $component_hierarchy[$field_name]);
            if ($recurring_amount_field && $recurring_amounts) {
              // we want to preserve the "other amount" option if present in the original form.
              if (isset($recurring_amount_field["#options"]['other'])) {
                $recurring_amounts['other'] = t('Other');
              }
              $recurring_amount_field['#options'] = $recurring_amounts;
              if (is_numeric($recurring_default) && isset($recurring_amount_field['#options'][$recurring_default])) {
                $recurring_amount_field['#default_value'] = $recurring_default;
              }
              // Unset if the default value isn't set nor in the options.
              else {
                unset($recurring_amount_field['#default_value']);
              }
            }
          }
        }
        // add a submit handler to clear out gift strings if the user donates
        $form['#submit'][] = 'dynamic_gift_strings_submit';
      }
    }
  }
  // add some settings to the secure prepopulate form
  if ($form_id == 'secure_prepopulate_admin_settings') {
    $form['dynamic_gift_strings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Dynamic gift string settings'),
      '#weight' => 0,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['dynamic_gift_strings']['dynamic_gift_strings_never_expire'] = array(
      '#type' => 'checkbox',
      '#title' => t('Gift string never expires'),
      '#default_value' => variable_get('dynamic_gift_strings_never_expire', 1),
      '#description' => t('Check this setting to allow the gift string to be used on multiple site visits.'),
    );
    $form['dynamic_gift_strings']['dynamic_gift_strings_send_alert'] = array(
      '#type' => 'checkbox',
      '#title' => t('Send email alert when a dynamic gift string cannot be applied'),
      '#default_value' => variable_get('dynamic_gift_strings_send_alert', 0),
    );
    $form['dynamic_gift_strings']['dynamic_gift_strings_alert_email'] = array(
      '#type' => 'textfield',
      '#title' => t('Email address'),
      '#description' => t('The email address where the alert will be sent.'),
      '#default_value' => variable_get('dynamic_gift_strings_alert_email', ''),
    );
    $form['#validate'][] = 'dynamic_gift_strings_settings_validate';
  }
}

/**
 * Form validation function form dynamic gift string settings.
 */
function dynamic_gift_strings_settings_validate(&$form, &$form_state) {
  if (!empty($form_state['values']['dynamic_gift_strings_send_alert']) && !valid_email_address($form_state['values']['dynamic_gift_strings_alert_email'])) {
    form_set_error('dynamic_gift_strings_alert_email', 'Alert email must be a valid email address.');
  }
}

/**
 * Submit handler for clearing dynamic gift strings.
 */
function dynamic_gift_strings_submit(&$form, &$form_state) {
  // clear out the session
  $node = $form['#node'];
  dynamic_gift_strings_clear_session($node->nid);
}

/**
 * Clears session based gift string amounts for a given donation form node.
 *
 * @param $nid
 *   The id of the donation form node.
 */
function dynamic_gift_strings_clear_session($nid) {
  unset($_SESSION['dynamic_gift_string_values'][$nid]); // Coder: This is ok.
}

/**
 * Implements hook_mail().
 */
function dynamic_gift_strings_mail($key, &$message, $params) {
  switch ($key) {
    case 'dynamic_gift_strings_alert':
      $message['subject'] = 'Invalid gift string detected';
      $message['body'][] = "The following gift string was passed to donation form node " . $params['nid'] . ":\n";
      foreach ($params['amounts'] as $amount) {
        $message['body'][0] .= "- " . $amount . "\n";
      }
      $message['body'][] = 'Since the gift amounts were not valid they could not be applied to the donation form. ' .
        'Please double check your configuration.';
      break;
  }
}

/**
 * Converts the dynamic ask amounts into an array of amount suitable for display.
 *
 * @param $amounts
 *   An unformatted array of ask amounts.
 * @param $show_other
 *   Flag to indicate whether or not the 'other' amount should be added.
 */
function _dynamic_gift_strings_parse_amounts($amounts, $show_other, $nid) {
  $amounts = explode('|', $amounts);
  $formatted_amounts = array();
  $all_valid = TRUE;

  // format the amounts
  foreach ($amounts as $amount) {
    // first, check to see if the value is numeric. if not, we have some bogus data.
    if (!is_numeric($amount) || $amount == 0) {
      $all_valid = FALSE;
    }
    // if the number has a decimal, retain it. otherwise format without decimals
    if (is_float($amount + 1)) { // implicit cast hack
      $formatted_amounts[$amount] = '$' . number_format($amount, 2, '.', ',');
    }
    elseif (is_integer($amount + 1)) {
      $formatted_amounts[$amount] = '$' . number_format($amount, 0, '', ',');
    }
  }
  // re-add 'other' if enabled
  if ($show_other) {
    $formatted_amounts['other'] = 'Other';
  }
  if ($all_valid) {
    return $formatted_amounts;
  }
  else {
    _dynamic_gift_strings_alert($amounts, $nid);
    return FALSE;
  }
}

/**
 * Will attempt to send an alert to an email address when bad gift strings are encountered.
 *
 * @param $amounts
 *   The array of gift string amounts.
 * @param $nid
 *   The id of the donation form node where the gift string was applied.
 */
function _dynamic_gift_strings_alert($amounts, $nid) {
  // log to watchdog for prosperity
  watchdog('dynamic gift strings', 'Invalid gift string detected', NULL, WATCHDOG_ALERT);
  // see if we need to fire off an email
  $send_alert = variable_get('dynamic_gift_strings_send_alert', 0);
  if ($send_alert) {
    $email = variable_get('dynamic_gift_strings_alert_email', '');
    if (valid_email_address($email)) {
      $params = array(
        'nid' => $nid,
        'amounts' => $amounts,
      );
      drupal_mail('dynamic_gift_strings', 'dynamic_gift_strings_alert', $email, language_default(), $params);
    }
  }
}


/**
 * Implements hook_node_load().
 *
 * If a webform is not a donation form, has a redirect,
 * and $_GET['gs'] exists and is not already in the node's redirect url setting,
 * add the gift string paramter to the $node->webform['redirect'] string.
 */
function dynamic_gift_strings_node_load($nodes, $types) {
  foreach ($nodes as $node) {
    if (isset($_GET['gs'])
      && !fundraiser_is_donation_type($node->type)
      && in_array($node->type, variable_get('webform_node_types', array()))) {
      $redirect_url = $node->webform['redirect_url'];
      if ($redirect_url != '<confirmation>' && $redirect_url != '<none>') {
        $parts = drupal_parse_url($redirect_url);
        if (!isset($parts['query']['gs'])) {
          $num = count($parts['query']);
          $gs = urlencode($_GET['gs']);
          $qstring = $num <= 1 ? '?gs=' . $gs : '&gs=' . $gs;
          $node->webform['redirect_url'] = $node->webform['redirect_url'] . $qstring;
        }
      }
    }
  }
}

/**
 * Helpful function to return the list of field + default values for the test url generator:
 */
function _dynamic_gift_string_get_test_generator_defaults() {
  return array(
    'secure_prepopulate' => array(
      'first_name' => 'Jane',
      'last_name' => 'Public',
      'email' => 'jane.q.public@example.com',
      'address' => '123 Lois Lane',
      'address_line_2' => 'Apt. 7',
      'city' => 'New York',
      'country' => 'US',
      'state' => 'NY',
      'zip' => '10005'
    ),
    'dynamic_gift_strings' => array(
      'amounts' => '10,20,50,100,200,2000',
      'default_amount' => '50',
      'recurring_amounts' => '10,20,50,100,200,2000',
      'recurring_default' => '20',
    ),
  );
}
