<?php
/**
 * @file
 * Secure pre-populate install/schema hooks.
 */

/**
 * Implements hook_requirements().
 */
function secure_prepopulate_requirements($phase) {
  $severity = REQUIREMENT_ERROR;
  $status = 'missing';
  // Check for mcrypt extension.
  if (extension_loaded("mcrypt")) {
    $severity = REQUIREMENT_OK;
    $status = 'installed';
  }
  $requirements = array(
    array(
      'title' => 'Secure Pre-populate',
      'description' => t('Secure Pre-populate requires that PHP Mcrypt extension be installed on the web server.'),
      'severity' => $severity,
      'value' => 'PHP Mcrypt extension ' . $status,
    ),
  );
  return $requirements;
}

/**
 * Implements hook_schema().
 */
function secure_prepopulate_schema() {
  $schema = array();
  $schema['secure_prepopulate_expired'] = array(
    'description' => 'Expired pre-populate strings',
    'fields' => array(
      'hash' => array(
        'description' => 'The hashed qs string',
        'type' => 'varchar',
        'length' => '40',
        'not null' => FALSE,
      ),
      'expire_date' => array(
        'description' => 'When it expired',
        'type' => 'int',
        'not null' => FALSE,
      ),
    ),
    'indexes' => array(
      'hash' => array('hash'),
      'expired' => array('expire_date'),
    ),
  );
  $schema['secure_prepopulate_synonyms'] = array(
    'description' => 'Token string keys and their associated webform component form_keys',
    'fields' => array(
      'token_key' => array(
        'type' => 'varchar',
        'length' => 40,
        'not null' => FALSE,
      ),
      'synonyms' => array(
        'type' => 'text',
      ),
    ),
    'primary key' => array('token_key'),
  );
  return $schema;
}

/**
 * Add indexes to tables.
 */
function secure_prepopulate_update_7001() {
  db_add_index('secure_prepopulate_expired', 'hash', array('hash'));
  db_add_index('secure_prepopulate_expired', 'expired', array('expire_date'));
}

/**
 * Add the secure preopoulate autofill field to existing webforms.
 */
function secure_prepopulate_update_7002(&$sandbox) {

  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $sandbox['max'] = db_query('SELECT COUNT(nid) FROM {webform}')->fetchField();
    $sandbox['messages'] = array();
    $sandbox['current_node'] = -1;
  }

  $limit = 25;

  $nodes = db_select('webform', 'n')
    ->fields('n', array('nid'))
    ->orderBy('n.nid', 'ASC')
    ->where('n.nid > :nid', array(':nid' => $sandbox['current_node']))
    ->extend('PagerDefault')
    ->limit($limit)
    ->execute();

  foreach ($nodes as $node) {
    $sandbox['progress']++;
    $sandbox['current_node'] = $node->nid;

    $cid = db_query('select wc.cid from {webform_component} wc
      WHERE wc.nid = :nid AND wc.form_key = :key',
      array(':nid' => $node->nid, ':key' => 'secure_prepop_autofilled')
    )->fetchAssoc();

    if (!$cid) {
      $field = array(
        'nid' => $node->nid,
        'form_key' => 'secure_prepop_autofilled',
        'pid' => 0,
        'name' => t('Autofilled'),
        'type' => 'hidden',
        'value' => 0,
        'weight' => 13,
        'email' => 1,
        '#extra' => array(
          'description' => '',
          'hidden_type' => 'hidden',
        ),
      );
      webform_component_insert($field);
    }
  }

  $sandbox['#finished'] = ($sandbox['progress'] >= $sandbox['max']) ? TRUE : ($sandbox['progress'] / $sandbox['max']);

  if ($sandbox['#finished']) {
    return t('Autofill field has been added to existing webforms.');
  }
}
